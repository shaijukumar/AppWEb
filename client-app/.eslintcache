[{"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/index.tsx":"1","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/reportWebVitals.ts":"2","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/layout/App.tsx":"3","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/layout/ScrollToTop.tsx":"4","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/user/UserStore.ts":"5","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/user/Login.tsx":"6","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/user/UserList.tsx":"7","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/user/UserEdit.tsx":"8","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/user/UserProfile.tsx":"9","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserAccess/AppUserAccessList.tsx":"10","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserRole/AppUserRoleList.tsx":"11","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/home/HomePage.tsx":"12","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserRole/AppUserRoleEdit.tsx":"13","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/AppTableMasterList.tsx":"14","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/AppTableMasterEdit.tsx":"15","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/TableFlowList.tsx":"16","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/TableActions.tsx":"17","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/TableColumns.tsx":"18","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppColumnMaster/AppColumnMasterList.tsx":"19","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppColumnMaster/AppColumnMasterEdit.tsx":"20","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserRoleMaster/AppUserRoleMasterList.tsx":"21","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserRoleMaster/AppUserRoleMasterEdit.tsx":"22","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppData/AppDataList.tsx":"23","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppData/AppDataEdit.tsx":"24","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppStatusList/AppStatusListEdit.tsx":"25","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppHistory/AppHistoryList.tsx":"26","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppHistory/AppHistoryEdit.tsx":"27","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppStatusList/AppStatusListList.tsx":"28","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppConfigType/AppConfigTypeEdit.tsx":"29","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppConfigType/AppConfigTypeList.tsx":"30","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppAction/AppActionList.tsx":"31","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppAction/AppActionEdit.tsx":"32","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppFlow/AppFlowEdit.tsx":"33","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppConfig/AppConfigEdit.tsx":"34","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppFlow/AppFlowList.tsx":"35","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppApi/AppApiEdit.tsx":"36","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppApi/AppApiList.tsx":"37","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppAttachment/AppAttachmentList.tsx":"38","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppAttachment/AppAttachmentEdit.tsx":"39","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNavigation/AppNavigationList.tsx":"40","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNavigation/AppNavigationEdit.tsx":"41","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNotificationsMaster/AppNotificationsMasterList.tsx":"42","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNotificationsMaster/AppNotificationsMasterEdit.tsx":"43","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNitificationTemplate/AppNitificationTemplateList.tsx":"44","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AdminPage/AdminPage.tsx":"45","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNitificationTemplate/AppNitificationTemplateEdit.tsx":"46","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/nav/Notifications.tsx":"47","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/nav/CurrentUser.tsx":"48","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserAccess/AppUserAccessEdit.tsx":"49","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/TableStatusList.tsx":"50","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/TableActionItemEdit.tsx":"51","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNotifications/AppNotificationsEdit.tsx":"52","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppConfig/AppConfigList.tsx":"53","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNotifications/AppNotificationsList.tsx":"54","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/common/ErrorPage.tsx":"55","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/Employee/EmployeeEdit.tsx":"56","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/Employee/EmployeeList.tsx":"57","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/Navigation/LeftNavBar.tsx":"58","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/TestOne/TestOneList.tsx":"59","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/TestOne/TestOneEdit.tsx":"60","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/Navigation/NavigationEdit.tsx":"61","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/Navigation/NavigationList.tsx":"62","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/user/User.ts":"63","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/user/UserManagerStore.ts":"64","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/api/agent.ts":"65","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNotifications/AppNotificationsStore.ts":"66","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppConfig/AppConfigStore.ts":"67","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNotifications/AppNotifications.ts":"68","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppAction/AppActionStore.ts":"69","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppConfigType/AppConfigTypeStore.ts":"70","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppFlow/AppFlowStore.ts":"71","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppAction/AppAction.ts":"72","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/AppTableMasterStore.ts":"73","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppStatusList/AppStatusListStore.ts":"74","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppStatusList/AppStatusList.ts":"75","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppColumnMaster/AppColumnMaster.ts":"76","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserAccess/AppUserAccessStore.ts":"77","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserAccess/AppUserAccess.ts":"78","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/TestOne/TestOne.ts":"79","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/Navigation/Navigation.ts":"80","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/Api/Api.ts":"81","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/MyCustomTxt.tsx":"82","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/TableButton.tsx":"83","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/common/ErrorMessage.tsx":"84","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/MyDropDown.tsx":"85","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/common/MessageDialog.tsx":"86","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/TableDetails.tsx":"87","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppColumnMaster/AppColumn.tsx":"88","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/MyCheckBox.tsx":"89","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/ConfigDropDown.tsx":"90","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/MyDatePicker.tsx":"91","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/MyAttachment.tsx":"92","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/MyCurrencyInput.tsx":"93","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/user/UserManager.ts":"94","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppConfig/AppConfig.ts":"95","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNotificationsMaster/AppNotificationsMaster.ts":"96","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppConfigType/AppConfigType.ts":"97","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppFlow/AppFlow.ts":"98","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/AppTableMaster.ts":"99","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/Theme.ts":"100","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/SystemConstants.ts":"101","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppColumnMaster/AppColumnMasterStore.ts":"102","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/Employee/Employee.ts":"103","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNitificationTemplate/AppNitificationTemplateStore.ts":"104","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNitificationTemplate/AppNitificationTemplate.ts":"105","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNotificationsMaster/AppNotificationsMasterStore.ts":"106","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserRoleMaster/AppUserRoleMasterStore.ts":"107","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNavigation/AppNavigationStore.ts":"108","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/UserSelect.tsx":"109","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/RoleSelect.tsx":"110","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNavigation/AppNavigation.ts":"111","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppAttachment/AppAttachmentStore.ts":"112","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppAttachment/AppAttachment.ts":"113","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppApi/AppApi.ts":"114","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppApi/AppApiStore.ts":"115","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppHistory/AppHistoryStore.ts":"116","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppHistory/AppHistory.ts":"117","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppData/AppDataStore.ts":"118","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppData/AppData.ts":"119","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserRoleMaster/AppUserRoleMaster.ts":"120","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserRole/AppUserRole.ts":"121","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserRole/AppUserRoleStore.ts":"122"},{"size":765,"mtime":1629643209045,"results":"123","hashOfConfig":"124"},{"size":425,"mtime":1629643209046,"results":"125","hashOfConfig":"124"},{"size":14021,"mtime":1629715599641,"results":"126","hashOfConfig":"124"},{"size":333,"mtime":1629643209037,"results":"127","hashOfConfig":"124"},{"size":2124,"mtime":1629643209045,"results":"128","hashOfConfig":"124"},{"size":3062,"mtime":1629643209045,"results":"129","hashOfConfig":"124"},{"size":5135,"mtime":1629643209045,"results":"130","hashOfConfig":"124"},{"size":5237,"mtime":1629643209045,"results":"131","hashOfConfig":"124"},{"size":524,"mtime":1629643209045,"results":"132","hashOfConfig":"124"},{"size":2715,"mtime":1629643209043,"results":"133","hashOfConfig":"124"},{"size":3024,"mtime":1629643209044,"results":"134","hashOfConfig":"124"},{"size":542,"mtime":1629643209044,"results":"135","hashOfConfig":"124"},{"size":5611,"mtime":1629643209044,"results":"136","hashOfConfig":"124"},{"size":21507,"mtime":1629717083232,"results":"137","hashOfConfig":"124"},{"size":8661,"mtime":1629643209042,"results":"138","hashOfConfig":"124"},{"size":5208,"mtime":1629643209043,"results":"139","hashOfConfig":"124"},{"size":8814,"mtime":1629643209043,"results":"140","hashOfConfig":"124"},{"size":5861,"mtime":1629643209043,"results":"141","hashOfConfig":"124"},{"size":2648,"mtime":1629643209039,"results":"142","hashOfConfig":"124"},{"size":4736,"mtime":1629643209039,"results":"143","hashOfConfig":"124"},{"size":2439,"mtime":1629643209044,"results":"144","hashOfConfig":"124"},{"size":8581,"mtime":1629643209044,"results":"145","hashOfConfig":"124"},{"size":2440,"mtime":1629643209040,"results":"146","hashOfConfig":"124"},{"size":3229,"mtime":1629643209040,"results":"147","hashOfConfig":"124"},{"size":4659,"mtime":1629643209042,"results":"148","hashOfConfig":"124"},{"size":2520,"mtime":1629643209041,"results":"149","hashOfConfig":"124"},{"size":3309,"mtime":1629643209041,"results":"150","hashOfConfig":"124"},{"size":3219,"mtime":1629643209042,"results":"151","hashOfConfig":"124"},{"size":6300,"mtime":1629643209040,"results":"152","hashOfConfig":"124"},{"size":2554,"mtime":1629643209040,"results":"153","hashOfConfig":"124"},{"size":4855,"mtime":1629643209038,"results":"154","hashOfConfig":"124"},{"size":6711,"mtime":1629643209038,"results":"155","hashOfConfig":"124"},{"size":3253,"mtime":1629643209041,"results":"156","hashOfConfig":"124"},{"size":6384,"mtime":1629643209039,"results":"157","hashOfConfig":"124"},{"size":2459,"mtime":1629643209041,"results":"158","hashOfConfig":"124"},{"size":13781,"mtime":1629643209038,"results":"159","hashOfConfig":"124"},{"size":4597,"mtime":1629643209038,"results":"160","hashOfConfig":"124"},{"size":2781,"mtime":1629643209039,"results":"161","hashOfConfig":"124"},{"size":4382,"mtime":1629643209039,"results":"162","hashOfConfig":"124"},{"size":3106,"mtime":1629643209041,"results":"163","hashOfConfig":"124"},{"size":5286,"mtime":1629643209041,"results":"164","hashOfConfig":"124"},{"size":2682,"mtime":1629643209042,"results":"165","hashOfConfig":"124"},{"size":3553,"mtime":1629643209042,"results":"166","hashOfConfig":"124"},{"size":2527,"mtime":1629643209041,"results":"167","hashOfConfig":"124"},{"size":1954,"mtime":1629643209038,"results":"168","hashOfConfig":"124"},{"size":5063,"mtime":1629643209041,"results":"169","hashOfConfig":"124"},{"size":4633,"mtime":1629643209044,"results":"170","hashOfConfig":"124"},{"size":1548,"mtime":1629643209044,"results":"171","hashOfConfig":"124"},{"size":4314,"mtime":1629643209043,"results":"172","hashOfConfig":"124"},{"size":5758,"mtime":1629643209043,"results":"173","hashOfConfig":"124"},{"size":8140,"mtime":1629643209043,"results":"174","hashOfConfig":"124"},{"size":3783,"mtime":1629643209042,"results":"175","hashOfConfig":"124"},{"size":3247,"mtime":1629643209039,"results":"176","hashOfConfig":"124"},{"size":2740,"mtime":1629643209042,"results":"177","hashOfConfig":"124"},{"size":516,"mtime":1629643209036,"results":"178","hashOfConfig":"124"},{"size":6533,"mtime":1629643209035,"results":"179","hashOfConfig":"124"},{"size":3255,"mtime":1629643209035,"results":"180","hashOfConfig":"124"},{"size":2108,"mtime":1629722255886,"results":"181","hashOfConfig":"124"},{"size":4864,"mtime":1629643209036,"results":"182","hashOfConfig":"124"},{"size":4544,"mtime":1629643209036,"results":"183","hashOfConfig":"124"},{"size":5948,"mtime":1629643209035,"results":"184","hashOfConfig":"124"},{"size":9273,"mtime":1629809993246,"results":"185","hashOfConfig":"124"},{"size":692,"mtime":1629643209045,"results":"186","hashOfConfig":"124"},{"size":2764,"mtime":1629643209045,"results":"187","hashOfConfig":"124"},{"size":2372,"mtime":1629643209036,"results":"188","hashOfConfig":"124"},{"size":3379,"mtime":1629643209042,"results":"189","hashOfConfig":"124"},{"size":3131,"mtime":1629643209039,"results":"190","hashOfConfig":"124"},{"size":724,"mtime":1629643209042,"results":"191","hashOfConfig":"124"},{"size":3150,"mtime":1629643209038,"results":"192","hashOfConfig":"124"},{"size":2591,"mtime":1629643209040,"results":"193","hashOfConfig":"124"},{"size":2977,"mtime":1629643209041,"results":"194","hashOfConfig":"124"},{"size":1019,"mtime":1629643209038,"results":"195","hashOfConfig":"124"},{"size":2730,"mtime":1629643209042,"results":"196","hashOfConfig":"124"},{"size":3318,"mtime":1629643209042,"results":"197","hashOfConfig":"124"},{"size":311,"mtime":1629643209042,"results":"198","hashOfConfig":"124"},{"size":698,"mtime":1629643209039,"results":"199","hashOfConfig":"124"},{"size":2643,"mtime":1629643209043,"results":"200","hashOfConfig":"124"},{"size":335,"mtime":1629643209043,"results":"201","hashOfConfig":"124"},{"size":587,"mtime":1629643209036,"results":"202","hashOfConfig":"124"},{"size":522,"mtime":1629643209035,"results":"203","hashOfConfig":"124"},{"size":12619,"mtime":1629643209035,"results":"204","hashOfConfig":"124"},{"size":1774,"mtime":1629643209037,"results":"205","hashOfConfig":"124"},{"size":1219,"mtime":1629643209037,"results":"206","hashOfConfig":"124"},{"size":507,"mtime":1629643209036,"results":"207","hashOfConfig":"124"},{"size":1983,"mtime":1629643209037,"results":"208","hashOfConfig":"124"},{"size":1239,"mtime":1629643209036,"results":"209","hashOfConfig":"124"},{"size":10653,"mtime":1629702232827,"results":"210","hashOfConfig":"124"},{"size":7120,"mtime":1629643209039,"results":"211","hashOfConfig":"124"},{"size":1084,"mtime":1629643209037,"results":"212","hashOfConfig":"124"},{"size":3704,"mtime":1629643209036,"results":"213","hashOfConfig":"124"},{"size":2181,"mtime":1629643209037,"results":"214","hashOfConfig":"124"},{"size":10745,"mtime":1629643209037,"results":"215","hashOfConfig":"124"},{"size":1998,"mtime":1629643209037,"results":"216","hashOfConfig":"124"},{"size":432,"mtime":1629643209045,"results":"217","hashOfConfig":"124"},{"size":569,"mtime":1629643209039,"results":"218","hashOfConfig":"124"},{"size":742,"mtime":1629643209042,"results":"219","hashOfConfig":"124"},{"size":285,"mtime":1629643209040,"results":"220","hashOfConfig":"124"},{"size":251,"mtime":1629643209040,"results":"221","hashOfConfig":"124"},{"size":290,"mtime":1629643209042,"results":"222","hashOfConfig":"124"},{"size":242,"mtime":1629643209036,"results":"223","hashOfConfig":"124"},{"size":1059,"mtime":1629643209036,"results":"224","hashOfConfig":"124"},{"size":3429,"mtime":1629643209039,"results":"225","hashOfConfig":"124"},{"size":771,"mtime":1629643209035,"results":"226","hashOfConfig":"124"},{"size":2854,"mtime":1629643209041,"results":"227","hashOfConfig":"124"},{"size":367,"mtime":1629643209041,"results":"228","hashOfConfig":"124"},{"size":2832,"mtime":1629643209042,"results":"229","hashOfConfig":"124"},{"size":4211,"mtime":1629643209044,"results":"230","hashOfConfig":"124"},{"size":2904,"mtime":1629643209041,"results":"231","hashOfConfig":"124"},{"size":2824,"mtime":1629643209037,"results":"232","hashOfConfig":"124"},{"size":2902,"mtime":1629643209037,"results":"233","hashOfConfig":"124"},{"size":467,"mtime":1629643209041,"results":"234","hashOfConfig":"124"},{"size":3691,"mtime":1629643209039,"results":"235","hashOfConfig":"124"},{"size":945,"mtime":1629643209039,"results":"236","hashOfConfig":"124"},{"size":3712,"mtime":1629643209038,"results":"237","hashOfConfig":"124"},{"size":6779,"mtime":1629643209038,"results":"238","hashOfConfig":"124"},{"size":2580,"mtime":1629643209041,"results":"239","hashOfConfig":"124"},{"size":648,"mtime":1629643209041,"results":"240","hashOfConfig":"124"},{"size":2517,"mtime":1629643209040,"results":"241","hashOfConfig":"124"},{"size":250,"mtime":1629643209040,"results":"242","hashOfConfig":"124"},{"size":670,"mtime":1629643209044,"results":"243","hashOfConfig":"124"},{"size":294,"mtime":1629643209043,"results":"244","hashOfConfig":"124"},{"size":3254,"mtime":1629643209044,"results":"245","hashOfConfig":"124"},{"filePath":"246","messages":"247","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},"slqx5f",{"filePath":"249","messages":"250","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"251","messages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"253","messages":"254","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"255","messages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"257","messages":"258","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"259","messages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"261","messages":"262","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"263","messages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"265","messages":"266","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"267","messages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"269","messages":"270","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"271","messages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"273","messages":"274","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"275","usedDeprecatedRules":"248"},{"filePath":"276","messages":"277","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"278","usedDeprecatedRules":"248"},{"filePath":"279","messages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281","usedDeprecatedRules":"248"},{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"284","usedDeprecatedRules":"248"},{"filePath":"285","messages":"286","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"287","usedDeprecatedRules":"248"},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"302","messages":"303","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"304","messages":"305","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"306","messages":"307","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"308","messages":"309","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"310","messages":"311","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"312","messages":"313","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"314","messages":"315","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"316","messages":"317","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"324","usedDeprecatedRules":"248"},{"filePath":"325","messages":"326","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"327","messages":"328","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"329","usedDeprecatedRules":"248"},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"342","messages":"343","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"344","messages":"345","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"346","messages":"347","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"348","messages":"349","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"350","messages":"351","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"354","usedDeprecatedRules":"248"},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"361","usedDeprecatedRules":"248"},{"filePath":"362","messages":"363","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"364","messages":"365","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"366","messages":"367","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"248"},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"248"},{"filePath":"372","messages":"373","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"376","usedDeprecatedRules":"248"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"381","usedDeprecatedRules":"248"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"384","messages":"385","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"386","messages":"387","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"388","messages":"389","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"390","messages":"391","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"396","messages":"397","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"398","messages":"399","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"400","messages":"401","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"402","messages":"403","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"404","messages":"405","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"406","messages":"407","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"408","messages":"409","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"410","messages":"411","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"414","messages":"415","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"416","messages":"417","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"422","usedDeprecatedRules":"248"},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"425","usedDeprecatedRules":"248"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"430","usedDeprecatedRules":"248"},{"filePath":"431","messages":"432","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"433","messages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"435","messages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"437","usedDeprecatedRules":"248"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"442","usedDeprecatedRules":"248"},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"445","usedDeprecatedRules":"248"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"448","usedDeprecatedRules":"248"},{"filePath":"449","messages":"450","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"248"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"454","usedDeprecatedRules":"248"},{"filePath":"455","messages":"456","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"457","messages":"458","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"459","messages":"460","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"461","messages":"462","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"463","messages":"464","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"465","messages":"466","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"467","messages":"468","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"469","messages":"470","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"471","messages":"472","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"248"},{"filePath":"476","messages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"480","messages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"488","usedDeprecatedRules":"248"},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"491","usedDeprecatedRules":"248"},{"filePath":"492","messages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"498","messages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"500","messages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"504","messages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"506","messages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"248"},"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/index.tsx",[],["516","517"],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/reportWebVitals.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/layout/App.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/layout/ScrollToTop.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/user/UserStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/user/Login.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/user/UserList.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/user/UserEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/user/UserProfile.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserAccess/AppUserAccessList.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserRole/AppUserRoleList.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/home/HomePage.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserRole/AppUserRoleEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/AppTableMasterList.tsx",["518","519","520","521","522","523","524","525","526","527"],"import React, { useContext, useEffect, useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { AppTableMasterContext } from './AppTableMasterStore';\nimport XLSX from \"xlsx\";\nimport { validate, parse } from 'fast-xml-parser';\n\nimport MaterialTable from 'material-table';\nimport TableDetails from './TableDetails';\nimport { AppTableMaster } from './AppTableMaster';\nimport { Button, Dialog, DialogActions, DialogContent, DialogContentText } from '@material-ui/core';\nimport { AppStatusList } from '../AppStatusList/AppStatusList';\nimport { AppColumnMaster } from '../AppColumnMaster/AppColumnMaster';\nimport { AppFlow } from '../AppFlow/AppFlow';\nimport { AppAction, AppExport } from '../AppAction/AppAction';\nimport { ColumnAttachmentType, ColumnDataType } from '../../app/common/SystemConstants';\nimport { AppActionContext } from '../AppAction/AppActionStore';\nimport { AppStatusListContext } from '../AppStatusList/AppStatusListStore';\nimport { AppFlowContext } from '../AppFlow/AppFlowStore';\nimport { AppColumnMasterContext } from '../AppColumnMaster/AppColumnMasterStore';\nimport { AppConfigTypeContext } from '../AppConfigType/AppConfigTypeStore';\nimport ErrorMessage from '../../app/common/common/ErrorMessage';\n\n\n\nconst AppTableMasterList: React.FC = () => {\n    const [error, setError] = useState('');\n    const AppTableMasterStore = useContext(AppTableMasterContext);   \n    const [open, setOpen] = React.useState(false);\n \n    const AppFlowStore = useContext(AppFlowContext);\n    const AppColumnMasterStore = useContext(AppColumnMasterContext);\n    const AppActionStore = useContext(AppActionContext); \n    const AppStatusListStore = useContext(AppStatusListContext);\n    const AppConfigTypeStore = useContext(AppConfigTypeContext);\n\n      \n  \n    const handleClose = () => {\n      setOpen(false);\n    };\n\n    const ImportTable = (evt:any) => {\n      setError('');\n      \n      var files = evt.target.files; // FileList object\n      var xl2json = new ExcelToJSON();\n      xl2json.parseExcel(files[0]);\n      evt.target.value = null;\n\n      // AppConfigTypeStore.getList().then( (configTyps:any) => {\n\n      // });\n\n      \n    };\n\n    const delay = (ms: number) => {\n      return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    class ExcelToJSON {\n      \n      \n      \n\n      parseExcel = function(file:any) {\n       \n        \n        var reader = new FileReader();\n\n        reader.onload = function(e:any) {\n          var data = e.target.result;\n          var workbook = XLSX.read(data, {\n            type: 'binary'\n          });\n\n          var TableName = '';\n          var statusList:AppStatusList[] = [];\n          var columnList:AppColumnMaster[] = [];\n          var flowList:AppFlow[] = [];\n          var actionList:AppExport[] = [];\n\n          // ( async() => { \n          //   var data =   await AppConfigTypeStore.getList(); \n          //   var data1 =   await AppFlowStore.getFlowList(1); \n          //            \n          // })(); \n         \n\n\n          AppConfigTypeStore.getList().then( (configTyps:any) => {\n\n            workbook.SheetNames.forEach(function(sheetName) {\n                          \n              var XL_row_object = XLSX.utils.sheet_to_json(workbook.Sheets[sheetName]); //sheet_to_row_object_array\n              var json_object = JSON.stringify(XL_row_object);\n              if( sheetName == \"Table\"){\n                TableName = (XL_row_object as any)[0].Title;\n                if(!TableName){\n                  AddError(`Empty Table Name`);                  \n                }                \n              }\n              else if( sheetName == \"StatusList\"){                \n                (XL_row_object as any).forEach(function (statusItm:any) {\n\n                  var stFind:any =  statusList.find( (u:any) => u.Title === statusItm.Title ); \n                  if(stFind != null){\n                    AddError(`Duplicate status ${statusItm.Title}`);\n                    return;\n                  }\n                  var status:AppStatusList = new AppStatusList();\n                  status.Title = statusItm.Title;\n                  status.Order = statusItm.Order;\n                  statusList.push(status);\n                });\n                \n              }\n              else if( sheetName == \"ColumnList\"){\n\n                \n                (XL_row_object as any).forEach(function (columnItm:any) {\n                  var column:AppColumnMaster = new AppColumnMaster();\n                  column.Title = columnItm.Title;               \n                  var stFind:any =  columnList.find( (u:any) => u.Title === columnItm.Title ); \n\n                  column.Order = columnItm.Order;\n\n                  if(stFind != null){\n                    AddError(`Duplicate column ${columnItm.Title}`);\n                    return;\n                  }\n\n                  if(columnItm.Type){\n                    var v = ColumnDataType.find( u => u.value === columnItm.Type );\n                    if(v){\n                      column.Type = (v as any).Id ? (v as any).Id : ''; \n                    }\n                    else{\n                      AddError(`Invalid column type ${columnItm.Type}`);\n                      return;\n                    }              \n                  }\n                  if(!column.Type){\n                    AddError(`Invalid column type ${columnItm.Type}`);\n                    return;\n                  }\n\n                  if(column.Type == \"6\" ){//Config type\n\n                    if(columnItm.Config){\n                      var v1:any =  configTyps.find( (u:any) => u.Title === columnItm.Config );                     \n                      if(v1){\n                        column.ConfigId = (v as any).Id ? (v as any).Id : ''; \n                      }\n                      else{\n                        AddError(`Invalid Config  ${columnItm.Config}`);\n                        return;\n                      }              \n                    }\n                    if(!column.ConfigId){\n                      AddError(`Invalid Config  ${columnItm.Config}`);\n                      return;\n                    }\n                  }\n\n                  if(column.Type == \"7\" ){//Attachment\n\n                    if(columnItm.AttachmentConfig){\n\n                      var v2 = ColumnAttachmentType.find( u => u.value === columnItm.AttachmentConfig.toString() );\n                      if(v2){\n                        column.AttachmentConfig = (v2 as any).value ? (v2 as any).Id : ''; \n                      }                      \n                      else{\n                        AddError(`Invalid AttachmentConfig  ${columnItm.AttachmentConfig}`);\n                        return;\n                      }              \n                    }\n                    if(!column.AttachmentConfig){\n                      AddError(`Invalid AttachmentConfig  ${columnItm.AttachmentConfig}`);\n                      return;\n                    }\n                  }\n\n                  columnList.push(column);\n                });\n                \n              }\n              else if( sheetName == \"FlowList\"){\n\n                \n                (XL_row_object as any).forEach(function (flowItm:any) {\n                  var flow:AppFlow = new AppFlow();\n                  flow.Title = flowItm.Title;\n\n                  var stFind:any =  flowList.find( (u:any) => u.Title === flowItm.Title ); \n                  if(stFind != null){\n                    AddError(`Duplicate FlowList ${flowItm.Title}`);\n                    return;\n                  }\n\n                  \n\n                  flowList.push(flow);\n\n                  var XL_row_object = XLSX.utils.sheet_to_json(workbook.Sheets[flowItm.Title]); \n                  \n                  (XL_row_object as any).forEach(function (actionItm:any) {\n\n                    var action:AppExport = new AppExport();\n                    action.Order = actionItm.Order;\n                    action.FlowName = flowItm.Title;\n                    \n\n                    if(  actionItm.ActionType === \"Action\" || actionItm.ActionType === \"Query\" || actionItm.ActionType === \"FileDownload\" ){\n                      action.ActionType = actionItm.ActionType;\n                    }\n                    else{\n                      AddError(`Invlaid ActionType ${action.ActionType}`);\n                      return;\n                    }\n                    action.InitStatus = actionItm.InitStatus;\n\n                    if(actionItm.FromStatus){\n                      actionItm.FromStatus.split(',').forEach(function (st:any) {\n                        st = st.trim();\n                        if(st){\n                          var stFind:any =  statusList.find( (u:any) => u.Title === st );\n                          if(!stFind){\n                            AddError(`Invlaid From Status ${st}`);\n                            return;\n                          }\n                        }\n                      });\n                      action.FromStatus = actionItm.FromStatus;\n                    }\n                    \n                    action.Action = actionItm.Action;\n                    //actionItm.UniqName= actionItm.UniqName;\n                    action.UniqName = actionItm.UniqName;\n                    if(actionItm.ToStatus){\n                      actionItm.ToStatus = actionItm.ToStatus.trim();\n                      var stFind:any =  statusList.find( (u:any) => u.Title === actionItm.ToStatus );\n                      if(!stFind){\n                        AddError(`Invlaid To Status ${actionItm.ToStatus}`);\n                        return;\n                      }\n                      action.ToStatus = actionItm.ToStatus;\n                    }\n\n                    if(actionItm.WhenXml){\n\n                      if( validate(actionItm.WhenXml) === true) {\n                        action.WhenXml = actionItm.WhenXml;\n                      }\n                      else{\n                        AddError(`Invlaid When XML for action - ${actionItm.Action}`);\n                        return;\n                      }                      \n                    }\n                    if(actionItm.ActionXml){\n\n                      if( validate(actionItm.ActionXml) === true) {\n                        action.ActionXml = actionItm.ActionXml;\n                      }\n                      else{\n                        AddError(`Invlaid Action XML for action -  ${actionItm.Action}`);\n                        return;\n                      }                      \n                    }\n\n                    actionList.push(action);\n                  });\n\n                });              \n              }              \n            });\n           \n            if(err){\n              setError( err );\n              return;\n            }\n            //return;\n\n            debugger;\n            ( async() => { \n\n              //Create Table\n              var tab = new AppTableMaster();\n              tab.Title = TableName;\n              var tableObj = await AppTableMasterStore.editItem(tab);\n              if(!CheckError(tableObj)) return;\n\n              await Promise.all(\n                statusList.map( async (status:AppStatusList) => {\n                  status.TableId = tableObj.Id;                  \n                  const stRes = await AppStatusListStore.editItem(status);\n                  if(!CheckError(stRes)) return;\n                  status.Id = stRes.Id;\n                } )                              \n              );\n\n              var colCouter = 0;\n              if(columnList.length>0)\n                do{\n                  columnList[colCouter].TableID = tableObj.Id;\n                  const resObj = await AppColumnMasterStore.editItem(columnList[colCouter]);\n                  if(!CheckError(resObj)) return;\n                  columnList[colCouter].Id = resObj.Id;\n                  colCouter++;\n                }while(colCouter < columnList.length )\n\n              // await Promise.all(\n              //   columnList.map( async (column:AppColumnMaster) => {\n              //     column.TableID = tableObj.Id;\n              //     const resObj = await AppColumnMasterStore.editItem(column);\n              //     if(!CheckError(resObj)) return;\n              //     column.Id = resObj.Id;\n              //   } )                              \n              // );\n              \n              await Promise.all(\n                flowList.map( async (flow:AppFlow) => {\n                  flow.TableId = tableObj.Id;\n                  const resObj = await AppFlowStore.editItem(flow);\n                  if(!CheckError(resObj)) return;\n                  flow.Id = resObj.Id;                  \n                } )                              \n              );\n\n              await Promise.all(\n                actionList.map( async (actObj:AppExport) => {\n                  var action:AppAction = new AppAction();\n\n                  action.TableId = tableObj.Id;\n                  action.UniqName = actObj.UniqName;\n                  \n                  action.Order = actObj.Order;\n                  action.Action = actObj.Action;                 \n                  action.ActionType = actObj.ActionType;                  \n                  action.WhenXml = actObj.WhenXml;\n                  action.ActionXml = actObj.ActionXml;\n\n                  if(actObj.InitStatus == \"Yes\"){\n                    action.InitStatus = true;\n                  }\n                  else{\n                    action.InitStatus = false;\n                  }\n\n                  //FlowName\n                  var flFind:any =  flowList.find( (u:any) => u.Title === actObj.FlowName );\n                  if(flFind){\n                    action.FlowId = flFind.Id;\n                  }\n                  else{\n                    AddError(`Invlaid FlowName - ${actObj.FlowName}`);\n                  }\n\n                  //ToStatusId\n                  if(actObj.ToStatus){\n                      var stFind:any =  statusList.find( (u:any) => u.Title === actObj.ToStatus );\n                      if(stFind){\n                        action.ToStatusId = stFind.Id;\n                      }\n                      else{\n                        AddError(`Invlaid ToStatus - ${actObj.ToStatus}`);\n                      }\n                  }\n                  \n\n                  let FromStatusList : AppStatusList[] = [];\n\n                  \n                  if(actObj.FromStatus){\n                    actObj.FromStatus.split(',').forEach(function (st:any) {\n                      st = st.trim();\n                      if(st){                        \n                        var stFind:any =  statusList.find( (u:any) => u.Title === st );\n                        if(!stFind){\n                          AddError(`Invlaid From Status ${st}`);                          \n                        }\n                        else{\n                          FromStatusList.push(stFind);\n                        }\n                      }\n                    });\n                    \n                  }\n                  action.FromStatusList = FromStatusList;\n\n                  const resObj = await AppActionStore.editItem(action);\n                  if(!CheckError(resObj)) return;\n                  action.Id = resObj.Id;\n                } )                              \n              );\n\n              if(err){\n                setError( err );\n                return;\n              }\n              else{\n                alert( \"Updated\" );                \n              }\n              AppTableMasterStore.getList(); \n              //var data1 =   await AppFlowStore.getFlowList(1); \n              debugger;\n            \n            })();\n\n          });\n\n        };\n\n        reader.onerror = function(ex) {\n          console.log(ex);\n        };\n\n        reader.readAsBinaryString(file);\n      };          \n    };\n\n    var err = '';\n    const AddError = (message:string) => {\n      err =  `${err} ${err ? ', ' : '' } ${message.trim()}`;     \n    };\n    const CheckError = (val:any) => {\n      if(val.errors){\n        AddError(val.errors.Error);\n        setError(err);\n        return false;\n      }     \n      else{\n        return true;\n      }\n    };\n\n    useEffect(() => {       \n      AppTableMasterStore.getList();                  \n    }, [AppTableMasterStore, AppTableMasterStore.getList])       \n\n    // if(AppTableMasterStore.loading){\n    //   return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \n    // }\n\n    const TableColumns = [\n      {\n        title: \"Title\",\n        field: \"Title\",          \n        defaultSort: \"asc\",\n        //render :  (values: any) => { return <NavLink to={\"/AppTableMasterItemEdit/\" + values.Id } >{values.Title}</NavLink> } \n      },  \n      {\n        title: \"Details\",\n        field: \"Details\", \n        render : (values: any) => { return <TableDetails showTitle={false} tableId={values.Id}  /> },              \n        editable: \"never\",    \n      },  \n    ];\n\n    const TableActions = [\n      {          \n          icon: (values: any) => { \n              return <Button  variant=\"contained\" color=\"primary\"  component=\"label\" size=\"small\" >\n                      Import Table<input type=\"file\" multiple={false} onChange={ImportTable}  id=\"raised-button-file\" style={{display: \"none\",}} />\n                     </Button>  },\n          tooltip: 'Import Table',\n          isFreeAction: true,\n          onClick: (event:any) =>{  },   \n          iconProps: { style: { fontSize: \"34px\", color: \"green\", borderRadius:\"0%  !important\" , backgroundColor:'rosybrown' } },            \n      },      \n    ];\n\n\n  \n    return (\n      <React.Fragment>   \n        <ErrorMessage message={error} /> \n                \n        <div className={\"tabcontainers1\"}>\n          <div className={\"tabcontainers2\"} >     \n            {AppTableMasterStore.itemList  &&   \n            <MaterialTable                    \n              title=\"Table List\"\n              data={AppTableMasterStore.itemList}\n              columns={TableColumns as any}\n              actions={TableActions}\n              options={{ sorting:true, search: true, paging: true, filtering: true, exportButton: true, pageSize:10,  tableLayout: \"auto\"}}\n\n              cellEditable={{\n                onCellEditApproved: (newValue:any, oldValue:any, rowData:any, columnDef:any) => {\n                  debugger;       \n                  //let filedName : any =  \"Title\"; //columnDef.field == null ? columnDef.field as string : \"Title\" \n                  return new Promise((resolve, reject) => {\n                    (rowData as any)[columnDef.field as string] = newValue;                   \n                    AppTableMasterStore.editItem(rowData).then((val) =>{   \n                      \n                      if((val as any).errors){\n                        setError((val as any).errors.Error);                         \n                        reject();                                        \n                        setOpen(true);                                                     \n                      }    \n                      else{\n                        resolve();\n                      }               \n                                                        \n                    });                                    \n                  });\n                }\n              }}\n\n              editable={{\n                onRowAdd: (newData:any) => new Promise(resolve => { \n                  debugger;\n                  var tab = new AppTableMaster();\n                  tab.Title = newData.Title;\n                  AppTableMasterStore.editItem(tab).then((val) =>{  \n                    AppTableMasterStore.getList();                   \n                    resolve(true);                                \n                  }) \n                }),\n\n               \n\n                  \n                onRowDelete: (oldData:any) =>\n                  new Promise((resolve, reject) => {\n                    \n                    setTimeout(() => {\n                      debugger;\n                        var itemId = Number((oldData as any).Id);\n                        AppTableMasterStore.deleteItem(itemId).then((val) =>{  \n                          debugger;\n\n                          if((val as any).errors){\n                            setError((val as any).errors.Error);   \n                            resolve(true);\n                            //alert(error);      \n                            setOpen(true);                                                     \n                          }                                                  \n                          AppTableMasterStore.getList().then( () => {resolve(true);});                                          \n                                                      \n                        })                  \n                      resolve(true);\n                    }, 10)\n                  }),\n              }}                          \n            />\n          }\n          </div>\n        </div>\n      \n      \n      <Dialog\n        open={open}\n        onClose={handleClose}\n      >\n        \n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {error}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>          \n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n      \n      </React.Fragment>     \n     \n    );\n};\n\nexport default observer(AppTableMasterList);\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/AppTableMasterEdit.tsx",["528"],"import { Button, ButtonGroup, Container, LinearProgress, List, ListItem, Paper, Table, TableContainer, TableHead, TableRow, TableCell, TableBody, Dialog, DialogTitle, DialogContent, DialogContentText, Link, AppBar, Tabs, Tab } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { AppTableMaster } from './AppTableMaster';\nimport { AppTableMasterContext } from './AppTableMasterStore';\nimport { observer } from 'mobx-react-lite';\nimport { AppColumnMasterContext } from '../AppColumnMaster/AppColumnMasterStore';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport AppColumn from '../AppColumnMaster/AppColumn';\nimport { AppColumnMaster } from '../AppColumnMaster/AppColumnMaster';\nimport { ColumnDataType } from '../../app/common/SystemConstants';\nimport ErrorMessage from '../../app/common/common/ErrorMessage';\n\ninterface DetailParms {\n  id: string;\n}\nconst AppTableMasterEdit: React.FC = () => {\n\n  const { id } = useParams<DetailParms>();\n  const AppTableMasterStore = useContext(AppTableMasterContext);\n  const AppColumnMasterStore = useContext(AppColumnMasterContext); \n \n  let history = useHistory();\n  const [item, setItem] = useState(new AppTableMaster());\n  const [loading, setLoading] = useState(true);\n\n  const [open, setOpen] = useState(false);\n  const [selectedColumn, setSelectedColumn] = useState(new AppColumnMaster());\n  const [error, setError] = useState('');\n\n  const [tabValue, setTabValue] = useState(0);\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setTabValue(newValue);\n  };\n \n \n  \n  \n  \n  useEffect(() => {\n\n    AppTableMasterStore.loadItem(Number(id));\n    if (id) {      \n      AppColumnMasterStore.getColumnList(Number(id));\n      AppTableMasterStore.loadItem(Number(id)).then((res) => {\n\n        if((res as any).errors){          \n          setError( error + \", \" + (res as any).errors.Error); \n          setLoading(false);                       \n        }\n        else{\n          setItem(res as any); setLoading(false);  \n        }          \n      });\n    } else {\n      setItem(new AppTableMaster()); \n      setLoading(false);     \n    }\n    \n  }, [id, AppTableMasterStore, AppTableMasterStore.loadItem, AppColumnMasterStore.getColumnList, AppColumnMasterStore]);\n\n  const onItemSubmit = (values: any) => {    \n    setLoading(true);\n    AppTableMasterStore.editItem(values).then((val) => {\n      history.push('/AppTableMasterlist');\n      // debugger;\n      // setItem(new AppTableMaster(val));\n      // setLoading(false);\n    });\n  };\n\n  const openModel = (col: AppColumnMaster) => {  \n    if(!col.TableID){\n      col.TableID = item.Id;\n    }\n    setSelectedColumn(col);\n    setOpen(true);\n  };\n\n  const RefreshColumns = (col: AppColumnMaster) => {  \n    //refresh colu\n    AppColumnMasterStore.getColumnList(Number(id));\n    setOpen(false);\n  };\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    <Container component=\"main\" maxWidth=\"lg\">  \n    <ErrorMessage message={error} /> \t\n\n      <Formik\n          initialValues={item}\n          validationSchema={Yup.object({\n            Title: Yup.string().required('Title required'),                     \n          })}\n          onSubmit={onItemSubmit}\n          \n        >\n          <Form > \n            {item.Id}\n            <MyCustomTxt   \n                name=\"Title\"                         \n                type=\"text\"                \n                autoFocus={true}\n                required={true}                                \n                label=\"Title\"                                                                     \n            />\n\n            {/* <MyCustomTxt   \n                name=\"UserAccess\"                         \n                type=\"text\"                \n                autoFocus={true}\n                required={false}   \n                multiline={true}                             \n                label=\"User Access\"                                                                     \n            /> */}\n                           \n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"                  \n                >\n                  Save\n                </Button> \n                { item.Id && \n                  <Button\n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n                      AppTableMasterStore.deleteItem(item.Id).then( () => {\n                        history.push('/AppTableMasterlist');\n                      })\n                    }}\n                  >\n                    Delete\n                  </Button>\n                }\n                <Button onClick={ () => { history.push('/AppTableMasterlist');  }}>Back</Button>   \n\n              </ButtonGroup>\n\n          </Form>\n        </Formik>\n\n\n        <List>\n          <ListItem divider>\n            {/* <h5>Column List</h5>   */}\n              \n            <div>\n              <AppBar position=\"static\">\n                <Tabs value={tabValue} onChange={handleChange} aria-label=\"simple tabs example\">\n                  <Tab label=\"Column List\" />\n                  <Tab label=\"Actions\" />                  \n                </Tabs>\n              </AppBar>                           \n          </div>\n      \n          </ListItem>\n          \n          <div hidden={tabValue !== 0}>\n          <ListItem divider hidden={true}  >\n            <TableContainer component={Paper}>\n              <Table aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    {/* <TableCell>ID</TableCell> */}\n                    <TableCell align=\"left\">Title</TableCell>\n                    <TableCell align=\"left\">Type</TableCell>\n                    <TableCell align=\"left\">AppDataFiled</TableCell>\n                    {/* <TableCell align=\"left\">User Access</TableCell> */}\n                    <TableCell align=\"left\">Delete</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {AppColumnMasterStore.columnList.map((row) => (\n                    <TableRow key={row.Id} >\n                      {/* <TableCell component=\"th\" scope=\"row\"  >\n                        <NavLink to={\"/AppColumnMasterItemEdit/\" + row.Id } >{row.Id}</NavLink> \n                      </TableCell> */}\n                                              \n                      <TableCell align=\"left\"  >\n                        <Link href=\"#\" onClick={ () => { openModel( row ) } } >{row.Title}</Link>\n                        \n                      </TableCell>  \n                      <TableCell align=\"left\"> { ColumnDataType.find( u => u.Id === row.Type )?.value }</TableCell> \n                      <TableCell align=\"left\">{row.AppDataFiled}</TableCell> \n                      {/* <TableCell align=\"left\">{row.UserAccess}</TableCell>   */}\n                      <TableCell align=\"left\" >\n                        <DeleteOutlinedIcon onClick={ () => { AppColumnMasterStore.deleteItem(row.Id).then( () => {   AppColumnMasterStore.getColumnList(Number(id)); } )}}  />\n                      </TableCell>            \n                    </TableRow>\n                  ))}\n\n                  <TableRow key=\"AddNew\" >                                                                  \n                   \n                    <Button color=\"primary\" onClick={ () => { openModel( new AppColumnMaster() ) }}>Add New Column</Button>   \n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </ListItem>                    \n          </div>\n     \n      </List> \n\n      <Dialog onClose={() => {}} aria-labelledby=\"simple-dialog-title\" open={open}>\n        <DialogTitle id=\"simple-dialog-title\">Column</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <AppColumn initVal={selectedColumn} parentRefresh={RefreshColumns} />\n          </DialogContentText>\n        </DialogContent>           \n      </Dialog>      \n    </Container>\n\n\n  );\n};\n\nexport default observer(AppTableMasterEdit);\n\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/TableFlowList.tsx",["529","530"],"import { Dialog, DialogTitle, DialogContent, DialogContentText } from '@material-ui/core';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport AppColumn from '../AppColumnMaster/AppColumn';\nimport { AppColumnMaster } from '../AppColumnMaster/AppColumnMaster';\nimport TableDetails from './TableDetails';\nimport MaterialTable from 'material-table';\nimport MessageDialog from '../../app/common/common/MessageDialog';\nimport moment from 'moment';\nimport { AppStatusList } from '../AppStatusList/AppStatusList';\nimport { AppFlowContext } from '../AppFlow/AppFlowStore';\n\ninterface DetailParms {\n    id: string;\n  }\n\n  const TableFlowList: React.FC = () => {\n\n    const { id } = useParams<DetailParms>();\n    const AppFlowStore = useContext(AppFlowContext);\n\n    const [open, setOpen] = useState(false);\n    const [selectedColumn] = useState(new AppColumnMaster());\n   \n    const [dialogMessage, setDialogMessage] = useState('');\n    const [timeStamp, setTimeStamp] = useState('');\n    const [error, setError] = useState('');\n    \n    const showDialogBox = (message: string) => {  \n        setDialogMessage(message);\n        setTimeStamp(moment().toString());\n    };\n\n\n    useEffect(() => {\n      AppFlowStore.getFlowList(Number(id));\n    }, [id,AppFlowStore, AppFlowStore.getFlowList]);\n\n    const TableColumns = [   \n        { title: \"Id\", field: \"Id\"},                \n        { title: \"Title\", field: \"Title\"},                        \n      ];\n   \n \n    const RefreshColumns = (col: AppColumnMaster) => {      \n      AppFlowStore.getFlowList(Number(id));\n        setOpen(false);\n    };\n\n    return(\n    <React.Fragment>\n        <TableDetails tableId={Number(id)}  />\n\n        <MaterialTable                    \n              title=\"Status List\"\n              data={AppFlowStore.tableFlows as any}\n              columns={TableColumns as any}\n              //actions={TableActions}\n              options={{ sorting:true, search: true, paging: true, filtering: true, exportButton: true, pageSize:10,  tableLayout: \"auto\"}}\n\n\n              editable={{\n\n                onRowAdd: newData => new Promise(resolve => { \n\n                  var tab = new AppStatusList();\n                  tab.Title = (newData as any).Title;\n                  tab.Order = (newData as any).Order;\n                  tab.TableId = Number(id);\n                  AppFlowStore.editItem(tab).then((val) =>{  \n                    AppFlowStore.getFlowList(Number(id));                   \n                    resolve(true);                                \n                  })\n                }),\n\n                onRowUpdate: (newData, oldData) =>\n                new Promise((resolve, reject) => {\n                  debugger;\n                  var tab = new AppStatusList();\n                  tab.Title = (newData as any).Title;\n                  tab.Order = (newData as any).Order;\n                  tab.TableId = Number(id);\n                  tab.Id =  (newData as any).Id;\n                  AppFlowStore.editItem(tab).then((val) =>{  \n                    AppFlowStore.getFlowList(Number(id));                   \n                    resolve(true);                                \n                  })\n                  resolve(true);           \n                }),\n\n\n                onRowDelete: oldData =>\n                new Promise((resolve, reject) => {                  \n                  setTimeout(() => {\n                      debugger;\n                      var itemId = Number((oldData as any).Id);\n                      AppFlowStore.deleteItem(itemId).then((val) =>{  \n                        debugger;\n\n                        if((val as any).errors){                         \n                          showDialogBox((val as any).errors.Error);                                                \n                          resolve(true);                                                \n                        }   \n                        else if((val as any).name === 'Error') {                             \n                            showDialogBox( (val as any).message );                                \n                            resolve(true); \n                        }                                               \n                        AppFlowStore.getFlowList(Number(id)).then( () => {resolve(true);});                                          \n                                                    \n                      })                  \n                    resolve(true);\n                  }, 10)\n                }),\n              }}\n        />\n\n        <Dialog onClose={() => {}} aria-labelledby=\"simple-dialog-title\" open={open}>\n            <DialogTitle id=\"simple-dialog-title\">Column</DialogTitle>\n            <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n                <AppColumn initVal={selectedColumn} parentRefresh={RefreshColumns} />\n            </DialogContentText>\n            </DialogContent>           \n        </Dialog>  \n\n    <MessageDialog message={dialogMessage} timeStamp={timeStamp} />\n\n    </React.Fragment>)\n}\n\nexport default observer(TableFlowList);","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/TableActions.tsx",["531","532"],"import React, { useContext, useEffect, useState } from 'react';\nimport { NavLink, useParams } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport TableDetails from './TableDetails';\nimport MaterialTable from 'material-table';\nimport { AppActionContext } from '../AppAction/AppActionStore';\nimport { AppAction, IAppAction } from '../AppAction/AppAction';\nimport { AppStatusListContext } from '../AppStatusList/AppStatusListStore';\nimport { AppFlowContext } from '../AppFlow/AppFlowStore';\nimport TableButton from '../../app/common/form/TableButton';\n\ninterface DetailParms {\n    tableId: string;\n    id: string;   \n  }\n\nconst TableActions: React.FC = () => {\n\n    const { tableId, id } = useParams<DetailParms>();\n    \n    const AppActionStore = useContext(AppActionContext);       \n    const AppStatusListStore = useContext(AppStatusListContext);\n    const AppFlowStore = useContext(AppFlowContext);\n    const [error, setError] = useState('');\n\n    useEffect(() => {     \n        //debugger;        \n        AppFlowStore.loadItem(Number(id));\n        AppActionStore.flowActions(Number(id));\n        AppStatusListStore.getStatusList(Number(tableId));            \n      }, [id, tableId, AppActionStore, AppActionStore.flowActions,AppStatusListStore, AppStatusListStore.getStatusList, AppFlowStore])\n\n    const ShowDesc = (text: string) => {        \n        var res = \"\";\n        if(text){\n        var parser = new DOMParser();\n        var xmlDoc = parser.parseFromString(text,\"text/xml\");\n        res = xmlDoc.getElementsByTagName(\"Desc\")[0].innerHTML;\n        }\n        return res;\n    };\n\n    const TableColumns = [\n        { title: \"Id\", field: \"Id\", editable: 'never', width:'20' },\n        { title: \"UniqName\", field: \"UniqName\"  },\n        { title: \"FlowId\", field: \"FlowId\", hidden: true },\n        { title: \"TableId\", field: \"TableId\", hidden: true },\n        {\n          title: \"Order\",\n          field: \"Order\", \n          type: 'numeric',\n          defaultSort: \"asc\",      \n         // width: \"5%\"\n        },\n        {\n          title: \"Action\", field: \"Action\",          \n          //editable: \"never\",  \n          render : (values: any) => { return <NavLink to={ `/TableActionItemEdit/${tableId}/${values.FlowId}/${values.Id}` } >{values.Action}</NavLink> },\n          //render : (values: IAppAction) => { return <NavLink to={\"/AppNavigationItemEdit/\" + values.Id } >{values.Title}</NavLink> }\n          //lookup: { \"Resubmit\": 'Resubmit', \"Approve\": 'Approve', \"New Request\" : \"New Request\", \"Reject\" : \"Reject\"},\n          //width: \"10%\",\n          editable: 'never',   \n          \n        },\n        {\n          title: \"From Status\", field: \"FromStatus\",       \n          render : (values: IAppAction) => { return values.FromStatusList.map( (fs, i, arr) =>(<span key={fs.Id} >{fs.Title}{i !== (arr.length-1) ? ',' : ''} </span>) )  },\n          //width: \"10%\"\n          editable: 'never',  \n        },  \n        {\n          title: \"To Status\", field: \"FromStatus\",       \n          render : (values: IAppAction) => { return  AppStatusListStore.AppStatusList.find( u => u.Id === values.ToStatusId )?.Title },\n          //width: \"10%\",\n          editable: 'never',  \n        },     \n        {\n          title: \"ActionType\",  field: \"ActionType\",\n          //render : rend\n          //render : (values: IAppHistory) => { return AppStatusListStore.itemList.find( u => u.Id ==values.FromStage )?.Title },\n          //width: \"10%\",\n          editable: 'never',  \n        }, \n        // {\n        //   title: \"Flow\",\n        //   field: \"Flow\",  \n        //   render : (values: IAppAction) => { return AppFlowStore.itemList.find( u => u.Id === values.FlowId )?.Title }  \n        // },\n        // {\n        //   title: \"Table\",\n        //   field: \"Table\",  \n        //   render : (values: IAppAction) => { return AppTableMasterStore.itemList.find( u => u.Id === values.TableId )?.Title  }  \n        // },\n        {\n          title: \"WhenXml\",\n          field: \"WhenXml\",  \n          render : (values: IAppAction) => { return ShowDesc(values.WhenXml)  } ,\n          //width: \"20%\",\n          editable: 'never',  \n        },\n        {\n          title: \"ActionXml\",\n          field: \"ActionXml\",  \n          render : (values: IAppAction) => { return ShowDesc(values.ActionXml)  } ,\n          //width: \"35%\",\n          editable: 'never',  \n        },\n        // {\n        //   title: \"Delete\",\n        //   field: \"Delete\",  \n        //   render : (values: IAppAction) => { return <DeleteOutlinedIcon onClick={ () => { AppActionStore.deleteItem(values.Id).then( () => {   AppActionStore.getList(); })}}  />  }  \n        // },\n      ];\n\n    const TableActions = [\n        {          \n            icon: (values: any) => { return <TableButton  label=\"Add New\" path={`/TableActionItemEdit/${tableId}/${id}`}  /> },\n            tooltip: 'Add New',\n            isFreeAction: true,\n            //onClick: (event:any) =>{ history.push(`/TableActionItemEdit/${tableId}/${id}`) },   \n            iconProps: { style: { fontSize: \"34px\", color: \"green\", borderRadius:\"0%  !important\" , backgroundColor:'rosybrown' } },            \n        },\n        {          \n            icon: (values: any) => { return <TableButton label=\"Refresh\"  /> },\n            tooltip: 'Refresh',\n            isFreeAction: true,\n            onClick: (event:any) =>{AppActionStore.flowActions(Number(id));},   \n            iconProps: { style: { fontSize: \"34px\", color: \"green\", borderRadius:\"0%  !important\" , backgroundColor:'rosybrown' } },            \n          }\n        ];  \n    // if(AppActionStore.loading){\n    //     return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \n    // }\n\n    return(\n        <React.Fragment>\n            <TableDetails tableId={Number(tableId)} flowId={id} showTitle={true} />\n            <div className={\"tabcontainers111\"} >\n            <div className={\"tabcontainers2\"} >        \n                <MaterialTable                       \n                    title={`Action List for ${AppFlowStore.item.Title}`}\n                    data={AppActionStore.flowList}\n                    columns={TableColumns as any}\n                    options={{  sorting:true, filtering: true, search: true, paging: true, exportButton: true, pageSize:10 , tableLayout:'auto' }}     \n                    //sorting:true, filtering: true,\n                    actions={TableActions as any}\n                    \n                    \n                    cellEditable={{\n                        onCellEditApproved: (newValue, oldValue, rowData, columnDef) => {\n                          debugger;       \n                          //let filedName : any =  \"Title\"; //columnDef.field == null ? columnDef.field as string : \"Title\" \n                          return new Promise((resolve, reject) => {\n                            \n                            (rowData as any)[(columnDef as any).title] = newValue;\n                            \n                            var action = new AppAction();\n                            action.Action =  rowData.Action;\n                            action.ActionType =  rowData.ActionType;\n                            action.ActionXml =  rowData.ActionXml;\n                            action.FlowId =  rowData.FlowId;\n                            action.FromStatusList =  rowData.FromStatusList;\n                            action.Id =  rowData.Id;\n                            action.InitStatus =  rowData.InitStatus ? true : false;\n                            action.Order =  rowData.Order;\n                            action.TableId =  rowData.TableId;\n                            action.ToStatusId =  rowData.ToStatusId;\n                            action.WhenXml =  rowData.WhenXml;\n                            action.UniqName =  rowData.UniqName;\n  \n                            AppActionStore.editItem(action).then((val) =>{ \n                                if((val as any).errors){\n                                    alert((val as any).errors.Error);                         \n                                    reject();                                                                                                                               \n                                }    \n                                else{\n                                    resolve();\n                                }  \n                            });                                                        \n                            resolve();                                  \n                          });\n                        }\n                      }}\n\n                     \n                      \n                    />\n            </div>\n            </div>   \n\n            \n        </React.Fragment>\n\n        )\n}\n\nexport default observer(TableActions);","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/TableColumns.tsx",["533","534"],"import { Dialog, DialogTitle, DialogContent, DialogContentText, Link } from '@material-ui/core';\nimport React, { useContext, useEffect, useState } from 'react';\nimport {  useParams } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { AppColumnMasterContext } from '../AppColumnMaster/AppColumnMasterStore';\nimport AppColumn from '../AppColumnMaster/AppColumn';\nimport { AppColumnMaster } from '../AppColumnMaster/AppColumnMaster';\nimport { ColumnDataType } from '../../app/common/SystemConstants';\nimport TableDetails from './TableDetails';\nimport MaterialTable from 'material-table';\nimport TableButton from '../../app/common/form/TableButton';\nimport MessageDialog from '../../app/common/common/MessageDialog';\nimport moment from 'moment';\n\ninterface DetailParms {\n    id: string;\n  }\n\n  const TableColumns: React.FC = () => {\n\n    const { id } = useParams<DetailParms>();\n    const AppColumnMasterStore = useContext(AppColumnMasterContext);\n    const [open, setOpen] = useState(false);\n    const [selectedColumn, setSelectedColumn] = useState(new AppColumnMaster());\n    const [error, setError] = useState('');\n   \n    const [dialogMessage, setDialogMessage] = useState('');\n    const [timeStamp, setTimeStamp] = useState('');\n    const showDialogBox = (message: string) => {  \n        setDialogMessage(message);\n        setTimeStamp(moment().toString());\n    };\n\n\n    useEffect(() => {\n        AppColumnMasterStore.getColumnList(Number(id));\n\n    }, [id, AppColumnMasterStore, AppColumnMasterStore.getColumnList]);\n\n    const TableColumns = [\n        {\n          title: \"Order\",\n          field: \"Order\",          \n          defaultSort: \"asc\",\n          //render :  (values: any) => { return <Link onClick={ () => { openModel( values ) } } >{values.Title}</Link> } \n        }, \n        {\n          title: \"Title\",\n          field: \"Title\",          \n          //defaultSort: \"asc\",\n          render :  (values: any) => { return <Link onClick={ () => { openModel( values ) } } >{values.Title}</Link> } \n        },  \n        {\n          title: \"Type\",\n          field: \"Type\", \n          render : (values: any) => { return ColumnDataType.find( u => u.Id === values.Type )?.value  },                          \n        },  \n        {\n            title: \"AppDataFiled\",\n            field: \"AppDataFiled\",                     \n        },          \n      ];\n\n    const TableActions = [\n    {          \n        icon: (values: any) => { return <TableButton  label=\"Add New\"  /> },\n        tooltip: 'Add New',\n        isFreeAction: true,\n        onClick: (event:any) =>{ openModel( new AppColumnMaster() ) },   \n        iconProps: { style: { fontSize: \"34px\", color: \"green\", borderRadius:\"0%  !important\" , backgroundColor:'rosybrown' } },            \n    },\n    {          \n        icon: (values: any) => { return <TableButton label=\"Refresh\"  /> },\n        tooltip: 'Refresh',\n        isFreeAction: true,\n        onClick: (event:any) =>{ AppColumnMasterStore.getColumnList(Number(id));},   \n        iconProps: { style: { fontSize: \"34px\", color: \"green\", borderRadius:\"0%  !important\" , backgroundColor:'rosybrown' } },            \n        }\n    ];  \n\n    const openModel = (col: AppColumnMaster) => {  \n        if(!col.TableID){\n            col.TableID = Number(id);\n        }\n        setSelectedColumn(col);\n        setOpen(true);\n    };\n\n    const RefreshColumns = (col: AppColumnMaster) => {      \n        AppColumnMasterStore.getColumnList(Number(id));\n        setOpen(false);\n    };\n\n    return(\n    <React.Fragment>\n        <TableDetails tableId={Number(id)}  />\n\n        <MaterialTable                    \n              title=\"Fields\"\n              data={AppColumnMasterStore.columnList as any}\n              columns={TableColumns as any}\n              actions={TableActions}\n              options={{ sorting:true, search: true, paging: true, filtering: true, exportButton: true, pageSize:10,  tableLayout: \"auto\"}}\n              editable={{\n                onRowDelete: oldData =>\n                new Promise((resolve, reject) => {                  \n                  setTimeout(() => {\n                      debugger;\n                      var itemId = Number((oldData as any).Id);\n                      AppColumnMasterStore.deleteItem(itemId).then((val) =>{  \n                        debugger;\n\n                        if((val as any).errors){                         \n                          showDialogBox((val as any).errors.Error);                                                \n                          resolve(true);                                                \n                        }   \n                        else if((val as any).name === 'Error') {                             \n                            showDialogBox( (val as any).message );\n                                \n                            resolve(true); \n                          }                                               \n                        AppColumnMasterStore.getColumnList(Number(id)).then( () => {resolve(true);});                                          \n                                                    \n                      })                  \n                    resolve(true);\n                  }, 10)\n                }),\n              }}\n        />\n\n        <Dialog onClose={() => {}} aria-labelledby=\"simple-dialog-title\" open={open}>\n            <DialogTitle id=\"simple-dialog-title\">Column</DialogTitle>\n            <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n                <AppColumn initVal={selectedColumn} parentRefresh={RefreshColumns} />\n            </DialogContentText>\n            </DialogContent>           \n        </Dialog>  \n\n    <MessageDialog message={dialogMessage} timeStamp={timeStamp} />\n\n    </React.Fragment>)\n}\n\nexport default observer(TableColumns);","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppColumnMaster/AppColumnMasterList.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppColumnMaster/AppColumnMasterEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserRoleMaster/AppUserRoleMasterList.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserRoleMaster/AppUserRoleMasterEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppData/AppDataList.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppData/AppDataEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppStatusList/AppStatusListEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppHistory/AppHistoryList.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppHistory/AppHistoryEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppStatusList/AppStatusListList.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppConfigType/AppConfigTypeEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppConfigType/AppConfigTypeList.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppAction/AppActionList.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppAction/AppActionEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppFlow/AppFlowEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppConfig/AppConfigEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppFlow/AppFlowList.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppApi/AppApiEdit.tsx",["535","536","537"],"import { Button, ButtonGroup, Container, LinearProgress, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField,  } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport moment from 'moment';\n\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { AppApiAction, AttachmentDetails, Customer, Attachment } from './AppApi';\nimport { AppStatusListContext } from '../AppStatusList/AppStatusListStore';\nimport { AppApiContext } from './AppApiStore';\n \ninterface DetailParms {\n  id: string;\n}\nconst AppApiEdit: React.FC = () => { \n\n  const FlowId = 1;\n  const { id } = useParams<DetailParms>();\n  const AppStatusListStore = useContext(AppStatusListContext);\n  const AppApiStore = useContext(AppApiContext);\n \n  let history = useHistory();\n  const [error, setError] = useState('');\n  const [actionId, setActionId] = useState(0);\n  const [item, setItem] = useState(new Customer());\n  const [loading, setLoading] = useState(true);\n  const [attachFileList, setFileList] =useState<Attachment[]>([]);\n  const [ActionComment, SetActionComment] = useState(\"\");\n  \n   \n  useEffect(() => {\n    //debugger;     \n    AppStatusListStore.getStatusList(1);\n\n\n    var IdVal =0;\n    if (id) { IdVal=Number(id); }\n    AppApiStore.getActions(FlowId,IdVal).then( (res) => { \n      //debugger;\n        if((res as any).errors){          \n          setError( error + \", \" + (res as any).errors.Error);         \n          return;\n        }\n    });\n\n    if(id){\n      setLoading(true);\n\n\n\n      \n      let act: AppApiAction = new AppApiAction()\n      act.ActionId = 10;  \n      act.ItemId = Number(id);\n      act.Parm1 = id;\n      //act.ReturnFlow = id ? 'update' : 'create';\n\n      let formData = new FormData();\n      formData.append('ActionId', '10' );\n      formData.append('ItemId',  id );\n      formData.append('Parm1',  id );\n\n      AppApiStore.ExecuteAction(formData).then( (res) => {      \n        //debugger;\n        if((res as any).errors){          \n          setError((res as any).errors.Error);         \n          return;\n        }\n        else{                 \n          setItem(res.Result1[0] as any);\n\n          res.Result1[0].InitAttachment?.forEach( x => {\n            attachFileList.push( new Attachment( {file:  new Blob(), Details : x as any } ))\n          });\n          \n          setFileList(attachFileList);\n        }  \n        setLoading(false);\n      });\n    }\n    else{\n      setItem(new Customer()); \n      setLoading(false);\n    }\n  }, [id, error, AppApiStore.ExecuteAction , AppApiStore.getActions, AppApiStore, AppStatusListStore, attachFileList]);\n\n\n  const onItemSubmit = (values: any) => {    \n    \n    \n    // let colMap = new Map([\n    //   [\"Id\", \"Id\"], \n    //   [\"CustomerName\", \"Txt1\"], \n    //   [\"CIF\", \"Num1\"]\n    // ]);  \n\n    // interface LooseObject {\n    //   [key: string]: any\n    // }\n    // var dataParm: LooseObject = {};    \n    // Object.keys(values).forEach(function(key,index) {          \n    //   if( colMap.get(key) && values[key] ){        \n    //     dataParm[ colMap.get(key) as string ] =  values[key] ;\n    //   }      \n    // });\n\n    debugger;\n    let act: AppApiAction = new AppApiAction()\n    act.ActionId = actionId;\n\n    values.InitAttachment = [];\n\n    let formData = new FormData();\n    attachFileList.forEach( f => {\n      values.InitAttachment.push(f.Details);\n      formData.append('FileList', f.file, f.Details.FileName);\n    });\n   \n    // if(files){\n    //   for(var i=0;i<files.length;i++){\n\n    //     //var f =  file[i] as any;        \n    //     formData.append('FileList', files[i]);\n        \n    //     //values.InitAttachment.push(new Attachment( { Action : 'Create', FileArrayId: i, Id : -1, FileName :  f.name,  Prop1 : 'Desc 1'  }) );\n    //   }      \n    // }\n    // values.InitAttachment = fileDetails;\n\n    formData.append('ActionId', actionId.toString() )\n    formData.append('Parm1', JSON.stringify(values) );\n    formData.append('ItemId',  values.Id );\n\n    formData.append('Parm2',  ActionComment );\n\n    act.Parm1 = JSON.stringify(values );\n    act.ItemId = values.Id; \n//return;\n\n    AppApiStore.ExecuteAction(formData).then( (res) => {      \n      //debugger;\n\n      if((res as any).errors){\n        setError((res as any).errors.Error);\n        setLoading(false);\n        return;\n      }\n      else{\n        history.push('/AppApilist');\n      }\n    });\n  };\n\n  \n  const prop1Change = (e:any, i:number) => { \n    let files = [...attachFileList];\n    files[i].Details.Prop1 = e.target.value;\n    setFileList(files);\n\n  }\n\n  const onFileChange = (event:any) => { \n    //debugger;\n    \n    for(var i=0;i<event.target.files.length;i++){\n\n      var f =  event.target.files[i] as any;    \n      var filename = attachFileList.length.toString() + \"-\" + f.name;\n      var attch = new Attachment( { \n          file : f, \n          Details : new  AttachmentDetails({  Action : 'Create', FileArrayId: i, Id : -1, FileName : filename,  Prop1 : 'Desc 1'  }) \n        });\n      \n      setFileList(currentArray => [...currentArray, attch]);\n      event.target.value = null;                        \n    }\n    //setFileList(attachFileList);\n\n  }\n\n  const download = (id:number, fileName:string) => { \n    let act: AppApiAction = new AppApiAction()\n    act.ActionId = 15;  \n    act.ItemId = Number(id);\n    act.Parm1 = id.toString();\n\n    AppApiStore.FileDownload(act).then( (fileSteam) => { \n      debugger;\n      const downloadUrl = window.URL.createObjectURL(new Blob([fileSteam]));\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.setAttribute('download', fileName); //any other extension\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n\n      debugger;\n    });\n   \n  }\n\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    \n    <Container component=\"main\" maxWidth=\"lg\">        \n      {error && <div  style={{ color:'red' , fontWeight:'bold', padding:5 , border: '1px solid green', margin:10 }} >{error}</div>}     \n    \n      {/* <a href=\"#\" onClick={ () => { download(65, \"\")} } >Test download</a>  */}\n\n      <Formik\n          initialValues={item}\n\n          validationSchema={Yup.object({\n            CustomerName: Yup.string().required('Title required'),                     \n          })}\n          onSubmit={onItemSubmit}\n        >\n          <Form > \n            Status : { AppStatusListStore.itemList.find( s => s.Id === item.StatusId )?.Title }\n            <MyCustomTxt   \n              name=\"CustomerName\"                         \n              type=\"text\"                \n              autoFocus={true}\n              required={true}                                \n              label=\"CustomerName\"                                                                     \n            />\n              \n            <MyCustomTxt   \n              name=\"CIF\"                         \n              type=\"number\"                \n              required={true}                                \n              label=\"CIF\"                                                                     \n            />\n            {item.StatusId === 4 && \n            <MyCustomTxt   \n              name=\"ApprovalComment\"                         \n              type=\"text\"                \n              required={item.StatusId === 4 ? true : false}                                \n              label=\"Approval Comment\"                                                                     \n            />\n            }\n            {item.StatusId !== 4 && \n              <div>Approval Comment : {item.ApprovalComment} </div>\n            }\n\n            ActionComment: {ActionComment}\n            \n             <TextField \n              id=\"ActionComment\"\n              value={ActionComment} \n              placeholder=\"ActionComment\"            \n              type=\"text\"                                     \n              variant=\"outlined\"\n              margin=\"normal\"                                        \n              fullWidth   \n              label=\"Action Comment\"  \n              multiline={false}\n              onChange={ (event) => { \n                debugger;\n                SetActionComment(event.target.value);\n              } }  \n             />\n\n            \n\n  <TableContainer component={Paper}>\n    <Table aria-label=\"simple table\">\n      <TableHead>\n        <TableRow>       \n          <TableCell align=\"left\">File Name</TableCell>\n          <TableCell align=\"left\">Comment</TableCell>     \n          <TableCell align=\"left\"></TableCell>   \n        </TableRow>      \n      </TableHead>\n      <TableBody>\n      { attachFileList && attachFileList.map( (rr, index) => (\n          <TableRow>       \n            <TableCell align=\"left\"> <a href=\"#\" onClick={ () => { download(rr.Details.Id,  rr.Details.FileName)} } >{rr.Details.FileName}</a> </TableCell>\n            <TableCell align=\"left\">\n              <input type=\"text\" value={rr.Details.Prop1}  onChange={ (e) => { prop1Change(e,index) } } /> \n            </TableCell>     \n            <TableCell align=\"left\"><a href=\"#\">Delete</a></TableCell>      \n          </TableRow>\n          ))\n      } \n      <TableRow>             \n        <TableCell align=\"left\" colSpan={3}><input type=\"file\" multiple={false} onChange={onFileChange} /></TableCell>  \n      </TableRow>      \n      </TableBody>\n    </Table>\n  </TableContainer>\n\n        <TableContainer component={Paper}>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>   \n              <TableCell align=\"left\">Date Time</TableCell>     \n                <TableCell align=\"left\">Action By</TableCell>\n                <TableCell align=\"left\">Action</TableCell>\n                <TableCell align=\"left\">From Status</TableCell>     \n                <TableCell align=\"left\">To Status</TableCell> \n                <TableCell align=\"left\">Comment</TableCell>\n              </TableRow>      \n            </TableHead>\n            <TableBody>\n            { item.AppHistory.map( (hist, index) => (\n                <TableRow> \n                  <TableCell align=\"left\"> {  moment(hist.DateTime).format(\"DD-MMM-YYYY\")  }</TableCell>\n                  <TableCell align=\"left\">{hist.ActionBy}</TableCell>\n                  <TableCell align=\"left\">{hist.Action}</TableCell>\n                  <TableCell align=\"left\">{ AppStatusListStore.AppStatusList.find( s => s.Id === hist.FromStage )?.Title } {hist.FromStage}</TableCell>     \n                  <TableCell align=\"left\">{ AppStatusListStore.AppStatusList.find( s => s.Id === hist.ToStage )?.Title } {hist.ToStage}</TableCell> \n                  <TableCell align=\"left\">{hist.Comment}</TableCell>      \n                </TableRow>\n                ))\n            }      \n            </TableBody>\n          </Table>\n        </TableContainer>\n\n  \n\n\n\n            {/* <table >\n              <tr>\n                <td>File Name</td>\n                <td>Prop1</td>\n                <td></td>\n              </tr>\n              { attachFileList \n              &&  attachFileList.map( (rr, index) => ( \n              \n              <tr key={index}>\n                <td>\n                  <a href=\"#\" onClick={ () => { download(rr.Details.Id,  rr.Details.FileName)} } >{rr.Details.FileName}</a> \n                </td>\n                <td>\n                  <input type=\"text\" value={rr.Details.Prop1}  onChange={ (e) => { \n                    debugger;  \n                    prop1Change(e,index)\n                    } } />                  \n                </td>\n                <td> <a href=\"#\">Delete</a></td>\n              </tr>\n\n            ) ) }\n            \n            <tr>\n              <td colSpan={3}>\n                <input type=\"file\" multiple={false} onChange={onFileChange} />\n              </td>\n            </tr>\n\n            </table> */}\n\n            {/* <input type=\"file\" multiple={true} onChange={onFileChange} />\n\n            <input type=\"file\" multiple={true} onChange={onFileChange} /> */}\n                           \n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n\n                { AppApiStore.actionList.map( (row) => (\n                  \n                  <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    key={row.Id}\n                    onClick={ () => { setActionId( row.Id); }}\n                  >\n                    {row.Action}\n                  </Button> \n                ))}\n                \n                {/* { item.Id && \n                  <Button\n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n\n                      let act: AppApiAction = new AppApiAction()\n                      act.ActionId = 11;\n                      act.Parm1 = item.Id.toString();\n                      AppApiStore.ExecuteAction(act).then( (res) => {      \n                        history.push('/AppApilist');    \n                      });                      \n                    }}\n                  >\n                    Delete\n                  </Button> \n                } */}\n                <Button onClick={ () => { history.push('/AppApilist');  }}>Back</Button>          \n              </ButtonGroup>\n\n          </Form>\n        </Formik>\n\n        \n       \n    </Container>\n  );\n};\n\nexport default observer(AppApiEdit);\n\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppApi/AppApiList.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppAttachment/AppAttachmentList.tsx",["538"],"import React, { useContext, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { AppAttachmentContext } from './AppAttachmentStore';\nimport { Button, ButtonGroup, LinearProgress, List, ListItem, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nconst AppAttachmentList: React.FC = () => {\n\n  const AppAttachmentStore = useContext(AppAttachmentContext);     \n  \n  \n\n  const download = (id: number, fileName : string) => { \n    \n    AppAttachmentStore.download(id,fileName);        \n  };\n\n    useEffect(() => {       \n      AppAttachmentStore.getList();                  \n    }, [AppAttachmentStore, AppAttachmentStore.getList])       \n\n    if(AppAttachmentStore.loading){\n      return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \n    }\n\n    return (\n      <List>\n        <ListItem divider>\n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n          <Button >\n            <NavLink to=\"/AppAttachmentItemEdit/\" >Add New</NavLink> \n          </Button>\n          <Button onClick={ () => { AppAttachmentStore.getList(); }}>Refresh</Button>          \n        </ButtonGroup>\n        </ListItem>\n        \n        <ListItem divider>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>ID</TableCell>\n                  <TableCell align=\"right\">FileName</TableCell>\n                  <TableCell align=\"right\">Delete</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {AppAttachmentStore.itemList.map((row) => (\n                  <TableRow key={row.Id} >\n                    <TableCell component=\"th\" scope=\"row\"  >\n                      <NavLink to={\"/AppAttachmentItemEdit/\" + row.Id } >{row.Id}</NavLink> \n                    </TableCell>\n                                             \n                    <TableCell align=\"right\" >\n                      <a href=\"#\" onClick={ () => { download(row.Id, row.FileName)} } >{row.FileName}</a> \n                    </TableCell>  \n                    <TableCell align=\"right\" >\n                      <DeleteOutlinedIcon onClick={ () => { AppAttachmentStore.deleteItem(row.Id).then( () => {   AppAttachmentStore.getList(); })}}  />\n                    </TableCell>            \n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </ListItem>\n\n      </List>        \n     \n    );\n};\n\nexport default observer(AppAttachmentList);\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppAttachment/AppAttachmentEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNavigation/AppNavigationList.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNavigation/AppNavigationEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNotificationsMaster/AppNotificationsMasterList.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNotificationsMaster/AppNotificationsMasterEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNitificationTemplate/AppNitificationTemplateList.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AdminPage/AdminPage.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNitificationTemplate/AppNitificationTemplateEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/nav/Notifications.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/nav/CurrentUser.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserAccess/AppUserAccessEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/TableStatusList.tsx",["539","540"],"import { Dialog, DialogTitle, DialogContent, DialogContentText } from '@material-ui/core';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport AppColumn from '../AppColumnMaster/AppColumn';\nimport { AppColumnMaster } from '../AppColumnMaster/AppColumnMaster';\nimport TableDetails from './TableDetails';\nimport MaterialTable from 'material-table';\nimport MessageDialog from '../../app/common/common/MessageDialog';\nimport moment from 'moment';\nimport { AppStatusListContext } from '../AppStatusList/AppStatusListStore';\nimport { AppStatusList } from '../AppStatusList/AppStatusList';\n\ninterface DetailParms {\n    id: string;\n  }\n\n  const TableStatusList: React.FC = () => {\n\n    const { id } = useParams<DetailParms>();\n    const AppStatusListStore = useContext(AppStatusListContext);\n\n\n    const [open, setOpen] = useState(false);\n    const [selectedColumn] = useState(new AppColumnMaster());\n   \n    const [dialogMessage, setDialogMessage] = useState('');\n    const [timeStamp, setTimeStamp] = useState('');\n    const [error, setError] = useState('');\n    \n    const showDialogBox = (message: string) => {  \n        setDialogMessage(message);\n        setTimeStamp(moment().toString());\n    };\n\n\n    useEffect(() => {\n      AppStatusListStore.getStatusList(Number(id));\n    }, [id,AppStatusListStore, AppStatusListStore.getStatusList]);\n\n        \n    const TableColumns = [        \n        {title: \"Id\", field: \"Id\", type: 'numeric', editable: 'never'},\n        {title: \"Order\", field: \"Order\", type: 'numeric', defaultSort: \"asc\",},\n        { title: \"Title\", field: \"Title\"},                  \n      ];\n   \n   \n    const RefreshColumns = (col: AppColumnMaster) => {      \n      AppStatusListStore.getStatusList(Number(id));\n        setOpen(false);\n    };\n\n    return(\n    <React.Fragment>\n        <TableDetails tableId={Number(id)}  />\n\n        <MaterialTable                    \n              title=\"Status List\"\n              data={AppStatusListStore.AppStatusList as any}\n              columns={TableColumns as any}\n              //actions={TableActions}\n              options={{ sorting:true, search: true, paging: true, filtering: true, exportButton: true, pageSize:10,  tableLayout: \"auto\"}}\n\n\n              editable={{\n\n                onRowAdd: newData => new Promise(resolve => { \n\n                  var tab = new AppStatusList();\n                  tab.Title = (newData as any).Title;\n                  tab.Order = (newData as any).Order;\n                  tab.TableId = Number(id);\n                  AppStatusListStore.editItem(tab).then((val) =>{  \n                    AppStatusListStore.getStatusList(Number(id));                   \n                    resolve(true);                                \n                  })\n                }),\n\n                onRowUpdate: (newData, oldData) =>\n                new Promise((resolve, reject) => {\n                  debugger;\n                  var tab = new AppStatusList();\n                  tab.Title = (newData as any).Title;\n                  tab.Order = (newData as any).Order;\n                  tab.TableId = Number(id);\n                  tab.Id =  (newData as any).Id;\n                  AppStatusListStore.editItem(tab).then((val) =>{  \n                    AppStatusListStore.getStatusList(Number(id));                   \n                    resolve(true);                                \n                  })\n\n                  resolve(true); \n                  // setTimeout(() => {\n                  //   // const dataUpdate = [...data];\n                  //   // const index = oldData.tableData.id;\n                  //   // dataUpdate[index] = newData;\n                  //   // setData([...dataUpdate]);\n\n                  //   // resolve();\n                  // }, 1000)\n                }),\n\n\n                onRowDelete: oldData =>\n                new Promise((resolve, reject) => {                  \n                  setTimeout(() => {\n                      debugger;\n                      var itemId = Number((oldData as any).Id);\n                      AppStatusListStore.deleteItem(itemId).then((val) =>{  \n                        debugger;\n\n                        if((val as any).errors){                         \n                          showDialogBox((val as any).errors.Error);                                                \n                          resolve(true);                                                \n                        }   \n                        else if((val as any).name === 'Error') {                             \n                            showDialogBox( (val as any).message );\n                                \n                            resolve(true); \n                        }                                               \n                        AppStatusListStore.getStatusList(Number(id)).then( () => {resolve(true);});                                          \n                                                    \n                      })                  \n                    resolve(true);\n                  }, 10)\n                }),\n              }}\n        />\n\n        <Dialog onClose={() => {}} aria-labelledby=\"simple-dialog-title\" open={open}>\n            <DialogTitle id=\"simple-dialog-title\">Column</DialogTitle>\n            <DialogContent>\n            <DialogContentText id=\"alert-dialog-description\">\n                <AppColumn initVal={selectedColumn} parentRefresh={RefreshColumns} />\n            </DialogContentText>\n            </DialogContent>           \n        </Dialog>  \n\n    <MessageDialog message={dialogMessage} timeStamp={timeStamp} />\n\n    </React.Fragment>)\n}\n\nexport default observer(TableStatusList);","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/TableActionItemEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNotifications/AppNotificationsEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppConfig/AppConfigList.tsx",["541","542"],"import React, { useContext, useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { AppConfigContext } from './AppConfigStore';\nimport { Button, ButtonGroup, LinearProgress, List, ListItem } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport { AppConfigTypeContext } from '../AppConfigType/AppConfigTypeStore';\nimport { IAppConfig } from './AppConfig';\nimport MaterialTable from 'material-table';\nimport { IAppConfigType } from '../AppConfigType/AppConfigType';\n \nconst AppConfigList: React.FC = () => {\n\n  const AppConfigTypeStore = useContext(AppConfigTypeContext);\n  const AppConfigStore = useContext(AppConfigContext);  \n  const [types, setTypes] = useState<string[]>([]); \n\n  const TableColumns = [\n    {\n      title: \"Order\",\n      field: \"Order\",          \n      defaultSort: \"asc\",\n      filtering: false,\n    },\n    {\n      title: \"Title\",\n      field: \"Title\",\n      render : (values: IAppConfig) => { return <NavLink to={`/AppConfigItemEdit/${values.ConfigTypeId}/${values.Id}` } >{values.Title}</NavLink> },\n    },\n    {\n      title: \"Type\",\n      field: \"ConfigTypeId\", \n      render : (values: IAppConfig) => { return AppConfigTypeStore.itemList.find( u => u.Id === values.ConfigTypeId )?.Title },\n      lookup: types, \n    },\n    {\n      title: \"Id\",\n      field: \"Id\", \n      render : (values: IAppConfig) => { return <DeleteOutlinedIcon onClick={ () => { AppConfigStore.deleteItem(values.Id).then( () => {   AppConfigStore.getList(); })}}  /> },      \n      filtering: false,\n    },\n  ];\n\n   \n  \n    useEffect(() => {       \n      \n      AppConfigTypeStore.getList().then( (res : any) => {        \n        res.map( (row:IAppConfigType) => {\n          types[ row.Id ] =  row.Title;                  \n        });        \n        setTypes(types);\n      });\n\n      AppConfigStore.getList();                        \n    }, [AppConfigStore, AppConfigStore.getList, AppConfigTypeStore.getList])       \n\n    if(AppConfigStore.loading){\n      return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \n    }\n\n    return (\n      <List>\n        <ListItem divider>\n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n          <Button >\n            <NavLink to=\"/AppConfigItemEdit/\" >Add New</NavLink> \n          </Button>\n          <Button onClick={ () => { AppConfigStore.getList(); }}>Refresh</Button>          \n        </ButtonGroup>\n        </ListItem>\n        \n        <ListItem divider>\n          <div className={\"tabcontainers1\"}>\n            <div className={\"tabcontainers2\"} >     \n              {TableColumns.length>0     &&   \n              <MaterialTable                    \n                title=\"Application Configration\"\n                data={AppConfigStore.itemList}\n                columns={TableColumns as any}\n                options={{ sorting:true, search: true, paging: true, filtering: true, exportButton: true, pageSize:100,  tableLayout: \"auto\"}}            \n              />\n            }\n            </div>\n          </div>\n        </ListItem>\n      </List>             \n    );\n};\n\nexport default observer(AppConfigList);\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNotifications/AppNotificationsList.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/common/ErrorPage.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/Employee/EmployeeEdit.tsx",["543","544","545","546","547","548","549","550","551"],"\nimport { Button, ButtonGroup, Container, FormControl, LinearProgress, TextField, Typography } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\n\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { ActionConfig, ApiContext, AppStatusList, AppUserRoleMaster } from '../Api/Api'\nimport { Employee } from './Employee';\nimport ErrorMessage from '../../app/common/common/ErrorMessage';\nimport ConfigDropDown from '../../app/common/form/ConfigDropDown';\nimport MyCheckBox from '../../app/common/form/MyCheckBox';\nimport RoleSelect from '../../app/common/form/RoleSelect';\nimport UserSelect from '../../app/common/form/UserSelect';\nimport MyDatePicker from '../../app/common/form/MyDatePicker';\nimport MyAttachment from '../../app/common/form/MyAttachment';\nimport MyCurrencyInput from '../../app/common/form/MyCurrencyInput';\n\n\ninterface DetailParms {\n    id: string;\n}\n\nconst EmployeeEdit: React.FC = () => {\n    const [selectedDate, handleDateChange] = useState(new Date());\n\n    const { id } = useParams<DetailParms>();\n    let history = useHistory();\n\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(true);\n    const [item, setItem] = useState(new Employee());\n    const [actionId, setActionId] = useState(0);\n    const [actions, setActions] = useState<AppStatusList[]>();\n    const [roleList, setRoleList] = useState<AppUserRoleMaster[]>();\n    \n    const [roles, setRoles] = useState<AppUserRoleMaster[]>();\n    \n\n    const ApiStore = useContext(ApiContext);\n\n\n    useEffect(() => {\n        var IdVal =0;\n        if (id) { IdVal=Number(id); }\n\n        setLoading(true);\n        ApiStore.updateActions(IdVal,'', '', setActions, setError);\n      \n        ApiStore.getRoleList().then( resRoles => {\n          setRoleList(resRoles);        \n          \n          if(id){            \n            ApiStore.LoadItem(\"ActionConfig.EmployeeById\",id, setActions, setItem, setError).then( res => {              \n              if(res){\n                //debugger;  \n                setItem(res);\n                var roleArray = ApiStore.rolesFromArray(resRoles as any, res.UserAccessRoles as any);  \n\n                setRoles(roleArray);                                            \n              }\n              setLoading(false);   \n            });              \n          }\n          else{ \n              setItem(new Employee()); \n              setLoading(false);\n          }\n        });\n\n    },[id, ApiStore, ApiStore.updateActions, , ApiStore.getRoleList, ApiStore.LoadItem, setRoles, setItem, ApiStore.rolesFromArray, ApiStore.getConfigList ]);\n\n    const onItemSubmit = (values: any) => {\n        \n        debugger;\n        // Object.keys(values).forEach(function(key,index) {     \n            \n        //     var v = values[key];\n        //     type Data = typeof v;\n        //     console.log(typeof v);\n        //     //console.log(Data.na);\n        //     if(v === \"Attachment[]\"){\n        //         console.log(v);\n        //     }\n        //     if(v === \"string\"){\n        //         console.log(v);\n        //     }\n        //     // if( colMap.get(key) && values[key] ){        \n        //     //     dataParm[ colMap.get(key) as string ] =  values[key] ;\n        //     // }      \n        // });  \n\n        // return;\n\n        //values.UserAccessRoles = roles;\n        \n        let formData = new FormData();\n        formData = ApiStore.updateAttachments(formData, values.Passport); \n       \n        formData.append('ActionId', actionId.toString() ); \n        formData.append('Parm1', JSON.stringify(values) );\n        formData.append('ItemId',  values.Id );\n\n        ApiStore.ExecuteAction(formData, setError).then( (res) => {    \n            debugger;        \n            if(res){\n              history.push('/EmployeeList');\n            }\n        });\n    }\n\n    const onTextChange = (event: any) => {\n        debugger;\n        alert(1);\n    }\n\n\n\n    if(loading){\n        return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n    }\n\n    return(\n    \n        <Container component=\"main\" maxWidth=\"lg\">  \n          <ErrorMessage message={error} />       \n          \n          <Formik\n            initialValues={item}\n            validationSchema={Yup.object({\n               // Name: Yup.string().required('First Name required'),                     \n             })}\n          onSubmit={onItemSubmit}\n        >\n            \n            <Form >\n\n           \n                <MyCheckBox name=\"IsActive\" label=\"Is Active\"  />\n                <MyCustomTxt name=\"Name\" label=\"Name\" type=\"text\" required={true} width=\"300px\"  />\n                <MyDatePicker name=\"DOB\" label=\"DOB\" required={false} width=\"300px\" />\n                <ConfigDropDown configType=\"Countries\" name=\"Country\" label=\"Country\" width=\"300px\" /> \n                {/* <MyCustomTxt name=\"Salary\" label=\"Salary1\" type=\"number\" required={false} width=\"300px\"  onChange={onTextChange}/>  */}\n                <MyCurrencyInput name=\"Salary\" label=\"Salary\"  width=\"300px\" CurrecySymbol=\"AED\" />               \n                <UserSelect name=\"Manager\" label=\"Manager\" width=\"300px\"  />\n                <RoleSelect name=\"Roles\" label=\"Roles\" width=\"300px\" multiple={true} />\n\n                <MyAttachment downloadActionID={ActionConfig.EmployeePassportDownload} multipleFile={false} name=\"Passport\" label=\"Upload Passport\"  />\n\n\n                {/* <TextField      \n                   name=\"Name\" label=\"Name\" type=\"text\" required={false} \n                    onChange={onTextChange}    \n                />   */}\n               \n                <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                    { actions && (actions as any).map( (row:any) => (                    \n                    <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" key={row.Id}                         \n                        onClick={ () => { setActionId( row.Id); }} > {row.Action}</Button>                     \n                    ))}\n                    <Button onClick={ () => { history.push('/Employeelist');  }}>Back</Button>                   \n                </ButtonGroup>\n\n            </Form>\n        \n        \n        </Formik>\n\n        \n    \n        </Container> \n    )    \n  }\n\n\n  export default observer(EmployeeEdit);","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/Employee/EmployeeList.tsx",["552","553"],"import React, { useContext, useEffect, useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { LinearProgress } from '@material-ui/core';\nimport MaterialTable from 'material-table';\nimport moment from 'moment';\n\nimport { ActionConfig, ApiContext, AppUserRoleMaster, IAppStatusList } from '../Api/Api';\nimport TableButton from '../../app/common/form/TableButton';\nimport ErrorMessage from '../../app/common/common/ErrorMessage';\nimport { Employee } from './Employee';\n\nconst EmployeeList: React.FC = () => {\n    \n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState<Employee[]>();\n  const [stausList, setStausList] = useState<IAppStatusList[]>();\n  const [roleList, setRoleList] = useState<AppUserRoleMaster[]>();\n  const [error, setError] = useState('');\n\n  const ApiStore = useContext(ApiContext);\n      \n  useEffect(() => {    \n    setLoading(true); \n\n    ApiStore.getRoleList().then( res => {\n        setRoleList(res);\n    })\n     \n    ApiStore.getStatusList(\"ActionConfig.EmployeeTableID\").then( res => {\n        setStausList(res);\n    })\n\n    ApiStore.LoadDataList(\"ActionConfig.EmployeeList\", setData, setLoading, setError );\n\n    \n  },[ApiStore, ApiStore.LoadDataList]);\n\n  const TableColumns = [     \n    {title: \"Id\", field: \"TableItemId\", defaultSort: \"asc\"},\n    { title: \"Name\", field: \"Name\",\n      render :  (values: any) => { return <Link to={`/EmployeeEdit/${values.Id}`} >{values.Name}</Link> }  },   \n    { title: \"StatusId\", field: \"StatusId\",\n      render : (values: any) => {  return stausList &&  (stausList as IAppStatusList[]).find( u => u.Id === Number(values.StatusId) )?.Title }\n    },  \n    {title: \"IsActive\", field: \"IsActive\"},\n    {title: \"DOB\", field: \"DOB\",\n      render : (values: any) => { return moment(values.DOB).format(\"DD-MMM-YYYY\")  }  },\n    {title: \"Country\", field: \"Country\"},\n    {title: \"Manager\", field: \"Manager\"}        \n  ];\n\n  const TableActions = [\n    {          \n        icon: (values: any) => { return <TableButton  label=\"Add New\" path=\"/EmployeeEdit\" /> },\n        tooltip: 'Add New',\n        isFreeAction: true, \n        onClick: (event:any) =>{  },                                     \n    },\n    {          \n        icon: (values: any) => { return <TableButton  label=\"Refresh\"  /> },\n        tooltip: 'Refresh',\n        isFreeAction: true, \n        onClick: (event:any) =>{  ApiStore.LoadDataList(\"ActionConfig.NavigationList\", setData, setLoading, setError ); },                                     \n    }\n  ];\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \n  }\n\n      return (\n        <React.Fragment>       \n        <ErrorMessage message={error} />                           \n        { data &&          \n            <MaterialTable                    \n              title=\"Navigation List\"\n              data={data as Employee[]}\n              columns={TableColumns as any}\n              actions={TableActions as any}\n              options={{ sorting:true, search: true, paging: true, filtering: true, exportButton: true, pageSize:10,  tableLayout: \"auto\"}}/>\n        }       \n        </React.Fragment>\n    )\n}\n\nexport default observer(EmployeeList);","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/Navigation/LeftNavBar.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/TestOne/TestOneList.tsx",["554"],"import React, { useContext, useEffect, useState } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { LinearProgress, TextField  } from '@material-ui/core';\nimport MaterialTable from 'material-table';\nimport { Link } from 'react-router-dom';\n\nimport { ActionConfig, ApiContext } from '../Api/Api';\nimport TableButton from '../../app/common/form/TableButton';\nimport ErrorMessage from '../../app/common/common/ErrorMessage';\nimport { TestOne } from './TestOne';\n\nconst TestOneList: React.FC = () => {\n    \n  const [loading, setLoading] = useState(true);\n  const [data, setData] = useState<TestOne[]>();\n  const [error, setError] = useState('');\n\n  const ApiStore = useContext(ApiContext);\n      \n  useEffect(() => {    \n    setLoading(true); \n    ApiStore.LoadDataList(\"TestOneGetNavigationList\", setData, setLoading, setError );    \n  },[ApiStore, ApiStore.LoadDataList]);\n\n  const TableColumns = [     \n    // {title: \"Id\", field: \"TableItemId\", defaultSort: \"asc\"},\n    // {title: \"Name\", field: \"Name\", render :  (values: any) => { return <Link to={`/TestOne/${values.Id}`} >{values.Name}</Link> }  },   \n    // {title: \"StatusId\", field: \"StatusId\", render : (values: any) => {  return stausList &&  (stausList as IAppStatusList[]).find( u => u.Id === Number(values.StatusId) )?.Title }     },  \n    // {title: \"IsActive\", field: \"IsActive\"},\n    // {title: \"DOB\", field: \"DOB\", render : (values: any) => { return moment(values.DOB).format(\"DD-MMM-YYYY\")  }  },\n    // {title: \"Country\", field: \"Country\"},\n    // {title: \"Manager\", field: \"Manager\"} \n    \n    {title: 'Order', field: 'Order'}, \n\t\t{title: 'Title', field: 'Title', render :  (values: any) => { return <Link to={`/TestOneEdit/${values.Id}`} >{values.Title}</Link> } }, \t\t\n\t\t{title: 'IsActive', field: 'IsActive'}, \n\t\t{title: 'DOB', field: 'DOB', type: \"date\" }, \t\n\t\t{title: 'Country', field: 'Country'}, \n\t\t{title: 'Salary', field: 'Salary'},        \n    {title: 'Test1', field: 'Title', \n    \n    editComponent: (value: any, onChange: any,) => {\n      debugger;\n      return (\n        <TextField\n          onChange={e => onChange(e.target.value)}\n          value={value.value}\n          multiline\n        />\n      );\n    }},    \n  ];\n\n  const TableActions = [\n    {          \n        icon: (values: any) => { return <TableButton  label=\"Add New\" path=\"/TestOneEdit\" /> },\n        tooltip: 'Add New',\n        isFreeAction: true, \n        onClick: (event:any) =>{  },                                     \n    },\n    {          \n        icon: (values: any) => { return <TableButton  label=\"Refresh\"  /> },\n        tooltip: 'Refresh',\n        isFreeAction: true, \n        onClick: (event:any) =>{  ApiStore.LoadDataList(\"TestOneGetNavigationList\", setData, setLoading, setError ); },                                     \n    }\n  ];\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \n  }\n\n      return (\n        <React.Fragment>       \n        <ErrorMessage message={error} />                           \n        { data &&          \n            <MaterialTable                    \n              title=\"TestOne List\"\n              data={data as TestOne[]}\n              columns={TableColumns as any}\n              actions={TableActions as any}\n              options={{ sorting:true, search: true, paging: true, filtering: true, exportButton: true, pageSize:10,  tableLayout: \"auto\"}}\n\n              editable={{\n\n                onRowAdd: newData => new Promise(resolve => { \n                  resolve(true);  \n                }),\n\n                onRowUpdate: (newData, oldData) =>\n                new Promise((resolve, reject) => {                 \n                  resolve(true);                   \n                }),\n\n\n                onRowDelete: oldData =>\n                new Promise((resolve, reject) => {                  \n                  setTimeout(() => {\n                      debugger;                                     \n                    resolve(true);\n                  }, 10)\n                }),\n              }}\n\n              // cellEditable={{\n              //   onCellEditApproved: (newValue, oldValue, rowData, columnDef) => {\n              //     debugger;       \n              //     //let filedName : any =  \"Title\"; //columnDef.field == null ? columnDef.field as string : \"Title\" \n              //     return new Promise((resolve, reject) => {\n                    \n              //       (rowData as any)[(columnDef as any).title] = newValue;                                                                                               \n              //       resolve();                                  \n              //     });\n              //   }\n              // }}\n\n              \n\n              />\n\n              \n        }       \n        </React.Fragment>\n    )\n}\n\nexport default observer(TestOneList);\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/TestOne/TestOneEdit.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/Navigation/NavigationEdit.tsx",["555","556"],"import { Button, ButtonGroup, Chip, Container, LinearProgress, TextField } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\n\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { AppNavigation } from './Navigation';\nimport { ActionConfig, ApiContext,  AppStatusList, AppUserRoleMaster } from '../Api/Api'\nimport { Autocomplete } from '@material-ui/lab';\n\n \n\ninterface DetailParms {\n    id: string;\n}\n\nconst NavigationEdit: React.FC = () => { \n      \n    const { id } = useParams<DetailParms>();\n    let history = useHistory();\n\n    const [error, setError] = useState('');\n    const [loading, setLoading] = useState(true);\n    const [item, setItem] = useState(new AppNavigation());\n    const [actionId, setActionId] = useState(0);\n    const [actions, setActions] = useState<AppStatusList[]>();\n    const [roleList, setRoleList] = useState<AppUserRoleMaster[]>();\n    const [roles, setRoles] = useState<AppUserRoleMaster[]>();\n    const ApiStore = useContext(ApiContext);\n\n    \n\n    useEffect(() => {\n        var IdVal =0;\n        if (id) { IdVal=Number(id); }\ndebugger;\n        setLoading(true);\n        ApiStore.updateActions(IdVal,'Navigation','NavigationFlow', setActions, setError);\n      \n        ApiStore.getRoleList().then( resRoles => {\n          setRoleList(resRoles);        \n          \n          if(id){            \n            ApiStore.LoadItem(\"NavigationNavigationById\",id, setActions, setItem, setError).then( res => {              \n              if(res){\n                setItem(res);\n                var roleArray = ApiStore.rolesFromArray(resRoles as any, res.UserAccessRoles as any);                    \n                setRoles(roleArray);                                            \n              }\n              setLoading(false);   \n            });              \n          }\n          else{ \n              setItem(new AppNavigation()); \n              setLoading(false);\n          }\n        });\n\n    },[id, ApiStore, ApiStore.updateActions, , ApiStore.getRoleList, ApiStore.LoadItem, setRoles, setItem, ApiStore.rolesFromArray ]);\n\n    const onItemSubmit = (values: any) => {\n        \n        values.UserAccessRoles = roles;\n        let formData = new FormData();\n        formData.append('ActionId', actionId.toString() ); \n        formData.append('Parm1', JSON.stringify(values) );\n        formData.append('ItemId',  values.Id );\n\n        ApiStore.ExecuteAction(formData, setError).then( (res) => {            \n            if(res){\n              history.push('/NavigationList');\n            }           \n        });\n    }\n\n  \n\n    if(loading){\n        return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n    }\n\n    return (    \n        <Container component=\"main\" maxWidth=\"lg\">\n            {error && <div  style={{ color:'red' , fontWeight:'bold', padding:5 , border: '1px solid green', margin:10 }} >{error}</div>}\n\n            <Formik\n                initialValues={item}\n                validationSchema={Yup.object({\n                    Title: Yup.string().required('Title required'),                     \n                })}\n                onSubmit={onItemSubmit}>\n\n            <Form>\n                <MyCustomTxt name=\"Order\" label=\"Order\" type=\"Number\" autoFocus={true} required={true}  />\n                <MyCustomTxt name=\"Title\" label=\"Title\" type=\"text\" required={true}  />\n                <MyCustomTxt name=\"Path\" label=\"Path\" type=\"text\" required={true}  />\n                <MyCustomTxt name=\"Icon\" label=\"Icon\" type=\"text\" required={true}  />\n                {/* <MyCustomTxt name=\"UserAccessRoles\" label=\"UserAccessRoles\" type=\"text\" required={true}  />  */}\n\n               \n            {\n            <Autocomplete id=\"UserAccessRoles\" className=\"customFieldMargin\" multiple \n                style={{width: '300'}}   \n                size=\"small\"  \n                value={roles as any}  \n                options={roleList as any[]} \n                getOptionLabel={(option:AppUserRoleMaster) => option.Name}                  \n                freeSolo\n                renderTags={(value, getTagProps) =>\n\n                  value.map((option:any, index) => (\n                    <Chip variant=\"outlined\" label={option.Name} {...getTagProps({ index })} />  \n                  ))\n                }\n                renderInput={(params) => (\n                  <TextField {...params} variant=\"outlined\" label=\"Access Groups\" placeholder=\"Access Groups\" fullWidth />\n                )}\n                \n                onChange={(event:any, newValue:any) => {\n                  //debugger;\n                  var unq = true;\n                  for(let i=0;i<newValue.length-1;i++){\n                    if( newValue[i].Id === newValue[newValue.length-1].Id){\n                      unq = false;\n                      break;\n                    }\n                  }\n                  if(unq){\n                    setRoles(newValue); \n                  }                                          \n                }}\n              />}\n\n\n                <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                    { actions && (actions as any).map( (row:any) => (                    \n                    <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" key={row.Id}                         \n                        onClick={ () => { setActionId( row.Id); }} > {row.Action}</Button>                     \n                    ))}\n                    <Button onClick={ () => { history.push('/Navigationlist');  }}>Back</Button>                   \n                </ButtonGroup>    \n\n            </Form>\n            \n            </Formik>\n\n        </Container>\n    )\n}\n\nexport default observer(NavigationEdit);","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/Navigation/NavigationList.tsx",["557","558","559","560","561"],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/user/User.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/user/UserManagerStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/api/agent.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNotifications/AppNotificationsStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppConfig/AppConfigStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNotifications/AppNotifications.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppAction/AppActionStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppConfigType/AppConfigTypeStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppFlow/AppFlowStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppAction/AppAction.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/AppTableMasterStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppStatusList/AppStatusListStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppStatusList/AppStatusList.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppColumnMaster/AppColumnMaster.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserAccess/AppUserAccessStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserAccess/AppUserAccess.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/TestOne/TestOne.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/Navigation/Navigation.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/Api/Api.ts",["562"],"import { makeObservable, observable } from \"mobx\";\nimport { createContext } from \"react\";\nimport agent from \"../../app/api/agent\";\nimport { Attachment } from \"../../app/common/form/MyAttachment\";\n\n\n//==============================================\n\n\nexport const ActionConfig : {[key: string]: number} = \n{\n\tConfigCountries : 3,\n\n\tNavigationFlowId : 1,\n\tNavigationList : 1,\n\tNavigationById : 7,    \n\tNavigationTableID: 1,\n\n\tEmployeeFlowId : 5,\n\tEmployeeList : 19,\n\tEmployeeById : 21,    \n\tEmployeeTableID: 7,\n\tEmployeePassportDownload: 38,\n\n}\n\nexport interface IAppApi {\n\tId: number\n\tCustomerName: string\n\tCIF: number\n}\n\nexport class AppApi implements IAppApi {\n\tId: number = 0;\n\tCustomerName: string = '';\n\tCIF: number = 0;\n  \n  constructor(init?: IAppApi) {\n    Object.assign(this, init);\n  }\n}\n\nexport interface IApiAction {\t\n\tActionId : number \n\tItemId : number\n\tReturnFlow : string \n\tParm1 : string \n\tParm2 : string \n\tParm3 : string \n\tParm4 : string \n\tParm5 : string \n\tParm6 : string \n\tParm7 : string \n\tParm8 : string \n\tParm9 : string \n\tParm10 : string \t\n\t\n}\n \nexport class AppApiAction implements IApiAction {\n\tActionUniqName: string = '';\n\tActionId : number = 0;\n\tItemId : number = 0;\n\tReturnActions : boolean = false;\n\tReturnFlow : string = '';\n\tParm1 : string = '';\n\tParm2 : string = '';\n\tParm3 : string = '';\n\tParm4 : string = '';\n\tParm5 : string = '';\n\tParm6 : string = '';\n\tParm7 : string = '';\n\tParm8 : string = '';\n\tParm9 : string = '';\n\tParm10  : string = '';\n\t\n\n  \n  constructor(init?: IApiAction) {\n    Object.assign(this, init);\n  }\n}\n\nexport interface IApiResult  {\n\tId: number\n\tResult1: any[]\n}\n\nexport class DataResult implements IApiResult {\n\tId: number = 0;\n\tResult1: any[] = [];\n  \n  constructor(init?: IApiResult ) {\n    Object.assign(this, init);\n  }\n}\n\nexport interface IApiResult  {\n\tId: number\n\tResult1: any[]\n}\n\nexport class ApiResult implements IApiResult {\n\tId: number = 0;\n\tResult1: any[] = [];\n  \n  constructor(init?: IApiResult ) {\n    Object.assign(this, init);\n  }\n}\n\n\nexport interface IAppStatusList {\n\tId: number\n\tTitle: string\n\tOrder: number\n\tTableId: number\n}\n\nexport interface IAppStatusList {\n\tId: number\n\tTitle: string\n\tOrder: number\n\tTableId: number\n}\n\nexport class AppStatusList implements IAppStatusList {\n\tId: number = 0;\n\tTitle: string = '';\n\tOrder: number = 0;\n\tTableId: number = 0;\n  \n  constructor(init?: IAppStatusList) {\n    Object.assign(this, init);\n  }\n}\n\nexport interface IAppUserRoleMaster {\n\tId: string\n\tName: string\n}\n\nexport class AppUserRoleMaster implements IAppUserRoleMaster {\n\tId: string = '';\n\tName: string = '';\n  \n  constructor(init?: IAppUserRoleMaster) {\n    Object.assign(this, init);\n  }\n  \n}\n\n\nexport interface IAppUser {\n\tUsername: string;\n    DisplayName: string;\n    Token: string;\n    image?: string;\n    Email?: string;\n    PhoneNumber?: string;\n    IsActive?:boolean;\n}\n\nexport class AppUser implements IAppUser {\n\tUsername: string = '';\n    DisplayName: string= ''\n    Token: string= ''\n    image?: string= '';\n    Email?: string= '';\n    PhoneNumber?: string= '';\n    IsActive?:boolean = false;\n  \n  constructor(init?: IAppUser) {\n    Object.assign(this, init);\n  }\n  \n}\n\n\nexport interface IAppConfig {\n\tId: number\n\tTitle: string\n\tOrder:number\n\t// Type: number\n\tConfigTypeId : number;\t\n\tConfigType: string;\n\tDet1: string\n\tDet2: string\n\tDet3: string\n\tDet4: string\n\tDet5: string\n\t//defaultSort: string\n}\n\nexport class AppConfig implements IAppConfig {\n\tId: number = 0;\n\tTitle: string = '';\n\tOrder:number = 0;\n\t// Type: number = 0;\n\tConfigTypeId: number = 0;\n\tConfigType: string = '';\n\tDet1: string = '';\n\tDet2: string = '';\n\tDet3: string = '';\n\tDet4: string = '';\n\tDet5: string = '';\n\t//defaultSort: string= 'desc';\n  \n  constructor(init?: IAppConfig) {\n    Object.assign(this, init);\n  }\n}\n\n\n\nexport interface IHistory {\n\tId: number\n\tAction: string\n\tFromStage: number\n\tToStage: number\n\tActionBy: string\n\tDateTime: Date\n\tComment: string\n\tDetails1: string\n\tDetails2: string\n\tDetails3: string\n\tDetails4: string\n\tDetails5: string\n}\n\nexport class History implements IHistory {\n\tId: number = 0;\n\tAction: string = '';\n\tFromStage: number = 0;\n\tToStage: number = 0;\n\tActionBy: string = \"\";\n\tDateTime: Date = new Date() ;\n\tComment: string = '';\n\tDetails1: string = '';\n\tDetails2: string = '';\n\tDetails3: string = '';\n\tDetails4: string = '';\n\tDetails5: string = '';\n  \n  constructor(init?: IHistory) {\n    Object.assign(this, init);\n  }\n}\n\n//==============================================\n\nconst IAppApiAPI = \"/AppApi\";\n\nconst DBFun = { \n  \n  ExecuteQuery: (action: IApiAction) => agent.requests.post(`${IAppApiAPI}/Query`, action),    \n  FileDownload: (action: IApiAction) => agent.requests.downloadPost(`${IAppApiAPI}/Attachment`, action),\n\n  AppAllActionList: ()  =>  agent.requests.get(`${IAppApiAPI}/AppAllActionList`),\t\n  Execute: (action: FormData) => agent.requests.postForm(`${IAppApiAPI}/TakeAction`, action),  \n  \n  ActionList: (FlowId: number, Id: number, tableName: string, flowName: string) =>  agent.requests.get(`${IAppApiAPI}/ActionList/${FlowId}?itemId=${Id}&tableName=${tableName}&flowName=${flowName}&`),\n  StatusList: (TableName: string)  =>  agent.requests.get(`${IAppApiAPI}/GetStatusList/${TableName}`),\n  ConfigList: (configType: string)  =>  agent.requests.get(`${IAppApiAPI}/GetConfigList/${configType}`),\n  UserList: ()  =>  agent.requests.get(`${IAppApiAPI}/GetUserList`),\n  RoleList: ()  =>  agent.requests.get(`${IAppApiAPI}/GetRoleList`),\n  \n  list: (): Promise<any[]> => agent.requests.get(IAppApiAPI),\n  details: (Id: number) => agent.requests.get(`${IAppApiAPI}/${Id}`),\n  create: (item: any) => agent.requests.post(IAppApiAPI, item),\n  update: (item: any) => agent.requests.put(`${IAppApiAPI}/${item.Id}`, item),\n  delete: (Id: number) => agent.requests.del(`${IAppApiAPI}/${Id}`),\n};\n\nexport default class ApiImpl {\t\n\tAllActionList : IApiAction[] = [];\n\tconfigList: IAppConfig[] = [];\n\troleList: IAppUserRoleMaster[] = [];\n\tuserList: IAppUser[] = [];\n\tconstructor() {\n\t\tmakeObservable(this, {\n\t\t\tAllActionList: observable,\n\t\t\tconfigList: observable,\t\n\t\t\troleList: observable,\t\n\t\t\tuserList: observable,\t\n\t\t});\n\t}\n\n\tupdateAllActionList = async () => {\n\t\tthis.AllActionList = await DBFun.AppAllActionList(); \n\t}\n\t\n\trolesFromArray(rolesList: AppUserRoleMaster[], strRoleArray: string) : AppUserRoleMaster[] {\n\n\t\tlet roles : AppUserRoleMaster[] = [];\n\t\tif(strRoleArray && rolesList && rolesList.length > 0){\n\t\t\tstrRoleArray.split(',').forEach( r => {\n\t\t\t\tlet role = new AppUserRoleMaster();\n\t\t\t\trole.Id = r;\n\t\t\t\tvar RoleName = rolesList.find(x => x.Id === r)?.Name;\n\t\t\t\trole.Name = RoleName ? RoleName : '' ;\n\t\t\t\troles.push(role);\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn roles;\t\t\t\n\t}\n\n\trolesName(rolesList: AppUserRoleMaster[], strRoleArray:string):string{\n\t\tlet strRoleNames = '';\n\n\t\tif(strRoleArray && rolesList && rolesList.length > 0){\n\t\t\tstrRoleArray.split(',').forEach( r => {\n\t\t\t\tvar RoleName = rolesList.find(x => x.Id === r)?.Name;\n\t\t\t\tif(strRoleNames){\n\t\t\t\t\tstrRoleNames += \", \"\n\t\t\t\t}\n\t\t\t\tstrRoleNames += RoleName;\t\t\t\t\n\t\t\t});\n\t\t}\n\n\t\treturn strRoleNames;\n\t}\n\t\n\tgetStatusList = async (TableName: string) => {\t\t\n\t\ttry {      \t\t \n\t\t\treturn await DBFun.StatusList(TableName); \t\t  \n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t}\n\n\tgetUserList = async () => {\t\t\n\n\t\tif(this.userList.length === 0){\n\t\t\ttry {      \t\t \n\t\t\t\tthis.userList =  await DBFun.UserList(); \t\t  \n\t\t\t} catch (error) {\n\t\t\t\treturn error;\n\t\t\t}\n\t\t}\t\t\t\t\t\t\t\t\t\n\t\treturn this.userList;\t\t\n\t}\n\tuserFromArray(list: AppUser[], strArray: string) : AppUser[] {\n\n\t\tlet objLst : AppUser[] = [];\n\t\tif(strArray && list && list.length > 0){\n\t\t\tstrArray.split(',').forEach( r => {\n\t\t\t\tlet obj = new AppUser();\n\t\t\t\tobj.Username = r;\n\t\t\t\tvar name = list.find(x => x.Username === r)?.Username;\n\t\t\t\tobj.Username = name ? name : '' ;\n\t\t\t\tobjLst.push(obj);\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn objLst;\t\t\t\n\t}\n\n\tgetRoleList = async () => {\t\t\n\t\t//debugger;\n\t\tif(this.roleList.length === 0){\n\t\t\ttry {      \t\t \n\t\t\t\tthis.roleList =  await DBFun.RoleList(); \t\t  \n\t\t\t} catch (error) {\n\t\t\t\treturn error;\n\t\t\t}\n\t\t}\t\t\t\t\t\t\t\t\n\t\treturn this.roleList;\n\t\t\n\t}\n\n\tgetConfigList = async (configType: string, setData:any) => {\n\t\t//debugger;\t\t\n\t\ttry {      \t\t \t\t\t\n\t\t\tvar res = this.configList.filter(  x => x.ConfigType === configType )\n\n\t\t\tif(res.length === 0){\n\t\t\t\tres = await DBFun.ConfigList(configType)\n\t\t\t\tthis.configList = [...this.configList, ...res]\n\t\t\t}\t\t\t\t\t\t\n\t\t\tsetData(res);\n\t\t\treturn res;\n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t}\n\tconfigFromArray(list: AppConfig[], strArray: string) : AppConfig[] {\n\n\t\tlet objLst : AppConfig[] = [];\n\t\tif(strArray && list && list.length > 0){\n\t\t\tstrArray.split(',').forEach( r => {\n\t\t\t\tlet obj = new AppConfig();\n\t\t\t\tobj.Id = Number(r);\n\t\t\t\tvar name = list.find(x => x.Id === Number(r))?.Title;\n\t\t\t\tobj.Title = name ? name : '' ;\n\t\t\t\tobjLst.push(obj);\n\t\t\t});\n\t\t}\n\t\t\n\t\treturn objLst;\t\t\t\n\t}\n\n\tupdateAttachments(formData: FormData, attachList: Attachment[]) : FormData {\n\t\t\n\t\tattachList.forEach( (f:Attachment) => {\n            if( f.file){\n                formData.append('FileList', f.file, f.FilePath);\n            }            \n        });\n\t\treturn formData;\t\t\t\t\t\n\t}\n\t\n\tupdateActions = async (id: number, tableName: string, flowName: string, setActions: any, setError: any ) => {\t\t\t\n\t\ttry {  \n\t\t\tawait DBFun.ActionList(0, id, tableName, flowName).then( (res) => {             \n\t\t\t\tif((res as any).errors){          \n\t\t\t\t\tsetError((res as any).errors.Error);                        \n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tsetActions(res);\n\t\t\t\t}\t\t\t\t\n\t\t\t});\n\t\t} catch (error) {\n\t\t\tsetError(\"Problem in updateActions.\"); \t\t\t\n\t\t}\n\t}\n\n\tgetActions = async (flowId: number, id: number, tableName: string, flowName: string) => {\t\t\n\t\ttry {      \t\t \n\t\t\treturn await DBFun.ActionList(flowId, id, tableName, flowName); \t\t  \n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t}\n\n\tgetActionsByTitle = async (id: number, tableName: string, flowName: string) => {\t\t\n\n\t\tif(this.AllActionList.length == 0)\n\t\t\tthis.AllActionList = await DBFun.AppAllActionList(); \n\n\t\t\n\n\t\tvar flowId = 0;\n\t\ttry {      \t\t \n\t\t\treturn await DBFun.ActionList(flowId, id, '', ''); \t\t  \n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t}\n\t//(): Promise<bool>\n\n\tLoadItem = async (ActionUniqName: string, ItemId: string, setActions: any, setItem: any, setError: any ) : Promise<any> => {\t\n\t\t\n\t\tlet act: AppApiAction = new AppApiAction()\n        //act.ActionId =ActionId;   \n\t\tact.ActionUniqName =ActionUniqName;   \n\t\tact.Parm1 = ItemId;\n\t\tact.ReturnActions = true;\n\t\tvar ret = null;\n\t\ttry {        \t\t\t \n\t\t\tawait DBFun.ExecuteQuery(act).then((res) => {  \n\t\t\t\tif((res as any).errors){          \n\t\t\t\t\tsetError((res as any).errors.Error); \t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tret = res;                   \n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(res.Actions){\n\t\t\t\t\t\tsetActions(res.Actions)\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(res.Actions[0]){\n\t\t\t\t\t\tret = res.Result1[0];\n\t\t\t\t\t\tsetItem(ret);\t\t\t\t\t\t\n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tsetError(\"No Data\");\n\t\t\t\t\t\tret =  false;\n\t\t\t\t\t}\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t}\t\t\t\t                        \n\t\t\t});  \t\t   \n\t\t  } catch (error) {\n\t\t\tsetError(\"error in LoadItem\");\n\t\t\tret =  false;\t\t\t   \n\t\t}\t\n\t\treturn ret;\n\t}\n\n\n\tLoadDataList = async (ActionUniqName: string, setData:any, setLoading: any, setError: any ) => {\t\n\t\t\n\t\tlet act: AppApiAction = new AppApiAction()\n        //act.ActionId =ActionId;\n\t\tact.ActionUniqName =ActionUniqName;    \n\t\t\n\t\ttry {        \t\t\t \n\t\t\tawait DBFun.ExecuteQuery(act).then((res) => {  \n\t\t\t\tif((res as any).errors ){          \n\t\t\t\t\tsetError((res as any).errors.Error); \n\t\t\t\t\tsetLoading(false);                       \n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tif(res.Result1){\n\t\t\t\t\t\tsetData(res.Result1); \n\t\t\t\t\t}\n\t\t\t\t\telse{\n\t\t\t\t\t\tsetError(\"NoData\");\n\t\t\t\t\t}\t\t\t\t\t\n\t\t\t\t\tsetLoading(false); \n\t\t\t\t}                              \n\t\t\t});  \t\t   \n\t\t  } catch (error) {\n\t\t\tsetError(\"error in LoadData\"); \n\t\t  }\t\t\n\t}\n\n\tExecuteQuery = async (action: IApiAction) => {\t\t\n\t\ttry {        \t\t\t \n\t\t  return await DBFun.ExecuteQuery(action);  \t\t   \n\t\t} catch (error) {\n\t\t\treturn error;\n\t\t}\n\t}\n\t\n\n\n\tExecuteAction = async (action: FormData, setError:any) => {\n\t\tvar ret = null;\t\t    \t\t\n\t\ttry {    \t\t\t\n\t\t\tawait DBFun.Execute(action).then((res) => {  \n\t\t\t\tif((res as any).errors){          \n\t\t\t\t\tsetError((res as any).errors.Error); \t\n\t\t\t\t\tret = false;\t\t\t\t                \n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tret = res; \n\t\t\t\t}                              \n\t\t\t});  \t\t\t\t\n\t\t} catch (error) {\n\t\t\tsetError(\"error in ExecuteAction\"); ;\n\t\t\tret = false;\n\t\t}\n\t\treturn ret;\n\t}\n\n\tFileDownload = async (action: IApiAction) => {\t\t\n\t\ttry {        \n\t\t  debugger;\t\t \n\t\t  var itm = await DBFun.FileDownload(action);  \t\t  \n\t\t  return itm;\t\t \n\t\t} catch (error) {\n\t\t return error;\n\t\t}\n\t  }\n}\n\nexport const ApiContext = createContext(new ApiImpl());\n\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/MyCustomTxt.tsx",["563","564"],"import React, { useEffect } from \"react\";\nimport {  \n  useField,\n  FieldAttributes,  \n} from \"formik\";\n\nimport {        \n    TextField,    \n  } from \"@material-ui/core\";\n\nimport moment from 'moment';\n\n\n\ntype CustomTxtProps = { label: string, multiline?: boolean, width?: string, onChange?:any  } & FieldAttributes<{}>;\n\nconst MyCustomTxt: React.FC<CustomTxtProps> = ({ label, placeholder, type,required,autoComplete, autoFocus,multiline, width, onChange, ...props }) => {\n\n  const [field,meta , { setValue }] = useField<{}>(props);\n\n  const onTextChange = (event: any) => {\n    //debugger;\n    //alert(event.target.value);\n    setValue(event.target.value);\n  }\n  \n  useEffect(() => {\n    if( type == \"date\" ){\n      debugger;\n      if(field.value){\n        setValue(moment(field.value).format(\"YYYY-MM-DD\"));\n      }      \n    }\n  },[]);\n    //const [field] = useField<{}>(props);\n\n    \n    //const [txtMargin] = useField('normal');\n    const errorText = meta.error && meta.touched ? meta.error : \"\";\n  //var multiline = true;\n    return (      \n        <TextField\n           \n            placeholder={placeholder}\n            {...field}\n            type={type}          \n            error={!!errorText}\n            variant=\"outlined\"\n            margin='normal'\n            required={required}\n           //autoComplete={autoComplete}\n            autoFocus={autoFocus}\n            fullWidth   \n            label={label}\n            multiline={multiline}  \n            style={{width: width, display: 'block'}}    \n            size='small' \n            onChange={onTextChange} \n            \n            InputLabelProps={{\n              shrink: true,\n            }}\n\n                                      \n      />           \n    );        \n  };\n\nexport default MyCustomTxt;\n\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/TableButton.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/common/ErrorMessage.tsx",["565","566"],"import React from 'react'\nimport { useParams } from 'react-router-dom';\nimport {Card, Typography } from '@material-ui/core';\nimport { AppTheme } from '../Theme';\n\n\n\ninterface Parms {\n  message : string;   \n}\n\n\nconst ErrorMessage: React.FC<Parms> = ({ message=\"\" }) => {\n\n\n  return (\n    <React.Fragment>\n      {message && \n        <Card style={{ margin: '10px', padding: '10px', color:AppTheme.ErrorMessgeColor}}>{message}</Card>        \n      }\n    </React.Fragment>\n  );\n};\n\nexport default ErrorMessage;\n\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/MyDropDown.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/common/MessageDialog.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/TableDetails.tsx",["567","568","569","570","571","572","573","574"],"import { Button, Grid, Typography } from \"@material-ui/core\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport {  useHistory } from \"react-router-dom\";\nimport XLSX from \"xlsx\";\n\nimport { AppTheme } from \"../../app/common/Theme\";\nimport { AppFlowContext } from \"../AppFlow/AppFlowStore\";\nimport { AppTableMasterContext } from './AppTableMasterStore';\nimport { observer } from 'mobx-react-lite';\nimport { AppTableMaster } from \"./AppTableMaster\";\nimport { AppColumnMasterContext } from \"../AppColumnMaster/AppColumnMasterStore\";\nimport { AppActionContext } from \"../AppAction/AppActionStore\";\nimport { AppStatusListContext } from \"../AppStatusList/AppStatusListStore\";\nimport { AppExport } from \"../AppAction/AppAction\";\nimport { AppColumnExport, AppColumnMaster } from \"../AppColumnMaster/AppColumnMaster\";\nimport { ColumnAttachmentType, ColumnDataType } from \"../../app/common/SystemConstants\";\nimport { AppConfigTypeContext } from \"../AppConfigType/AppConfigTypeStore\";\nimport { AppConfigType, IAppConfigType } from \"../AppConfigType/AppConfigType\";\n\ninterface Parms {\n    tableId : number;  \n    showTitle? : boolean;\n    flowId?: string;\n\n  }\n\nconst TableDetails: React.FC<Parms> = ({ tableId, showTitle = true, flowId }) => {\n\n   const AppTableMasterStore = useContext(AppTableMasterContext);\n   const AppFlowStore = useContext(AppFlowContext);\n   const AppColumnMasterStore = useContext(AppColumnMasterContext);\n   const AppActionStore = useContext(AppActionContext); \n   const AppStatusListStore = useContext(AppStatusListContext);\n   const AppConfigTypeStore = useContext(AppConfigTypeContext);\n\n   \n   let history = useHistory();\n\n   useEffect(() => {\n    \n      if(showTitle){\n         AppTableMasterStore.loadItem(tableId).then( (res:any) => {\n            AppFlowStore.getFlowList( res.Id );            \n         } );\n      }              \n   },[ tableId, showTitle, flowId, AppTableMasterStore, AppTableMasterStore.loadItem, AppFlowStore, AppFlowStore.getFlowList]);\n   \n\n   const navigateToPath = (path:string) => {        \n        history.push(path);        \n   };\n\n   const  buttonStyle = {\n      marginRight:'5px', marginLeft:'5px'\n   };\n\n\n   const ExcelReport = (FileName:string) => {   \n\n     \n      var wb = XLSX.utils.book_new();\n      wb.Props = {\n         Title: FileName,\n         Subject: FileName,         \n      };\n\n      var tabArr:AppTableMaster[] = [];\n      tabArr.push(AppTableMasterStore.item);\n      \n      const table: XLSX.WorkSheet = XLSX.utils.json_to_sheet(tabArr);\n      var wscols = [ {wch:5}, {wch:30}, {wch:20} ]; \n      table[\"!cols\"] = wscols;            \n      XLSX.utils.book_append_sheet(wb, table, 'Table') \n      \n      \n      AppConfigTypeStore.getList().then( (configTyps:any) => { \n\n         AppColumnMasterStore.getColumnList(AppTableMasterStore.item.Id).then( (colList:any) => {\n            \n            var colLstRes:AppColumnExport[] = []; \n         \n            debugger;\n            colList.forEach(function (col:any) {\n\n               var colRes = new AppColumnExport();\n               colRes.Title = col.Title;\n               if(col.Type){\n                  var v = ColumnDataType.find( u => u.Id === col.Type );\n                  if(v){\n                     colRes.Type = (v as any).value ? (v as any).value : ''; \n                  }              \n               }\n               if(col.ConfigId){\n                  var v1:any =  configTyps.find( (u:any) => u.Id === col.ConfigId ); //?.Title\n                  if(v1){\n                     colRes.Config = (v1 as any).Title ? (v1 as any).Title : ''; \n                  }\n               }\n               if(col.AttachmentConfig){\n                  var v2 = ColumnAttachmentType.find( u => u.Id === col.AttachmentConfig.toString() );\n                  if(v2){\n                     colRes.AttachmentConfig = (v2 as any).value ? (v2 as any).value : ''; \n                  }\n                  //colRes.AttachmentConfig = '##'; \n                  //col.AttachmentConfig; ColumnAttachmentType.find( u => u.Id === item.AttachmentConfig.toString() )\n\n               }\n                           \n               colLstRes.push(colRes);\n            });\n                     \n            AppStatusListStore.getStatusList(AppTableMasterStore.item.Id).then( (statusList:any) => {\n\n               const statList: XLSX.WorkSheet = XLSX.utils.json_to_sheet(statusList);      \n               var wscols = [ {wch:5}, {wch:20}, {wch:20}, {wch:20}, {wch:20} ]; \n               statList[\"!cols\"] = wscols;      \n               XLSX.utils.book_append_sheet(wb, statList, 'StatusList');\n               \n               const columnList: XLSX.WorkSheet  = XLSX.utils.json_to_sheet(colLstRes);  \n               var wscols = [ {wch:5}, {wch:20}, {wch:30}, {wch:20}, {wch:20}, {wch:15}, {wch:15}, {wch:15} ];                                              \n               columnList[\"!cols\"] = wscols; \n               XLSX.utils.book_append_sheet(wb, columnList, 'ColumnList');\n\n               const flowList: XLSX.WorkSheet  = XLSX.utils.json_to_sheet(AppFlowStore.tableFlows); \n               var wscols = [ {wch:5}, {wch:20}, {wch:20} ];         \n               flowList[\"!cols\"] = wscols;     \n               XLSX.utils.book_append_sheet(wb, flowList, 'FlowList');\n\n               var flows = AppFlowStore.tableFlows;      \n               if(flows.length == 0){\n                  XLSX.writeFile(wb, FileName, {bookType:'xlsx', type: 'binary'});\n               }\n               else{\n                  var couter = 0;         \n                  AppFlowStore.tableFlows.forEach(function (value) {\n                     AppActionStore.flowActions(value.Id).then( (actions:any) => {\n\n                        if(actions){\n                           var ActList:any[] = [];\n                           actions.forEach(function (act:any) {\n\n                              var actRes:AppExport = new AppExport();                        \n                              actRes.Order = act.Order;\n                              actRes.FlowName = value.Title;\n                              actRes.ActionType = act.ActionType;                              \n                              actRes.UniqName = act.UniqName\n                              \n                              if(act.FromStatusList ){                              \n                                 var strFrom = \"\";   \n                                 act.FromStatusList.forEach(function (fromAct:any) {\n                                    strFrom += fromAct.Title + \",\";\n                                 });   \n                                 actRes.FromStatus = strFrom;\n                              } \n\n                              actRes.Action = act.Action;\n                              if(act.ToStatusId ){\n                                 actRes.ToStatus = statusList.filter( (x:any) => x.Id === act.ToStatusId )[0].Title;\n                              }\n                              actRes.WhenXml = act.WhenXml;\n                              actRes.ActionXml = act.ActionXml;                           \n\n                              if(act.InitStatus ){\n                                 actRes.InitStatus = \"Yes\";\n                              }\n                              else{\n                                 actRes.InitStatus = \"No\";\n                              }                                \n                              ActList.push(actRes);                                                 \n                           });\n                        \n                           const actionList: XLSX.WorkSheet  = XLSX.utils.json_to_sheet(ActList);  \n                           var wscols = [ {wch:5}, {wch:15}, {wch:9}, {wch:10}, {wch:20}, {wch:20}, {wch:20}, {wch:50}, {wch:50} ];                                              \n                           actionList[\"!cols\"] = wscols;        \n                           XLSX.utils.book_append_sheet(wb, actionList, value.Title);\n\n                        }\n\n                        \n\n                        couter++;\n                        if( couter == flows.length){\n                           XLSX.writeFile(wb, FileName, {bookType:'xlsx', type: 'binary'}); \n                        }\n                     });               \n                  }); \n               }\n               \n            })\n            \n         });\n\n      });\n\n     \n\n      \n      \n   };\n\n   \n\n    return (\n        <Grid container spacing={1} style={{width:'100%'}}>\n                       \n            {showTitle &&\n               <React.Fragment>\n                  \n                  <Typography variant=\"h6\" gutterBottom style={{paddingLeft:15, paddingRight:30,color: AppTheme.TableTitleColor }} >\n                     <span>{AppTableMasterStore.item.Title}</span> \n                  </Typography>\n                  <Button style={buttonStyle} onClick={ () => navigateToPath(`/AppTableMasterList`)}\n                   variant=\"text\" size=\"small\" color= \"primary\" >Table List</Button>\n               </React.Fragment>\n            }\n            <Button style={buttonStyle}\n              onClick={ () => navigateToPath(`/TableColumns/${tableId}`)} variant=\"contained\" size=\"small\" \n               color= {  history.location.pathname.includes('/TableColumns/') ? \"secondary\" : \"primary\" }\n               >Columns</Button>\n\n            <Button style={buttonStyle} onClick={ () => navigateToPath(`/TableStatusList/${tableId}`)} variant=\"contained\" size=\"small\" \n                color= {  history.location.pathname.includes('/TableStatusList/') ? \"secondary\" : \"primary\" }\n                >Status List</Button>\n\n            <Button style={buttonStyle} onClick={ () => navigateToPath(`/TableFlowList/${tableId}`)} variant=\"contained\" size=\"small\" \n                color= {  history.location.pathname.includes('/TableFlowList/') ? \"secondary\" : \"primary\" }\n                >Flow List</Button>\n\n            {showTitle && AppFlowStore.tableFlows.map( (row) => (\n               <Button key={row.Id} style={buttonStyle} onClick={ () => navigateToPath(`/TableActions/${tableId}/${row.Id}`)} variant=\"contained\" size=\"small\" \n                  color= {  history.location.pathname.includes(`/TableActions/${tableId}/${row.Id}`) ? \"secondary\" : \"primary\" }\n               >{row.Title}</Button>\n            ))                        \n            }\n\n            {showTitle &&\n               <Button style={buttonStyle} onClick={ () => {ExcelReport(`${AppTableMasterStore.item.Title}.xlsx`);} } variant=\"text\" size=\"small\" color= \"primary\" >Export</Button>\n            }\n            \n        </Grid>\n\n        \n    );\n}\n\nexport default observer(TableDetails);\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppColumnMaster/AppColumn.tsx",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/MyCheckBox.tsx",["575"],"\nimport React, { useEffect, useState } from \"react\";\nimport {  \n  useField,\n  FieldAttributes,  \n} from \"formik\";\n\nimport FormControl from '@material-ui/core/FormControl';\n\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\n\n\ntype CustomProps = { checked?: boolean, label?: string, width?: string  } & FieldAttributes<{}>;\n\nconst MyCheckBox : React.FC<CustomProps> = ({ checked, label, placeholder, type,required,autoComplete, autoFocus,  width, ...props }) => {\n    \n    const [field] = useField<{}>(props);\n    const [val, setVal] = useState(false);\n\n    useEffect(() => {\n      setVal(field.value as boolean);      \n    },[setVal]);\n       \n    return (                  \n        <FormControl variant=\"outlined\" fullWidth style={{ marginTop : 10 , marginBottom : 10, width:width,  display: 'block'}} >\n           <FormControlLabel  \n                control={<Checkbox {...field}  checked={val} onClick={ () => { setVal(!val);} }  />}\n                label={label}              \n          />\n        </FormControl>              \n    );\n  };\n\nexport default MyCheckBox;\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/ConfigDropDown.tsx",["576"],"import React, { useContext, useEffect, useState } from \"react\";\nimport {  \n  useField,\n  FieldAttributes,  \n} from \"formik\";\n\nimport FormControl from '@material-ui/core/FormControl';\nimport { ApiContext, AppConfig, IAppConfig } from \"../../../Portal/Api/Api\";\nimport { Chip, TextField } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\n\ntype CustomProps = { multiple?:boolean, configType:string, label: string, width?: string  } & FieldAttributes<{}>;\n\n\n\nconst ConfigDropDown: React.FC<CustomProps> = ({ multiple=false, configType, label, placeholder, type,required,autoComplete, autoFocus, width, ...props }) => {\n\n    const ApiStore = useContext(ApiContext);\n\n    const [field, , { setValue }] = useField<{}>(props);\n    const [configList, setConfigList] = useState<AppConfig[]>();\n\n\n    useEffect(() => {\n      //debugger;\n      ApiStore.getConfigList(configType, setConfigList).then( res => { \n        \n        if(field.value && (field.value as any).length > 0){\n          var roleArray = ApiStore.configFromArray(res, field.value as any);  \n          if(!multiple && roleArray.length>0){\n            setValue(roleArray[0]);\n          }\n          else{\n            setValue(roleArray);\n          }        \n        }\n        else{\n          setValue(new AppConfig() );\n        }\n\n        setConfigList(res)\n      \n      });\n    },[ ApiStore.getConfigList, setConfigList]);\n    \n      \n    return ( \n      \n      // <FormControl variant=\"outlined\"  size=\"small\" style={{ marginTop : 10 , marginBottom : 10, width:width,  }}>\n      //   <InputLabel id={`${field.name}-select-outlined-label`}>{label}</InputLabel>      \n      //   <Select\n      //     {...field}\n      //     labelId={`${field.name}-select-outlined-label`}\n      //     id={`${field.name}-select-outlined`}\n      //     label={label}\n      //   >\n      //     <MenuItem value=\"\"><em>None</em></MenuItem>\n      //     {configList &&  (configList as any).map((row:any) => (                              \n      //         <MenuItem key={row.Id} value={row.Id}>{row.Title}</MenuItem>               \n      //     ))}\n      //   </Select>        \n      // </FormControl>\n\n    \n \n    <FormControl variant=\"outlined\"  size=\"small\" style={{ marginTop : 10 , marginBottom : 10, width:width, display: 'block' }}>\n      {configList && \n        <Autocomplete id=\"UserAccessRoles\" className=\"customFieldMargin\" multiple={multiple}   \n            {...field}\n            size=\"small\"              \n            value={field.value as IAppConfig[]}\n            options={configList as AppConfig[]} \n            getOptionLabel={(option:AppConfig) => option.Title}                  \n            freeSolo\n            renderTags={(value, getTagProps) =>\n              value.map((option:any, index) => (\n                value  && <Chip variant=\"outlined\" label={option.Title} {...getTagProps({ index })} /> \n              ))\n            }\n            renderInput={(params) => (\n              <TextField {...params} variant=\"outlined\" label={label} placeholder={placeholder} fullWidth />\n            )}\n            \n            onChange={(event:any, newValue:any) => {\n              debugger;\n              var unq = true;\n\n              if(multiple){\n                for(let i=0;i<newValue.length-1;i++){\n                  if( newValue[i].Id === newValue[newValue.length-1].Id){\n                    unq = false;\n                    break;\n                  }\n                }\n              }\n              \n              if(unq){\n                setValue(newValue);\n              }                                          \n            }}\n        />\n          }\n      </FormControl>\n\n    \n    );\n  };\n\nexport default ConfigDropDown;\n\n\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/MyDatePicker.tsx",["577","578","579","580","581","582","583","584","585"],"\nimport React, { useEffect, useState } from \"react\";\nimport {  \n  useField,\n  FieldAttributes,  \n} from \"formik\";\n\nimport FormControl from '@material-ui/core/FormControl';\n\nimport DateFnsUtils from '@date-io/date-fns'; // choose your lib\nimport {\n    DatePicker,\n    TimePicker,\n    DateTimePicker,\n    MuiPickersUtilsProvider,\n    KeyboardDatePicker,\n  } from '@material-ui/pickers';\n\n\ntype CustomProps = { checked?: boolean, label?: string, width?: string  } & FieldAttributes<{}>;\n\nconst MyDatePicker : React.FC<CustomProps> = ({ checked, label, placeholder, type,required,autoComplete, autoFocus,  width, ...props }) => {\n    \n  \n    const [field,meta , { setValue }] = useField<{}>(props);\n    const [val, setVal] = useState(false);\n    \n\n    // useEffect(() => {\n    //   setVal(field.value as boolean);      \n    // },[setVal]);\n\n    const [selectedDate, handleDateChange] = useState(new Date());\n       \n    return (                  \n        <FormControl variant=\"outlined\" fullWidth style={{ marginTop : 10 , marginBottom : 10, width:width,  display: 'block'}} size=\"small\" >\n           {/* <FormControlLabel  \n                control={<Checkbox {...field}  checked={val} onClick={ () => { setVal(!val);} }  />}\n                label={label}              \n          /> */}\n\n      {/* <KeyboardDatePicker\n        autoOk\n        variant=\"inline\"\n        inputVariant=\"outlined\"\n        label=\"With keyboard\"\n        format=\"MM/dd/yyyy\"\n        value={selectedDate}\n        InputAdornmentProps={{ position: \"start\" }}\n        onChange={date => handleDateChange(date)}\n        onFocus={ () => { console.log(1); }}\n        onBlur={() => { console.log(2);}}\n      /> */}\n\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>           \n          <DatePicker\n            {...field}\n            autoOk\n            variant=\"inline\"\n            inputVariant=\"outlined\"\n            label={label}\n            \n            onChange={ (v:any) => { setValue(v) }}\n            size=\"small\"\n            fullWidth\n            format=\"dd-MMM-yyyy\"\n          />            \n        </MuiPickersUtilsProvider>\n\n        </FormControl>              \n    );\n  };\n\nexport default MyDatePicker;\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/MyAttachment.tsx",["586","587","588","589","590","591","592","593","594","595","596","597","598","599","600","601","602","603","604","605","606"],"\nimport React, { useContext, useEffect, useState } from \"react\";\nimport {  \n  useField,\n  FieldAttributes,  \n} from \"formik\";\n\nimport FormControl from '@material-ui/core/FormControl';\nimport {v4 as uuid} from 'uuid';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\n\nimport MaterialTable from \"material-table\";\nimport { Box, Button, ButtonGroup, Container, Grid, LinearProgress, Link, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField,  } from '@material-ui/core';\nimport TableButton from \"./TableButton\";\nimport { ApiContext, AppApiAction } from \"../../../Portal/Api/Api\";\n\nexport interface IAttachmentDetails {\n\tAction: string\n\tFileArrayId?: number\n\tId?: number\t\n\tFileName: string\t\n\tProp1?: string\n\tProp2?: string\n\tProp3?: string\n\tProp4?: string\n\tProp5?: string\n}\n\nexport class AttachmentDetails implements IAttachmentDetails {\n\tAction: string = '';\n\tFileArrayId: number = -1;\n\tId: number = -1;\t\n\tFileName: string = '';\t\n\tProp1: string = '';\n\tProp2: string = '';\n\tProp3: string = '';\n\tProp4: string = '';\n\tProp5: string = '';\n\n  constructor(init?: IAttachmentDetails) {\n    Object.assign(this, init);\n  }\n}\n\nexport interface IAttachment {\n\tfile: Blob\n\t//Details : AttachmentDetails\n  Action: string\n\tFileArrayId?: number\n\tId?: number\t\n\tFileName: string\t\n  FilePath: string,\n\tProp1?: string\n\tProp2?: string\n\tProp3?: string\n\tProp4?: string\n\tProp5?: string\n}\n\nexport class Attachment implements IAttachment {\n\tfile: Blob = new Blob();\n\t//Details : AttachmentDetails = new AttachmentDetails();\n  Action: string = '';\n\tFileArrayId: number = -1;\n\tId: number = -1;\t\n\tFileName: string = '';\t\n  FilePath: string = '';\t\n\tProp1: string = '';\n\tProp2: string = '';\n\tProp3: string = '';\n\tProp4: string = '';\n\tProp5: string = '';\n\t  \n  constructor(init?: IAttachment) {\n    Object.assign(this, init);\n  }\n}\n\ntype CustomProps = {  downloadActionID: number, multipleFile?: boolean, label?: string, width?: string  } & FieldAttributes<{}>;\n\nconst MyAttachment : React.FC<CustomProps> = ({ multipleFile = false, downloadActionID, label, placeholder, type,required,autoComplete, autoFocus,  width, ...props }) => {\n    /**\n     * file limit\n     * if single file replace file\n     * \n     */\n    const [field, meta , { setValue }] = useField<{}>(props);\n    const [val, setVal] = useState(false);\n\n    const [attachFileList, setFileList] =useState<Attachment[]>([]);\n\n    const ApiStore = useContext(ApiContext);\n\n    useEffect(() => {\n      // console.log('MyAttachment useEffect') ;\n      // var attach: Attachment[] = [];\n      // var att : Attachment = new Attachment();\n      // att.Details = new AttachmentDetails();  \n      // att.Details.Prop1 = \"123\";\n      // attach.push(att);\n      // setValue(attach);   \n      // debugger;\n      // console.log(field.value)\n      \n    },[label]);\n\n    // const TableColumns = [     \n    //   {title: \"Id\", field: \"Id\"},\n    //   {title: \"File Name\", field: \"FileName\"},   \n    //   { title: \"Comment\", field: \"Comment\"},           \n    // ];\n\n    // const TableActions = [\n    //   {          \n    //       icon: (values: any) => { return <TableButton  label=\"Add New\" path=\"/EmployeeEdit\" /> },\n    //       tooltip: 'Add New',\n    //       isFreeAction: true, \n    //       onClick: (event:any) =>{  },                                     \n    //   },\n    //   {          \n    //       icon: (values: any) => { return <TableButton  label=\"Refresh\"  /> },\n    //       tooltip: 'Refresh',\n    //       isFreeAction: true, \n    //       onClick: (event:any) =>{ console.log(1); },                                     \n    //   }\n    // ];\n\n    const deleteAttachment = (att:Attachment) => { \n      debugger;\n      var attList: Attachment[] = (field.value as Attachment[]);\n      for(var i=0;i<attList.length;i++){\n        if(att == attList[i]){\n          if(att.Id != -1 ){            \n            attList[i].Action = \"Delete\";\n          }   \n          else{\n            attList.splice(i, 1);\n          }      \n          break;          \n        }\n      }\n      setValue(attList);\n    }\n\n    const download = (id:number, fileName:string) => { \n      \n      let act: AppApiAction = new AppApiAction()\n      act.ActionId = downloadActionID;  \n      act.ItemId = Number(id);\n      act.Parm1 = id.toString();\n  \n      ApiStore.FileDownload(act).then( (fileSteam) => { \n        debugger;\n        const downloadUrl = window.URL.createObjectURL(new Blob([fileSteam]));\n        const link = document.createElement('a');\n        link.href = downloadUrl;\n        link.setAttribute('download', fileName); //any other extension\n        document.body.appendChild(link);\n        link.click();\n        link.remove();\n  \n        debugger;\n      });\n     \n    }\n\n    const prop1Change = (e:any, i:number) => { \n      debugger;\n      let files = [...(field.value as any)];\n      files[i].Prop1 = e.target.value;\n      if(!files[i].Action){\n        \n        files[i].Action = \"Update\";\n      }\n      \n      setValue(files);\n  \n    }\n\n    const onFileChange = (event:any) => { \n      debugger;\n      \n      if(!multipleFile){\n        var attList: Attachment[] = (field.value as Attachment[]);\n        for(var i=0;i<attList.length;i++){\n          var att = attList[i];\n          if(att.Id != -1 ){            \n            attList[i].Action = \"Delete\";\n          }   \n          else{\n            attList.splice(i, 1);\n          }             \n        }\n      }\n\n      for(var i=0;i<event.target.files.length;i++){\n  \n        var f =  event.target.files[i] as any;    \n        \n        var filename = `${uuid()}-${f.name}`;\n        \n        var attch = new Attachment( { \n            file : f, \n            Action : 'Create', FileArrayId: i, Id : -1, FileName : f.name,  Prop1 : '', FilePath : filename,            \n          });\n                \n        setValue([...(field.value as Attachment[]), attch]);\n        setFileList(currentArray => [...currentArray, attch]);\n        event.target.value = null;                        \n      }        \n    }\n\n       \n    return (                  \n        <FormControl variant=\"outlined\" fullWidth style={{ marginTop : 10 , marginBottom : 10, width:width,  display: 'block'}} >\n\n          {!multipleFile && \n\n            <Box display=\"flex\" flexDirection=\"row\" p={1} m={1} style={{margin:'0px', padding:'0px', }} > \n              <Box p={1} >\n                <Button  variant=\"contained\" color=\"primary\"  component=\"label\" size=\"small\" >\n                  {label} <input type=\"file\" multiple={false} onChange={onFileChange}  id=\"raised-button-file\" style={{display: \"none\",}} />\n                </Button> \n\n                \n              </Box>\n             \n              { (field.value as Attachment[]).filter( x => x.Action != \"Delete\").map( at => (\n               <React.Fragment>\n                  <Box p={1} >\n                  <Link component=\"button\" variant=\"body2\"  onClick={ () => { download(at.Id,  at.FileName)} } >{at.FileName}</Link>\n\n                  \n                  </Box>\n                  <Box p={1} >\n                    {at.Action != \"Delete\" &&  <DeleteOutlinedIcon onClick={() => deleteAttachment(at)} />   }\n                  </Box>\n                 \n                \n                </React.Fragment>\n              ))}\n               \n            </Box>\n            // <Grid container spacing={1}>\n            //   <Grid item xs={4}>1</Grid>\n            //   <Grid item xs={4}>2</Grid>\n            //   <Grid item xs={4}>3</Grid>\n            // </Grid>\n          //  <React.Fragment>\n\n          //     <Button  color=\"primary\"  component=\"label\" size=\"small\" >\n          //       {label} <input type=\"file\" multiple={false} onChange={onFileChange}  id=\"raised-button-file\" style={{display: \"none\",}} />\n          //     </Button> \n\n          //    { (field.value as Attachment[]).filter( x => x.Action != \"Delete\").map( at => (\n          //      <React.Fragment>\n          //        <a href=\"#\" onClick={ () => { download(at.Id,  at.FileName)} } > {at.FileName} --  </a>\n          //       {at.Action != \"Delete\" && <TableCell align=\"left\"><a  href=\"#\" onClick={() => { deleteAttachment(at) }} >Delete</a></TableCell>  }\n          //       </React.Fragment>\n          //     ))};\n             \n          //  </React.Fragment>\n            \n          }\n          {/* <MaterialTable                    \n              title={label}\n              data={field.value as any}\n              columns={TableColumns as any}\n              actions={TableActions as any}\n              options={{ sorting:false, search: false, paging: false, filtering: false, exportButton: false, pageSize:10,  tableLayout: \"auto\"}}/> */}\n\n           {/* <FormControlLabel  \n                control={<Checkbox {...field}  checked={val} onClick={ () => { setVal(!val);} }  />}\n                label={label}              \n          /> */}\n           {multipleFile && \n          <TableContainer component={Paper}>\n              <Table aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>             \n                    <TableCell align=\"left\" colSpan={3}>                                                               \n                      <Button  color=\"primary\"  component=\"label\" >\n                      {label} <input type=\"file\" multiple={false} onChange={onFileChange}  id=\"raised-button-file\" style={{display: \"none\",}} />\n                      </Button> \n                    </TableCell>  \n                  </TableRow> \n                  <TableRow>       \n                    <TableCell align=\"left\">File Name</TableCell>\n                    <TableCell align=\"left\">Comment</TableCell>     \n                    <TableCell align=\"left\"></TableCell>   \n                  </TableRow>      \n                </TableHead>\n                <TableBody>\n                { field.value && (field.value as Attachment[]).map( (rr:Attachment, index:any) => (\n                    <TableRow key={index}>       \n                      <TableCell align=\"left\"> <a href=\"#\" onClick={ () => { download(rr.Id,  rr.FileName)} } >{rr.FileName}</a> </TableCell>\n                      <TableCell align=\"left\">\n                        <input type=\"text\" value={rr.Prop1}  onChange={ (e) => { prop1Change(e,index) } } /> \n                        <div> {rr.Action}</div>\n                      </TableCell>     \n                      {rr.Action != \"Delete\" && <TableCell align=\"left\"><a  href=\"#\" onClick={() => { deleteAttachment(rr) }} >Delete</a></TableCell>  }\n                    </TableRow>\n                    ))\n                }                      \n                </TableBody>\n              </Table>\n            </TableContainer>\n            }\n\n        </FormControl>              \n    );\n  };\n\nexport default MyAttachment;\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/MyCurrencyInput.tsx",["607","608","609"],"import React, { useEffect, useState } from \"react\";\nimport {  \n  useField,\n  FieldAttributes,  \n} from \"formik\";\n\nimport {        \n  FormControl,\n    InputAdornment,\n    InputLabel,\n    OutlinedInput,        \n  } from \"@material-ui/core\";\nimport _ from \"lodash\";\n\n\n\n\ntype CustomTxtProps = { CurrecySymbol?: string, label: string,  width?: string, onChange?:any  } & FieldAttributes<{}>;\n\nconst MyCurrencyInput: React.FC<CustomTxtProps> = ({ CurrecySymbol= \"$\", label, placeholder, type,required,autoComplete, autoFocus, width, onChange, ...props }) => {\n\n  const [field,meta , { setValue }] = useField<{}>(props);\n  const [text, setText] = useState(\"\");\n\n  const onTextChange = (event: any) => {    \n    formatNumber(event.target.value);        \n  }\n\n  const formatNumber = (val: string) => {\n\n    if(val){\n      val = val.toString();\n      val = val.replace(/\\,/g, '');\n      var num = Number(val);\n      if(_.isNaN(num)) return;\n      \n      setValue(num);\n      var parts = val.toString().split(\".\");    \n      parts[0] = parts[0].replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n      val =  parts.join(\".\");\n      setText(val); \n    }\n      \n  }\n  \n  useEffect(() => {    \n    formatNumber(field.value as any);   \n  },[]);\n    \n    \n    const errorText = meta.error && meta.touched ? meta.error : \"\";\n\n    return (     \n      <FormControl variant=\"outlined\" fullWidth style={{ marginTop : 10 , marginBottom : 10, width:width,  display: 'block', }} size=\"small\"  >\n        <InputLabel htmlFor=\"outlined-adornment-amount\">{label}</InputLabel>         \n          <OutlinedInput\n            id=\"outlined-adornment-amount\"\n            // {...field}     \n            value={text}       \n            onChange={onTextChange}\n            startAdornment={<InputAdornment position=\"start\">{CurrecySymbol}</InputAdornment>}\n            labelWidth={60}     \n            style={{  width:width }}   \n                \n          />\n      </FormControl>             \n    );        \n  };\n\nexport default MyCurrencyInput;\n\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/user/UserManager.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppConfig/AppConfig.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNotificationsMaster/AppNotificationsMaster.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppConfigType/AppConfigType.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppFlow/AppFlow.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppTableMaster/AppTableMaster.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/Theme.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/SystemConstants.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppColumnMaster/AppColumnMasterStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/Portal/Employee/Employee.ts",["610"],"import { Attachment, IAttachment } from \"../../app/common/form/MyAttachment\";\nimport { AppConfig, AppUser, AppUserRoleMaster, IAppConfig, IAppUser } from \"../Api/Api\";\n\nexport interface IEmployee {\n\tId: number\n\tTableItemId: number\n\tIsActive: boolean\n\tName: string\n\tDOB:Date\n\tCountry:IAppConfig[]\n\tPassport?: IAttachment[]\n\tSalary: number\n\tManager: IAppUser\n\tRoles: AppUserRoleMaster[]\n}\n\nexport class Employee implements IEmployee {\n\tId: number = 0;\n\tTableItemId: number = 0;\n\tIsActive: boolean = false;\n\tName: string= '';\n\tDOB:Date = new Date();\n\tCountry:IAppConfig[] = [];\n\tPassport?: Attachment[] = [];\n\tSalary: number = 0;\n\tManager: IAppUser = new AppUser();\n\tRoles: AppUserRoleMaster[] = [];\n\t\t\t\n  constructor(init?: IEmployee) {\n    Object.assign(this, init);\n  }\n}","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNitificationTemplate/AppNitificationTemplateStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNitificationTemplate/AppNitificationTemplate.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNotificationsMaster/AppNotificationsMasterStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserRoleMaster/AppUserRoleMasterStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNavigation/AppNavigationStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/UserSelect.tsx",["611","612"],"import React, { useContext, useEffect, useState } from \"react\";\nimport {  \n  useField,\n  FieldAttributes,\n  Field,  \n  \n} from \"formik\";\n\nimport FormControl from '@material-ui/core/FormControl';\nimport { ApiContext, AppUser  } from \"../../../Portal/Api/Api\";\nimport { Chip, TextField } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\n\ntype CustomProps = { multiple?:boolean, label: string, width?: string  } & FieldAttributes<{}>;\n\n\n\nconst UserSelect: React.FC<CustomProps> = ({ multiple=false, label, placeholder, type,required,autoComplete, autoFocus, width, ...props }) => {\n\n    const ApiStore = useContext(ApiContext);\n    const [field, , { setValue }] = useField<{}>(props);\n    const [val, setVal] =useState<any[]>();\n\n    useEffect(() => {\n      ApiStore.getUserList().then( res => {\n        //debugger;\n        if(field.value && (field.value as any).length > 0){\n          var roleArray = ApiStore.userFromArray(res, field.value as any);  \n          if(!multiple && roleArray.length>0){\n            setValue(roleArray[0]);\n          }\n          else{\n            setValue(roleArray);\n          }        \n        }\n        else{\n\n          setValue(new AppUser() );\n        }\n\n        setVal(res);        \n      }); \n    },[ ApiStore.getUserList]);\n    \n      \n    return ( \n            \n      <FormControl variant=\"outlined\"  size=\"small\" style={{ marginTop : 10 , marginBottom : 10, width:width, display: 'block' }}>\n        {val  &&\n        <Autocomplete id=\"UserAccessRoles\" className=\"customFieldMargin\" multiple={multiple}   \n            {...field}\n            size=\"small\"              \n            value={field.value as any}\n            options={val as any[]} \n            getOptionLabel={(option:any) => option.Username}                  \n            freeSolo\n            renderTags={(value, getTagProps) =>\n              value.map((option:any, index) => (\n                value  && <Chip variant=\"outlined\" label={option.Username} {...getTagProps({ index })} /> \n              ))\n            }\n            renderInput={(params) => (\n              <TextField {...params} variant=\"outlined\" label={label} placeholder={placeholder} fullWidth />\n            )}\n            \n            onChange={(event:any, newValue:any) => {\n              //debugger;\n              var unq = true;\n\n              if(multiple){\n                for(let i=0;i<newValue.length-1;i++){\n                  if( newValue[i].Id === newValue[newValue.length-1].Id){\n                    unq = false;\n                    break;\n                  }\n                }\n              }\n              \n              if(unq){\n                setValue(newValue);\n              }                                          \n            }}\n        />\n      }\n      </FormControl>\n    );\n  };\n\nexport default UserSelect;\n\n\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/app/common/form/RoleSelect.tsx",["613","614"],"import React, { useContext, useEffect, useState } from \"react\";\nimport {  \n  useField,\n  FieldAttributes,\n  Field,  \n  \n} from \"formik\";\n\nimport FormControl from '@material-ui/core/FormControl';\nimport { ApiContext, AppUserRoleMaster } from \"../../../Portal/Api/Api\";\nimport { Chip, TextField } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\n\ntype CustomProps = { multiple?:boolean, label: string, width?: string  } & FieldAttributes<{}>;\n\n\n\nconst RoleSelect: React.FC<CustomProps> = ({ multiple=false, label, placeholder, type,required,autoComplete, autoFocus, width, ...props }) => {\n\n    const ApiStore = useContext(ApiContext);\n    const [field, , { setValue }] = useField<{}>(props);\n    const [val, setVal] =useState<any>();\n\n\n    useEffect(() => {\n      ApiStore.getRoleList().then( res => {\n            \n        //debugger;\n        if(field.value && (field.value as any).length > 0){\n          var roleArray = ApiStore.rolesFromArray(res, field.value as any);  \n          if(!multiple && roleArray.length>0){\n            setValue(roleArray[0]);\n          }\n          else{\n            setValue(roleArray);\n          }        \n        }\n        else{\n          var Roles: AppUserRoleMaster[] = [];\n          setValue( Roles as any );\n        }\n        \n        setVal(res);\n\n      });  \n    },[ ApiStore.getRoleList]);\n     \n      \n    return ( \n            \n      <FormControl variant=\"outlined\"  size=\"small\" style={{ marginTop : 10 , marginBottom : 10, width:width, display: 'block' }}>\n        { val &&\n        <Autocomplete id=\"UserAccessRoles\" className=\"customFieldMargin\" multiple={multiple}   \n          \n            {...field}\n            size=\"small\"              \n            value={field.value as any}\n            options={val as any[]} \n            getOptionLabel={(option:any) => option.Name}                  \n            freeSolo\n            renderTags={(value, getTagProps) =>\n              value.map((option:any, index) => (\n                value  && <Chip variant=\"outlined\" label={option.Name} {...getTagProps({ index })} /> \n              ))\n            }\n            renderInput={(params) => (\n              <TextField {...params} variant=\"outlined\" label={label} placeholder={placeholder} fullWidth />\n            )}\n            \n            onChange={(event:any, newValue:any) => {\n              //debugger;\n              var unq = true;\n\n              if(multiple){\n                for(let i=0;i<newValue.length-1;i++){\n                  if( newValue[i].Id === newValue[newValue.length-1].Id){\n                    unq = false;\n                    break;\n                  }\n                }\n              }\n              \n              if(unq){\n                setValue(newValue);\n              }                                          \n            }}\n        />\n          }\n      </FormControl>\n    );\n  };\n\nexport default RoleSelect;\n\n\n","/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppNavigation/AppNavigation.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppAttachment/AppAttachmentStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppAttachment/AppAttachment.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppApi/AppApi.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppApi/AppApiStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppHistory/AppHistoryStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppHistory/AppHistory.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppData/AppDataStore.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppData/AppData.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserRoleMaster/AppUserRoleMaster.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserRole/AppUserRole.ts",[],"/Users/shaijukumarkappillilbalakrishnan/Git/AppWeb/client-app/src/features/AppUserRole/AppUserRoleStore.ts",[],{"ruleId":"615","replacedBy":"616"},{"ruleId":"617","replacedBy":"618"},{"ruleId":"619","severity":1,"message":"620","line":5,"column":20,"nodeType":"621","messageId":"622","endLine":5,"endColumn":25},{"ruleId":"619","severity":1,"message":"623","line":57,"column":11,"nodeType":"621","messageId":"622","endLine":57,"endColumn":16},{"ruleId":"619","severity":1,"message":"624","line":96,"column":19,"nodeType":"621","messageId":"622","endLine":96,"endColumn":30},{"ruleId":"625","severity":1,"message":"626","line":97,"column":29,"nodeType":"627","messageId":"628","endLine":97,"endColumn":31},{"ruleId":"625","severity":1,"message":"626","line":103,"column":34,"nodeType":"627","messageId":"628","endLine":103,"endColumn":36},{"ruleId":"625","severity":1,"message":"626","line":118,"column":34,"nodeType":"627","messageId":"628","endLine":118,"endColumn":36},{"ruleId":"625","severity":1,"message":"626","line":148,"column":34,"nodeType":"627","messageId":"628","endLine":148,"endColumn":36},{"ruleId":"625","severity":1,"message":"626","line":166,"column":34,"nodeType":"627","messageId":"628","endLine":166,"endColumn":36},{"ruleId":"625","severity":1,"message":"626","line":189,"column":34,"nodeType":"627","messageId":"628","endLine":189,"endColumn":36},{"ruleId":"625","severity":1,"message":"626","line":344,"column":40,"nodeType":"627","messageId":"628","endLine":344,"endColumn":42},{"ruleId":"629","severity":1,"message":"630","line":63,"column":6,"nodeType":"631","endLine":63,"endColumn":119,"suggestions":"632"},{"ruleId":"619","severity":1,"message":"633","line":28,"column":12,"nodeType":"621","messageId":"622","endLine":28,"endColumn":17},{"ruleId":"619","severity":1,"message":"634","line":28,"column":19,"nodeType":"621","messageId":"622","endLine":28,"endColumn":27},{"ruleId":"619","severity":1,"message":"633","line":24,"column":12,"nodeType":"621","messageId":"622","endLine":24,"endColumn":17},{"ruleId":"619","severity":1,"message":"634","line":24,"column":19,"nodeType":"621","messageId":"622","endLine":24,"endColumn":27},{"ruleId":"619","severity":1,"message":"633","line":25,"column":12,"nodeType":"621","messageId":"622","endLine":25,"endColumn":17},{"ruleId":"619","severity":1,"message":"634","line":25,"column":19,"nodeType":"621","messageId":"622","endLine":25,"endColumn":27},{"ruleId":"635","severity":1,"message":"636","line":176,"column":19,"nodeType":"637","messageId":"638","endLine":176,"endColumn":59},{"ruleId":"639","severity":1,"message":"640","line":284,"column":38,"nodeType":"641","endLine":284,"endColumn":118},{"ruleId":"639","severity":1,"message":"640","line":288,"column":37,"nodeType":"641","endLine":288,"endColumn":49},{"ruleId":"639","severity":1,"message":"640","line":55,"column":23,"nodeType":"641","endLine":55,"endColumn":88},{"ruleId":"619","severity":1,"message":"633","line":29,"column":12,"nodeType":"621","messageId":"622","endLine":29,"endColumn":17},{"ruleId":"619","severity":1,"message":"634","line":29,"column":19,"nodeType":"621","messageId":"622","endLine":29,"endColumn":27},{"ruleId":"642","severity":1,"message":"643","line":49,"column":39,"nodeType":"637","messageId":"644","endLine":49,"endColumn":41},{"ruleId":"629","severity":1,"message":"645","line":56,"column":8,"nodeType":"631","endLine":56,"endColumn":76,"suggestions":"646"},{"ruleId":"619","severity":1,"message":"647","line":2,"column":42,"nodeType":"621","messageId":"622","endLine":2,"endColumn":53},{"ruleId":"619","severity":1,"message":"648","line":2,"column":71,"nodeType":"621","messageId":"622","endLine":2,"endColumn":80},{"ruleId":"619","severity":1,"message":"649","line":2,"column":82,"nodeType":"621","messageId":"622","endLine":2,"endColumn":92},{"ruleId":"619","severity":1,"message":"650","line":27,"column":12,"nodeType":"621","messageId":"622","endLine":27,"endColumn":24},{"ruleId":"619","severity":1,"message":"651","line":27,"column":26,"nodeType":"621","messageId":"622","endLine":27,"endColumn":42},{"ruleId":"619","severity":1,"message":"652","line":37,"column":12,"nodeType":"621","messageId":"622","endLine":37,"endColumn":20},{"ruleId":"619","severity":1,"message":"653","line":39,"column":12,"nodeType":"621","messageId":"622","endLine":39,"endColumn":17},{"ruleId":"654","severity":1,"message":"655","line":73,"column":7,"nodeType":"631","messageId":"656","endLine":73,"endColumn":157},{"ruleId":"619","severity":1,"message":"657","line":114,"column":11,"nodeType":"621","messageId":"622","endLine":114,"endColumn":23},{"ruleId":"619","severity":1,"message":"658","line":8,"column":10,"nodeType":"621","messageId":"622","endLine":8,"endColumn":22},{"ruleId":"619","severity":1,"message":"652","line":18,"column":10,"nodeType":"621","messageId":"622","endLine":18,"endColumn":18},{"ruleId":"619","severity":1,"message":"658","line":7,"column":10,"nodeType":"621","messageId":"622","endLine":7,"endColumn":22},{"ruleId":"619","severity":1,"message":"658","line":10,"column":10,"nodeType":"621","messageId":"622","endLine":10,"endColumn":22},{"ruleId":"654","severity":1,"message":"655","line":61,"column":7,"nodeType":"631","messageId":"656","endLine":61,"endColumn":133},{"ruleId":"619","severity":1,"message":"658","line":7,"column":10,"nodeType":"621","messageId":"622","endLine":7,"endColumn":22},{"ruleId":"619","severity":1,"message":"659","line":7,"column":36,"nodeType":"621","messageId":"622","endLine":7,"endColumn":48},{"ruleId":"619","severity":1,"message":"660","line":84,"column":21,"nodeType":"621","messageId":"622","endLine":84,"endColumn":34},{"ruleId":"619","severity":1,"message":"661","line":158,"column":11,"nodeType":"621","messageId":"622","endLine":158,"endColumn":21},{"ruleId":"619","severity":1,"message":"662","line":185,"column":29,"nodeType":"621","messageId":"622","endLine":185,"endColumn":35},{"ruleId":"625","severity":1,"message":"626","line":439,"column":32,"nodeType":"627","messageId":"628","endLine":439,"endColumn":34},{"ruleId":"625","severity":1,"message":"626","line":28,"column":14,"nodeType":"627","messageId":"628","endLine":28,"endColumn":16},{"ruleId":"629","severity":1,"message":"663","line":34,"column":5,"nodeType":"631","endLine":34,"endColumn":7,"suggestions":"664"},{"ruleId":"619","severity":1,"message":"665","line":2,"column":10,"nodeType":"621","messageId":"622","endLine":2,"endColumn":19},{"ruleId":"619","severity":1,"message":"649","line":3,"column":15,"nodeType":"621","messageId":"622","endLine":3,"endColumn":25},{"ruleId":"619","severity":1,"message":"666","line":2,"column":40,"nodeType":"621","messageId":"622","endLine":2,"endColumn":48},{"ruleId":"619","severity":1,"message":"667","line":15,"column":27,"nodeType":"621","messageId":"622","endLine":15,"endColumn":42},{"ruleId":"619","severity":1,"message":"668","line":18,"column":10,"nodeType":"621","messageId":"622","endLine":18,"endColumn":23},{"ruleId":"619","severity":1,"message":"669","line":18,"column":25,"nodeType":"621","messageId":"622","endLine":18,"endColumn":39},{"ruleId":"670","severity":1,"message":"671","line":120,"column":20,"nodeType":"621","messageId":"672","endLine":120,"endColumn":26},{"ruleId":"670","severity":1,"message":"671","line":125,"column":20,"nodeType":"621","messageId":"672","endLine":125,"endColumn":26},{"ruleId":"625","severity":1,"message":"626","line":130,"column":32,"nodeType":"627","messageId":"628","endLine":130,"endColumn":34},{"ruleId":"625","severity":1,"message":"626","line":182,"column":36,"nodeType":"627","messageId":"628","endLine":182,"endColumn":38},{"ruleId":"629","severity":1,"message":"673","line":22,"column":7,"nodeType":"631","endLine":22,"endColumn":15,"suggestions":"674"},{"ruleId":"629","severity":1,"message":"675","line":44,"column":7,"nodeType":"631","endLine":44,"endColumn":47,"suggestions":"676"},{"ruleId":"619","severity":1,"message":"677","line":2,"column":17,"nodeType":"621","messageId":"622","endLine":2,"endColumn":26},{"ruleId":"619","severity":1,"message":"678","line":13,"column":5,"nodeType":"621","messageId":"622","endLine":13,"endColumn":15},{"ruleId":"619","severity":1,"message":"679","line":14,"column":5,"nodeType":"621","messageId":"622","endLine":14,"endColumn":19},{"ruleId":"619","severity":1,"message":"680","line":16,"column":5,"nodeType":"621","messageId":"622","endLine":16,"endColumn":23},{"ruleId":"619","severity":1,"message":"681","line":25,"column":18,"nodeType":"621","messageId":"622","endLine":25,"endColumn":22},{"ruleId":"619","severity":1,"message":"682","line":26,"column":12,"nodeType":"621","messageId":"622","endLine":26,"endColumn":15},{"ruleId":"619","severity":1,"message":"683","line":26,"column":17,"nodeType":"621","messageId":"622","endLine":26,"endColumn":23},{"ruleId":"619","severity":1,"message":"650","line":33,"column":12,"nodeType":"621","messageId":"622","endLine":33,"endColumn":24},{"ruleId":"619","severity":1,"message":"651","line":33,"column":26,"nodeType":"621","messageId":"622","endLine":33,"endColumn":42},{"ruleId":"619","severity":1,"message":"684","line":12,"column":8,"nodeType":"621","messageId":"622","endLine":12,"endColumn":21},{"ruleId":"619","severity":1,"message":"685","line":13,"column":23,"nodeType":"621","messageId":"622","endLine":13,"endColumn":34},{"ruleId":"619","severity":1,"message":"686","line":13,"column":36,"nodeType":"621","messageId":"622","endLine":13,"endColumn":45},{"ruleId":"619","severity":1,"message":"687","line":13,"column":47,"nodeType":"621","messageId":"622","endLine":13,"endColumn":51},{"ruleId":"619","severity":1,"message":"688","line":13,"column":53,"nodeType":"621","messageId":"622","endLine":13,"endColumn":67},{"ruleId":"619","severity":1,"message":"648","line":13,"column":148,"nodeType":"621","messageId":"622","endLine":13,"endColumn":157},{"ruleId":"619","severity":1,"message":"689","line":14,"column":8,"nodeType":"621","messageId":"622","endLine":14,"endColumn":19},{"ruleId":"619","severity":1,"message":"681","line":87,"column":19,"nodeType":"621","messageId":"622","endLine":87,"endColumn":23},{"ruleId":"619","severity":1,"message":"682","line":88,"column":12,"nodeType":"621","messageId":"622","endLine":88,"endColumn":15},{"ruleId":"619","severity":1,"message":"683","line":88,"column":17,"nodeType":"621","messageId":"622","endLine":88,"endColumn":23},{"ruleId":"619","severity":1,"message":"690","line":90,"column":12,"nodeType":"621","messageId":"622","endLine":90,"endColumn":26},{"ruleId":"625","severity":1,"message":"626","line":132,"column":16,"nodeType":"627","messageId":"628","endLine":132,"endColumn":18},{"ruleId":"625","severity":1,"message":"691","line":133,"column":21,"nodeType":"627","messageId":"628","endLine":133,"endColumn":23},{"ruleId":"625","severity":1,"message":"691","line":187,"column":21,"nodeType":"627","messageId":"628","endLine":187,"endColumn":23},{"ruleId":"670","severity":1,"message":"692","line":196,"column":15,"nodeType":"621","messageId":"672","endLine":196,"endColumn":16},{"ruleId":"635","severity":1,"message":"636","line":208,"column":21,"nodeType":"637","messageId":"638","endLine":208,"endColumn":61},{"ruleId":"625","severity":1,"message":"691","line":228,"column":69,"nodeType":"627","messageId":"628","endLine":228,"endColumn":71},{"ruleId":"625","severity":1,"message":"691","line":236,"column":32,"nodeType":"627","messageId":"628","endLine":236,"endColumn":34},{"ruleId":"639","severity":1,"message":"640","line":296,"column":48,"nodeType":"641","endLine":296,"endColumn":112},{"ruleId":"625","severity":1,"message":"691","line":301,"column":34,"nodeType":"627","messageId":"628","endLine":301,"endColumn":36},{"ruleId":"639","severity":1,"message":"640","line":301,"column":73,"nodeType":"641","endLine":301,"endColumn":128},{"ruleId":"693","severity":1,"message":"694","line":33,"column":26,"nodeType":"695","messageId":"696","endLine":33,"endColumn":27,"suggestions":"697"},{"ruleId":"629","severity":1,"message":"698","line":48,"column":5,"nodeType":"631","endLine":48,"endColumn":7,"suggestions":"699"},{"ruleId":"619","severity":1,"message":"700","line":51,"column":11,"nodeType":"621","messageId":"622","endLine":51,"endColumn":20},{"ruleId":"619","severity":1,"message":"701","line":2,"column":10,"nodeType":"621","messageId":"622","endLine":2,"endColumn":19},{"ruleId":"619","severity":1,"message":"702","line":5,"column":3,"nodeType":"621","messageId":"622","endLine":5,"endColumn":8},{"ruleId":"629","severity":1,"message":"703","line":43,"column":7,"nodeType":"631","endLine":43,"endColumn":30,"suggestions":"704"},{"ruleId":"619","severity":1,"message":"702","line":5,"column":3,"nodeType":"621","messageId":"622","endLine":5,"endColumn":8},{"ruleId":"629","severity":1,"message":"703","line":46,"column":7,"nodeType":"631","endLine":46,"endColumn":30,"suggestions":"705"},"no-native-reassign",["706"],"no-negated-in-lhs",["707"],"@typescript-eslint/no-unused-vars","'parse' is defined but never used.","Identifier","unusedVar","'delay' is assigned a value but never used.","'json_object' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'error'. Either include it or remove the dependency array. You can also do a functional update 'setError(e => ...)' if you only need 'error' in the 'setError' call.","ArrayExpression",["708"],"'error' is assigned a value but never used.","'setError' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'attch'.","ArrowFunctionExpression","unsafeRefs","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a return value from arrow function.","expectedInside","React Hook useEffect has missing dependencies: 'AppConfigTypeStore' and 'types'. Either include them or remove the dependency array. You can also do a functional update 'setTypes(t => ...)' if you only need 'types' in the 'setTypes' call.",["709"],"'FormControl' is defined but never used.","'TextField' is defined but never used.","'Typography' is defined but never used.","'selectedDate' is assigned a value but never used.","'handleDateChange' is assigned a value but never used.","'roleList' is assigned a value but never used.","'roles' is assigned a value but never used.","no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","'onTextChange' is assigned a value but never used.","'ActionConfig' is defined but never used.","'AppApiAction' is defined but never used.","'XL_row_object' is assigned a value but never used.","'DataUpload' is assigned a value but never used.","'itemId' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'field.value', 'setValue', and 'type'. Either include them or remove the dependency array.",["710"],"'useParams' is defined but never used.","'useState' is defined but never used.","'AppColumnMaster' is defined but never used.","'AppConfigType' is defined but never used.","'IAppConfigType' is defined but never used.","@typescript-eslint/no-redeclare","'wscols' is already defined.","redeclared","React Hook useEffect has a missing dependency: 'field.value'. Either include it or remove the dependency array.",["711"],"React Hook useEffect has missing dependencies: 'ApiStore', 'configType', 'field.value', 'multiple', and 'setValue'. Either include them or remove the dependency array.",["712"],"'useEffect' is defined but never used.","'TimePicker' is defined but never used.","'DateTimePicker' is defined but never used.","'KeyboardDatePicker' is defined but never used.","'meta' is assigned a value but never used.","'val' is assigned a value but never used.","'setVal' is assigned a value but never used.","'MaterialTable' is defined but never used.","'ButtonGroup' is defined but never used.","'Container' is defined but never used.","'Grid' is defined but never used.","'LinearProgress' is defined but never used.","'TableButton' is defined but never used.","'attachFileList' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'i' is already defined.","no-useless-escape","Unnecessary escape character: \\,.","Literal","unnecessaryEscape",["713","714"],"React Hook useEffect has missing dependencies: 'field.value' and 'formatNumber'. Either include them or remove the dependency array.",["715"],"'errorText' is assigned a value but never used.","'AppConfig' is defined but never used.","'Field' is defined but never used.","React Hook useEffect has missing dependencies: 'ApiStore', 'field.value', 'multiple', and 'setValue'. Either include them or remove the dependency array.",["716"],["717"],"no-global-assign","no-unsafe-negation",{"desc":"718","fix":"719"},{"desc":"720","fix":"721"},{"desc":"722","fix":"723"},{"desc":"724","fix":"725"},{"desc":"726","fix":"727"},{"messageId":"728","fix":"729","desc":"730"},{"messageId":"731","fix":"732","desc":"733"},{"desc":"734","fix":"735"},{"desc":"736","fix":"737"},{"desc":"738","fix":"739"},"Update the dependencies array to be: [id, AppTableMasterStore, AppTableMasterStore.loadItem, AppColumnMasterStore.getColumnList, AppColumnMasterStore, error]",{"range":"740","text":"741"},"Update the dependencies array to be: [AppConfigStore, AppConfigStore.getList, AppConfigTypeStore, AppConfigTypeStore.getList, types]",{"range":"742","text":"743"},"Update the dependencies array to be: [field.value, setValue, type]",{"range":"744","text":"745"},"Update the dependencies array to be: [field.value, setVal]",{"range":"746","text":"747"},"Update the dependencies array to be: [ApiStore, ApiStore.getConfigList, configType, field.value, multiple, setConfigList, setValue]",{"range":"748","text":"749"},"removeEscape",{"range":"750","text":"751"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"752","text":"753"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [field.value, formatNumber]",{"range":"754","text":"755"},"Update the dependencies array to be: [ApiStore, ApiStore.getUserList, field.value, multiple, setValue]",{"range":"756","text":"757"},"Update the dependencies array to be: [ApiStore, ApiStore.getRoleList, field.value, multiple, setValue]",{"range":"758","text":"759"},[2370,2483],"[id, AppTableMasterStore, AppTableMasterStore.loadItem, AppColumnMasterStore.getColumnList, AppColumnMasterStore, error]",[1962,2030],"[AppConfigStore, AppConfigStore.getList, AppConfigTypeStore, AppConfigTypeStore.getList, types]",[833,835],"[field.value, setValue, type]",[638,646],"[field.value, setVal]",[1359,1399],"[ApiStore, ApiStore.getConfigList, configType, field.value, multiple, setConfigList, setValue]",[860,861],"",[860,860],"\\",[1213,1215],"[field.value, formatNumber]",[1258,1281],"[ApiStore, ApiStore.getUserList, field.value, multiple, setValue]",[1328,1351],"[ApiStore, ApiStore.getRoleList, field.value, multiple, setValue]"]