[{"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\index.tsx":"1","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\reportWebVitals.ts":"2","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\layout\\ScrollToTop.tsx":"3","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\layout\\App.tsx":"4","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\user\\UserStore.ts":"5","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\PageTagStore.ts":"6","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\PageTagList.tsx":"7","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\user\\Login.tsx":"8","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\PageTagEdit.tsx":"9","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\nav\\NavBar.tsx":"10","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\home\\HomePage.tsx":"11","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\ToDo\\ToDoEdit.tsx":"12","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\ToDo\\ToDoList.tsx":"13","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\SitePage\\SitePageEdit.tsx":"14","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\SitePage\\SitePageList.tsx":"15","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryEdit.tsx":"16","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryList.tsx":"17","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\user\\User.ts":"18","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\PageTag.ts":"19","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\api\\agent.ts":"20","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\ToDo\\ToDo.ts":"21","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\ToDo\\ToDoStore.ts":"22","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\SitePage\\SitePageStore.ts":"23","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\SitePage\\SitePage.ts":"24","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryStore.ts":"25","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategory.ts":"26","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\user\\CurrentUserNav.tsx":"27","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\TagChip.tsx":"28","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\common\\form\\TestABCD.tsx":"29","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\common\\form\\PageCategorySelect.tsx":"30","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\common\\form\\MyCustomTxt.tsx":"31","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\common\\common\\PageCategoryItem.tsx":"32","C:\\Shaiju\\wayooz\\client-app\\src\\index.tsx":"33","C:\\Shaiju\\wayooz\\client-app\\src\\reportWebVitals.ts":"34","C:\\Shaiju\\wayooz\\client-app\\src\\app\\layout\\App.tsx":"35","C:\\Shaiju\\wayooz\\client-app\\src\\app\\layout\\ScrollToTop.tsx":"36","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserStore.ts":"37","C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageTag\\PageTagStore.ts":"38","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\Login.tsx":"39","C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageTag\\PageTagList.tsx":"40","C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageTag\\PageTagEdit.tsx":"41","C:\\Shaiju\\wayooz\\client-app\\src\\features\\home\\HomePage.tsx":"42","C:\\Shaiju\\wayooz\\client-app\\src\\features\\nav\\NavBar.tsx":"43","C:\\Shaiju\\wayooz\\client-app\\src\\features\\ToDo\\ToDoEdit.tsx":"44","C:\\Shaiju\\wayooz\\client-app\\src\\features\\ToDo\\ToDoList.tsx":"45","C:\\Shaiju\\wayooz\\client-app\\src\\features\\SitePage\\SitePageList.tsx":"46","C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryEdit.tsx":"47","C:\\Shaiju\\wayooz\\client-app\\src\\features\\SitePage\\SitePageEdit.tsx":"48","C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryList.tsx":"49","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\User.ts":"50","C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageTag\\PageTag.ts":"51","C:\\Shaiju\\wayooz\\client-app\\src\\app\\api\\agent.ts":"52","C:\\Shaiju\\wayooz\\client-app\\src\\features\\ToDo\\ToDo.ts":"53","C:\\Shaiju\\wayooz\\client-app\\src\\features\\ToDo\\ToDoStore.ts":"54","C:\\Shaiju\\wayooz\\client-app\\src\\features\\SitePage\\SitePageStore.ts":"55","C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryStore.ts":"56","C:\\Shaiju\\wayooz\\client-app\\src\\features\\SitePage\\SitePage.ts":"57","C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategory.ts":"58","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\CurrentUserNav.tsx":"59","C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageTag\\TagChip.tsx":"60","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\TestABCD.tsx":"61","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\PageCategorySelect.tsx":"62","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\MyCustomTxt.tsx":"63","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\common\\PageCategoryItem.tsx":"64","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserList.tsx":"65","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserManagerStore.ts":"66","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserManager.ts":"67","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserEdit.tsx":"68","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRole\\AppUserRoleList.tsx":"69","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRole\\AppUserRoleEdit.tsx":"70","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRole\\AppUserRoleStore.ts":"71","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRole\\AppUserRole.ts":"72","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\AppTableMasterList.tsx":"73","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\AppTableMasterEdit.tsx":"74","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\AppTableMasterStore.ts":"75","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\AppTableMaster.ts":"76","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumnMasterList.tsx":"77","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumnMasterEdit.tsx":"78","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumnMasterStore.ts":"79","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumnMaster.ts":"80","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRoleMaster\\AppUserRoleMasterList.tsx":"81","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRoleMaster\\AppUserRoleMasterEdit.tsx":"82","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRoleMaster\\AppUserRoleMasterStore.ts":"83","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRoleMaster\\AppUserRoleMaster.ts":"84","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserAccess\\AppUserAccessList.tsx":"85","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserAccess\\AppUserAccessEdit.tsx":"86","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserAccess\\AppUserAccessStore.ts":"87","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserAccess\\AppUserAccess.ts":"88","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumn.tsx":"89","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\SystemConstants.ts":"90","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppData\\AppDataEdit.tsx":"91","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppData\\AppDataList.tsx":"92","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppData\\AppData.ts":"93","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppData\\AppDataStore.ts":"94","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppStatusList\\AppStatusListList.tsx":"95","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppStatusList\\AppStatusListEdit.tsx":"96","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppStatusList\\AppStatusList.ts":"97","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppStatusList\\AppStatusListStore.ts":"98","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppHistory\\AppHistoryList.tsx":"99","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppHistory\\AppHistoryEdit.tsx":"100","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppHistory\\AppHistoryStore.ts":"101","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppHistory\\AppHistory.ts":"102","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfigType\\AppConfigTypeList.tsx":"103","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfigType\\AppConfigTypeEdit.tsx":"104","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfigType\\AppConfigTypeStore.ts":"105","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfigType\\AppConfigType.ts":"106","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfig\\AppConfigList.tsx":"107","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfig\\AppConfigStore.ts":"108","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfig\\AppConfig.ts":"109","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfig\\AppConfigEdit.tsx":"110","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAction\\AppActionEdit.tsx":"111","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAction\\AppActionList.tsx":"112","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAction\\AppAction.ts":"113","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAction\\AppActionStore.ts":"114","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppFlow\\AppFlowEdit.tsx":"115","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppFlow\\AppFlowList.tsx":"116","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppFlow\\AppFlowStore.ts":"117","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppFlow\\AppFlow.ts":"118","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppApi\\AppApiList.tsx":"119","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppApi\\AppApiEdit.tsx":"120","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppApi\\AppApi.ts":"121","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppApi\\AppApiStore.ts":"122","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\MyDropDown.tsx":"123","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\MyCheckBox.tsx":"124","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAttachment\\AppAttachmentList.tsx":"125","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAttachment\\AppAttachmentEdit.tsx":"126","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAttachment\\AppAttachmentStore.ts":"127","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAttachment\\AppAttachment.ts":"128","C:\\Shaiju\\wayooz\\client-app\\src\\features\\nav\\listItems.tsx":"129","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNavigation\\AppNavigationList.tsx":"130","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNavigation\\AppNavigationEdit.tsx":"131","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNavigation\\AppNavigationStore.ts":"132","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNavigation\\AppNavigation.ts":"133"},{"size":766,"mtime":1613232574000,"results":"134","hashOfConfig":"135"},{"size":425,"mtime":499202100000,"results":"136","hashOfConfig":"135"},{"size":311,"mtime":1612453058000,"results":"137","hashOfConfig":"135"},{"size":2565,"mtime":1617510382000,"results":"138","hashOfConfig":"135"},{"size":1858,"mtime":1613238916000,"results":"139","hashOfConfig":"135"},{"size":2695,"mtime":1614453736000,"results":"140","hashOfConfig":"135"},{"size":2759,"mtime":1613690668000,"results":"141","hashOfConfig":"135"},{"size":3164,"mtime":1613232614000,"results":"142","hashOfConfig":"135"},{"size":3245,"mtime":1614208660000,"results":"143","hashOfConfig":"135"},{"size":2626,"mtime":1617564034000,"results":"144","hashOfConfig":"135"},{"size":1119,"mtime":1614644996000,"results":"145","hashOfConfig":"135"},{"size":3210,"mtime":1613233048000,"results":"146","hashOfConfig":"135"},{"size":2460,"mtime":1614639548000,"results":"147","hashOfConfig":"135"},{"size":7790,"mtime":1620315798000,"results":"148","hashOfConfig":"135"},{"size":2713,"mtime":1614562032000,"results":"149","hashOfConfig":"135"},{"size":5262,"mtime":1617579894000,"results":"150","hashOfConfig":"135"},{"size":2717,"mtime":1617560276000,"results":"151","hashOfConfig":"135"},{"size":493,"mtime":1612942978000,"results":"152","hashOfConfig":"135"},{"size":251,"mtime":1613690534000,"results":"153","hashOfConfig":"135"},{"size":1501,"mtime":1613238564000,"results":"154","hashOfConfig":"135"},{"size":225,"mtime":1613066634000,"results":"155","hashOfConfig":"135"},{"size":2959,"mtime":1613240398000,"results":"156","hashOfConfig":"135"},{"size":2539,"mtime":1613245984000,"results":"157","hashOfConfig":"135"},{"size":530,"mtime":1617565020000,"results":"158","hashOfConfig":"135"},{"size":2635,"mtime":1617510488000,"results":"159","hashOfConfig":"135"},{"size":411,"mtime":1617483040000,"results":"160","hashOfConfig":"135"},{"size":821,"mtime":1613232684000,"results":"161","hashOfConfig":"135"},{"size":635,"mtime":1614455866000,"results":"162","hashOfConfig":"135"},{"size":483,"mtime":1614648878000,"results":"163","hashOfConfig":"135"},{"size":1481,"mtime":1617566328000,"results":"164","hashOfConfig":"135"},{"size":1034,"mtime":1617588490000,"results":"165","hashOfConfig":"135"},{"size":947,"mtime":1617561322000,"results":"166","hashOfConfig":"135"},{"size":765,"mtime":1625059577496,"results":"167","hashOfConfig":"168"},{"size":425,"mtime":499202100000,"results":"169","hashOfConfig":"168"},{"size":12167,"mtime":1625066789311,"results":"170","hashOfConfig":"168"},{"size":311,"mtime":1612453058000,"results":"171","hashOfConfig":"168"},{"size":2201,"mtime":1620740255212,"results":"172","hashOfConfig":"168"},{"size":2695,"mtime":1614453736000,"results":"173","hashOfConfig":"168"},{"size":3163,"mtime":1622621679202,"results":"174","hashOfConfig":"168"},{"size":2759,"mtime":1613690668000,"results":"175","hashOfConfig":"168"},{"size":3245,"mtime":1614208660000,"results":"176","hashOfConfig":"168"},{"size":1119,"mtime":1614644996000,"results":"177","hashOfConfig":"168"},{"size":4782,"mtime":1625059484734,"results":"178","hashOfConfig":"168"},{"size":3317,"mtime":1621280382009,"results":"179","hashOfConfig":"168"},{"size":2460,"mtime":1614639548000,"results":"180","hashOfConfig":"168"},{"size":2713,"mtime":1614562032000,"results":"181","hashOfConfig":"168"},{"size":5262,"mtime":1617579894000,"results":"182","hashOfConfig":"168"},{"size":7562,"mtime":1623596617437,"results":"183","hashOfConfig":"168"},{"size":2717,"mtime":1617560276000,"results":"184","hashOfConfig":"168"},{"size":727,"mtime":1620915237107,"results":"185","hashOfConfig":"168"},{"size":251,"mtime":1613690534000,"results":"186","hashOfConfig":"168"},{"size":2432,"mtime":1624595363041,"results":"187","hashOfConfig":"168"},{"size":225,"mtime":1613066634000,"results":"188","hashOfConfig":"168"},{"size":2959,"mtime":1613240398000,"results":"189","hashOfConfig":"168"},{"size":2539,"mtime":1613245984000,"results":"190","hashOfConfig":"168"},{"size":2635,"mtime":1617510488000,"results":"191","hashOfConfig":"168"},{"size":531,"mtime":1623596821380,"results":"192","hashOfConfig":"168"},{"size":411,"mtime":1617483040000,"results":"193","hashOfConfig":"168"},{"size":821,"mtime":1613232684000,"results":"194","hashOfConfig":"168"},{"size":635,"mtime":1614455866000,"results":"195","hashOfConfig":"168"},{"size":483,"mtime":1614648878000,"results":"196","hashOfConfig":"168"},{"size":1481,"mtime":1617566328000,"results":"197","hashOfConfig":"168"},{"size":1156,"mtime":1621144533169,"results":"198","hashOfConfig":"168"},{"size":947,"mtime":1617561322000,"results":"199","hashOfConfig":"168"},{"size":2920,"mtime":1621347260633,"results":"200","hashOfConfig":"168"},{"size":2766,"mtime":1620888713161,"results":"201","hashOfConfig":"168"},{"size":452,"mtime":1620915277519,"results":"202","hashOfConfig":"168"},{"size":4747,"mtime":1620919171652,"results":"203","hashOfConfig":"168"},{"size":2991,"mtime":1621409514560,"results":"204","hashOfConfig":"168"},{"size":5619,"mtime":1622615056880,"results":"205","hashOfConfig":"168"},{"size":3311,"mtime":1622615012872,"results":"206","hashOfConfig":"168"},{"size":294,"mtime":1622617795721,"results":"207","hashOfConfig":"168"},{"size":2668,"mtime":1621919676906,"results":"208","hashOfConfig":"168"},{"size":8376,"mtime":1624976973597,"results":"209","hashOfConfig":"168"},{"size":2692,"mtime":1622644511705,"results":"210","hashOfConfig":"168"},{"size":290,"mtime":1622953435901,"results":"211","hashOfConfig":"168"},{"size":2648,"mtime":1621340044682,"results":"212","hashOfConfig":"168"},{"size":4429,"mtime":1622617431047,"results":"213","hashOfConfig":"168"},{"size":3312,"mtime":1622617465227,"results":"214","hashOfConfig":"168"},{"size":512,"mtime":1624095490511,"results":"215","hashOfConfig":"168"},{"size":2764,"mtime":1623556006690,"results":"216","hashOfConfig":"168"},{"size":6927,"mtime":1622617810276,"results":"217","hashOfConfig":"168"},{"size":2727,"mtime":1622617709249,"results":"218","hashOfConfig":"168"},{"size":253,"mtime":1622617698786,"results":"219","hashOfConfig":"168"},{"size":2715,"mtime":1621339043459,"results":"220","hashOfConfig":"168"},{"size":4314,"mtime":1622617658872,"results":"221","hashOfConfig":"168"},{"size":2643,"mtime":1622617663487,"results":"222","hashOfConfig":"168"},{"size":335,"mtime":1622617616547,"results":"223","hashOfConfig":"168"},{"size":6247,"mtime":1624102087783,"results":"224","hashOfConfig":"168"},{"size":958,"mtime":1624773904565,"results":"225","hashOfConfig":"168"},{"size":3230,"mtime":1622034130541,"results":"226","hashOfConfig":"168"},{"size":2441,"mtime":1622034130558,"results":"227","hashOfConfig":"168"},{"size":251,"mtime":1622034130496,"results":"228","hashOfConfig":"168"},{"size":2518,"mtime":1622034130520,"results":"229","hashOfConfig":"168"},{"size":3239,"mtime":1623477014246,"results":"230","hashOfConfig":"168"},{"size":4637,"mtime":1622636373911,"results":"231","hashOfConfig":"168"},{"size":311,"mtime":1622609157708,"results":"232","hashOfConfig":"168"},{"size":3232,"mtime":1623823115028,"results":"233","hashOfConfig":"168"},{"size":2771,"mtime":1625062590684,"results":"234","hashOfConfig":"168"},{"size":3309,"mtime":1622617576839,"results":"235","hashOfConfig":"168"},{"size":2580,"mtime":1622617583934,"results":"236","hashOfConfig":"168"},{"size":648,"mtime":1624807837013,"results":"237","hashOfConfig":"168"},{"size":2554,"mtime":1622542870642,"results":"238","hashOfConfig":"168"},{"size":6193,"mtime":1622608815685,"results":"239","hashOfConfig":"168"},{"size":2643,"mtime":1622542764869,"results":"240","hashOfConfig":"168"},{"size":286,"mtime":1622542508776,"results":"241","hashOfConfig":"168"},{"size":2896,"mtime":1622559954386,"results":"242","hashOfConfig":"168"},{"size":3178,"mtime":1622607148410,"results":"243","hashOfConfig":"168"},{"size":457,"mtime":1622559724272,"results":"244","hashOfConfig":"168"},{"size":5864,"mtime":1622607662951,"results":"245","hashOfConfig":"168"},{"size":7013,"mtime":1624606905969,"results":"246","hashOfConfig":"168"},{"size":4690,"mtime":1623830275135,"results":"247","hashOfConfig":"168"},{"size":669,"mtime":1623814053538,"results":"248","hashOfConfig":"168"},{"size":2559,"mtime":1623768173531,"results":"249","hashOfConfig":"168"},{"size":3253,"mtime":1622720677097,"results":"250","hashOfConfig":"168"},{"size":2459,"mtime":1622723466422,"results":"251","hashOfConfig":"168"},{"size":2517,"mtime":1622720633796,"results":"252","hashOfConfig":"168"},{"size":213,"mtime":1622723098806,"results":"253","hashOfConfig":"168"},{"size":4562,"mtime":1624964645224,"results":"254","hashOfConfig":"168"},{"size":13755,"mtime":1624858703317,"results":"255","hashOfConfig":"168"},{"size":3614,"mtime":1624807864900,"results":"256","hashOfConfig":"168"},{"size":5646,"mtime":1624799357336,"results":"257","hashOfConfig":"168"},{"size":2129,"mtime":1623852849260,"results":"258","hashOfConfig":"168"},{"size":2116,"mtime":1623833254241,"results":"259","hashOfConfig":"168"},{"size":4034,"mtime":1623949541185,"results":"260","hashOfConfig":"168"},{"size":4397,"mtime":1624036286820,"results":"261","hashOfConfig":"168"},{"size":3704,"mtime":1624026072790,"results":"262","hashOfConfig":"168"},{"size":945,"mtime":1624011160447,"results":"263","hashOfConfig":"168"},{"size":2388,"mtime":1625067792138,"results":"264","hashOfConfig":"168"},{"size":2582,"mtime":1625067444521,"results":"265","hashOfConfig":"168"},{"size":4232,"mtime":1625067089399,"results":"266","hashOfConfig":"168"},{"size":2643,"mtime":1625066656624,"results":"267","hashOfConfig":"168"},{"size":343,"mtime":1625066456693,"results":"268","hashOfConfig":"168"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d76hw6",{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"275","messages":"276","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"279","messages":"280","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"285","messages":"286","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"289","messages":"290","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"291","messages":"292","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"293","messages":"294","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"295","messages":"296","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297"},{"filePath":"298","messages":"299","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"302","messages":"303","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"306","messages":"307","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"308","messages":"309","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"310","messages":"311","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"312","messages":"313","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"316","messages":"317","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"318","messages":"319","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"322","messages":"323","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"324","messages":"325","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"326","messages":"327","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"328","messages":"329","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"330","messages":"331","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"332","messages":"333","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"334","messages":"335","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},"11y7zz1",{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"341","messages":"342","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"343","messages":"344","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"347","usedDeprecatedRules":"336"},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"354","messages":"355","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"356","usedDeprecatedRules":"336"},{"filePath":"357","messages":"358","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"359"},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"366","messages":"367","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"368","usedDeprecatedRules":"336"},{"filePath":"369","messages":"370","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"371","usedDeprecatedRules":"336"},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"374","messages":"375","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"378","messages":"379","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"380","usedDeprecatedRules":"336"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"391","usedDeprecatedRules":"336"},{"filePath":"392","messages":"393","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"359"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"398","usedDeprecatedRules":"336"},{"filePath":"399","messages":"400","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"401","messages":"402","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"403","usedDeprecatedRules":"336"},{"filePath":"404","messages":"405","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"406","messages":"407","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"408","usedDeprecatedRules":"336"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"411","usedDeprecatedRules":"336"},{"filePath":"412","messages":"413","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"414","messages":"415","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"416","messages":"417","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"418","usedDeprecatedRules":"336"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"421","usedDeprecatedRules":"336"},{"filePath":"422","messages":"423","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"424","usedDeprecatedRules":"336"},{"filePath":"425","messages":"426","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"427","usedDeprecatedRules":"336"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"434","usedDeprecatedRules":"336"},{"filePath":"435","messages":"436","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"437","messages":"438","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"439","messages":"440","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"441","messages":"442","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"443","messages":"444","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"445","messages":"446","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"447","messages":"448","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"449","messages":"450","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"451","usedDeprecatedRules":"336"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"466","usedDeprecatedRules":"336"},{"filePath":"467","messages":"468","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"469","messages":"470","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"475","messages":"476","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"477","messages":"478","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"479","usedDeprecatedRules":"336"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"482","usedDeprecatedRules":"336"},{"filePath":"483","messages":"484","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"485","messages":"486","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"499","usedDeprecatedRules":"336"},{"filePath":"500","messages":"501","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"502","messages":"503","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"506","usedDeprecatedRules":"336"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"513","usedDeprecatedRules":"336"},{"filePath":"514","messages":"515","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"516","usedDeprecatedRules":"336"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"519","usedDeprecatedRules":"336"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"534","usedDeprecatedRules":"336"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"336"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"542","usedDeprecatedRules":"336"},{"filePath":"543","messages":"544","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545","usedDeprecatedRules":"336"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"548","messages":"549","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"550","usedDeprecatedRules":"336"},{"filePath":"551","messages":"552","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"553","usedDeprecatedRules":"336"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"556","usedDeprecatedRules":"336"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"336"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"561","messages":"562","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"563","messages":"564","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"565","messages":"566","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\index.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\reportWebVitals.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\layout\\ScrollToTop.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\layout\\App.tsx",["569"],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\user\\UserStore.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\PageTagStore.ts",["570"],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\PageTagList.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\user\\Login.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\PageTagEdit.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\nav\\NavBar.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\home\\HomePage.tsx",["571"],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\ToDo\\ToDoEdit.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\ToDo\\ToDoList.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\SitePage\\SitePageEdit.tsx",["572"],"import { Button, ButtonGroup, Chip, Container, LinearProgress, TextField } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { SitePage } from './SitePage';\nimport { SitePageContext } from './SitePageStore';\nimport { observer } from 'mobx-react-lite';\nimport { Tag, TagGroup } from 'rsuite';\nimport 'rsuite/dist/styles/rsuite-default.css';\nimport MyTag from '../../app/common/form/MyTag';\nimport { PageTagContext } from '../PageTag/PageTagStore';\nimport { IPageTag, PageTag } from '../PageTag/PageTag';\nimport { Autocomplete } from '@material-ui/lab';\nimport ContentEditable from \"react-contenteditable\";\n\nimport PageCategorySelect from '../../app/common/form/PageCategorySelect';\nimport { PageCategoryContext } from '../PageCategory/PageCategoryStore';\nimport ContentEdit from './ContentEdit';\n\n\ninterface DetailParms {\n  id: string;\n}\nconst SitePageEdit: React.FC = () => {\n\n  \n\n  const { id } = useParams<DetailParms>();\n  let history = useHistory();\n\n  const SitePageStore = useContext(SitePageContext);\n  const PageTagStore = useContext(PageTagContext);\n  const PageCategoryStore = useContext(PageCategoryContext);\n \n  \n  const [item, setItem] = useState(new SitePage());\n  const [loading, setLoading] = useState(true);  \n  const [tagList, setTagList] = useState<PageTag[]>();\n  \n  const sanitize = () => {\n    //item.PageHtml = d.target.value ;\n    //this.setState({ html: sanitizeHtml(this.state.html, this.sanitizeConf) });\n  };\n\n  useEffect(() => {\n    \n    PageCategoryStore.getList();\n    SitePageStore.loadItem(id);\n    let tgLst: IPageTag[] = [];\n    if (id) {\n      SitePageStore.loadItem(id).then((val) => {\n                 \n        if(val){         \n          if(val?.Tags){\n            val?.Tags.split(' ').map( t => {                  \n                let tg = new PageTag();    \n                tg.Id = t;\n                tg.value = t;\n                tg.label = PageTagStore.getTag(t);\n                tg.value && tgLst.push(tg);          \n            });               \n          }\n        }       \n        setTagList(tgLst);              \n        setItem(val as any);  \n        setLoading(false);   \n      });\n    } else {\n      setItem(new SitePage()); \n      setTagList(tgLst);\n      setLoading(false);     \n    }\n    \n  }, [id, SitePageStore, SitePageStore.loadItem, setTagList]);\n\n  const onItemSubmit = (values: any) => {    \n    //debugger;   \n    setLoading(true);\n    values.Tags = \"\";\n    tagList?.map( t => {\n      values.Tags += t.Id + \" \";\n    });\n    \n    SitePageStore.editItem(values).then((val) => {      \n      setItem(new SitePage(val));\n      setLoading(false);\n    });\n\n  };\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    <Container component=\"main\" maxWidth=\"xs\">  \n      \n      <Formik\n          initialValues={item}\n          //dirty={}\n          validationSchema={Yup.object({\n            Title: Yup.string().required('Title required'),   \n            URLTitle: Yup.string().required('URL Title required'), \n            CatId: Yup.string().required('Category required'),  \n            PageHtml: Yup.string().required('PageHtml required'),                 \n          })}\n          onSubmit={onItemSubmit}          \n        >\n      \n{({ handleChange, handleBlur, handleSubmit, values, isValid, dirty, setFieldValue, setFieldTouched, validateForm }) => (\n          <Form >             \n            \n          <MyCustomTxt   \n              name=\"Title\"                         \n              type=\"text\"                \n              autoFocus={true}\n              required={true}                                \n              label=\"Title\"                                                                     \n            />\n                type=\"text\"                                \n                required={true}                                \n                label=\"URL Title\"                                                                     \n             />\n\n            <PageCategorySelect\n                name=\"CatId\"                                                                         \n                required={false}                                \n                label=\"Category\" \n                list={PageCategoryStore.itemList}\n                parent= {false}\n             />\n                                          \n              <Autocomplete     \n                  className=\"customFieldMargin\"                              \n                  value={tagList}\n                  multiple\n                  id=\"TagList\"          \n                  options={PageTagStore.itemList as any[]}\n                  //classes={classes}\n                  getOptionLabel={(option:any) => option.label}                  \n                  freeSolo\n                  renderTags={(value, getTagProps) =>\n                    value.map((option:any, index) => (\n                      tagList  && <Chip variant=\"outlined\" label={option.label} {...getTagProps({ index })} /> \n                    ))\n                  }\n                  renderInput={(params) => (\n                    <TextField {...params} variant=\"outlined\" label=\"Tags\" placeholder=\"Tags\" fullWidth />\n                  )}\n                  \n                  onChange={(event:any, newValue:any) => {\n                    debugger;\n                    setTagList(newValue);                           \n                  }}\n              />\n            \n            <ContentEditable\n              id=\"PageHtml\"              \n              className=\"editable\"\n              tagName=\"pre\"\n              html={item.PageHtml} // innerHTML of the editable div\n              //disabled={!this.state.editable} // use true to disable edition\n              onChange={(d:any) => { \n                debugger;                                 \n                item.PageHtml = d.target.value ; \n                setFieldValue('PageHtml', d.target.value);\n                setFieldTouched(\"PageHtml\", true);\n                \n              }} // handle innerHTML change\n              onBlur={sanitize}\n            />            \n\n            {/* <textarea\n              className=\"editable\"\n              value={item.PageHtml}\n              onChange={ (d:any) => {setFieldValue('PageHtml', d.target.value);} }\n              //onBlur={this.sanitize}\n            /> */}\n                         \n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                <Button\n                  disabled={!isValid}\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"                  \n                >\n                  Save\n                </Button> \n                { item.Id && \n                  <Button\n                     \n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n                      SitePageStore.deleteItem(item.Id).then( () => {\n                        history.push('/SitePagelist');\n                      })\n                    }}\n                  >\n                    Delete\n                  </Button>\n                }\n                <Button onClick={ () => { history.push('/SitePagelist');  }}>Back</Button>          \n              </ButtonGroup>\n\n          </Form>\n           )}        \n        </Formik>      \n    </Container>\n  );\n};\n\nexport default observer(SitePageEdit);\n\n","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\SitePage\\SitePageList.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryEdit.tsx",["573","574","575","576","577"],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryList.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\user\\User.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\PageTag.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\api\\agent.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\ToDo\\ToDo.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\ToDo\\ToDoStore.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\SitePage\\SitePageStore.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\SitePage\\SitePage.ts",["578"],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryStore.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategory.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\user\\CurrentUserNav.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\TagChip.tsx",["579"],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\common\\form\\TestABCD.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\common\\form\\PageCategorySelect.tsx",["580","581"],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\common\\form\\MyCustomTxt.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\common\\common\\PageCategoryItem.tsx",["582","583","584"],"C:\\Shaiju\\wayooz\\client-app\\src\\index.tsx",[],["585","586"],"C:\\Shaiju\\wayooz\\client-app\\src\\reportWebVitals.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\app\\layout\\App.tsx",["587","588","589","590"],"C:\\Shaiju\\wayooz\\client-app\\src\\app\\layout\\ScrollToTop.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageTag\\PageTagStore.ts",["591"],"\nimport { createContext } from \"react\";\nimport { observable, action, runInAction, makeObservable } from \"mobx\";\nimport agent from \"../../app/api/agent\";\nimport { PageTag, IPageTag } from \"./PageTag\";\n\nconst IPageTagAPI = \"/PageTag\";\n\nconst DBFun = {\n  list: (): Promise<IPageTag[]> => agent.requests.get(IPageTagAPI),\n  details: (Id: string) => agent.requests.get(`${IPageTagAPI}/${Id}`),\n  create: (item: IPageTag) => agent.requests.post(IPageTagAPI, item),\n  update: (item: IPageTag) =>\n    agent.requests.put(`${IPageTagAPI}/${item.Id}`, item),\n  delete: (Id: string) => agent.requests.del(`${IPageTagAPI}/${Id}`),\n};\n\nexport default class PageTagStoreImpl {\n\n  loading = false;\n  updating = false;\n  itemList: IPageTag[] = [];\n  item: PageTag = new PageTag()\n\n  constructor() {\n    makeObservable(this, {\n         itemList: observable,\n         loading: observable,\n         updating: observable,\n         item: observable,\n         getList: action,\n         loadItem: action,\n         editItem: action\n    });\n  }\n\n  getList = async () => {        \n    this.loading = true;\n    try {               \n      this.itemList = await DBFun.list();       \n      this.loading = false;                   \n    } catch (error) {\n      runInAction( () => {\n        this.loading = false;            \n        throw error;\n      });\n    }\n  }\n\n  loadItem = async (id: string) => {    \n    try {      \n      this.itemList = await DBFun.list();             \n      this.loading = false;      \n      return this.item;     \n      } catch (error) {\n        console.log(error);\n        this.loading = false;\n      }\n  }\n\n  getTag = (id: string) => {\n    //debugger;\n    let label:string = '';\n    for(let i=0;i<this.itemList.length;i++){\n      if(this.itemList[i].Id == id){\n        label = this.itemList[i].label;\n      }\n    }\n    return label; \n  }\n\n editItem = async (item: IPageTag) => {    \n    this.loading = true;\n    try {        \n      let itm = new  PageTag();\n      if (item.Id) {\n        itm = await DBFun.update(item);\n      } else {\n        itm = await DBFun.create(item);\n      }\n      this.loading = false;         \n      return itm;   \n    } catch (error) {\n      runInAction( () => {\n        this.loading = false;        \n      });        \n      throw error;\n    }\n  };\n\n  deleteItem = async (id: string) => {\n    this.updating = true;\n    this.loading = true;\n    try {\n      await DBFun.delete(id);    \n      this.updating = false;   \n      this.loading = false;\n    } catch (error) {    \n      this.updating = false;  \n      this.loading = false;             \n      console.log(error);\n      throw error;\n    }\n  };  \n}\n\nexport const PageTagContext = createContext(new PageTagStoreImpl());\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\Login.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageTag\\PageTagList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageTag\\PageTagEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\home\\HomePage.tsx",["592"],"import Button from '@material-ui/core/Button/Button';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useContext, useEffect } from 'react'\r\nimport { useHistory } from 'react-router-dom';\r\nimport TestABCD from '../../app/common/form/TestABCD';\r\nimport testComp from '../test/testComp';\r\n\r\n\r\nimport { UserStoreContext } from '../user/UserStore';\r\n\r\n\r\n\r\nfunction HomePage() {\r\n    let history = useHistory();\r\n\r\n    const userStore = useContext(UserStoreContext);\r\n\r\n    useEffect(() => {\r\n       \r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n           \r\n           <TestABCD/>\r\n\r\n            <h6>{userStore.user.DisplayName} </h6>\r\n            <Button\r\n                type=\"submit\"\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\"\r\n                onClick={ () => {                   \r\n                   history.push('/login');\r\n                   \r\n                }}               \r\n              >\r\n                Sign In\r\n              </Button> \r\n\r\n                         \r\n        </div> \r\n          \r\n    );\r\n}\r\n\r\nexport default observer(HomePage)","C:\\Shaiju\\wayooz\\client-app\\src\\features\\nav\\NavBar.tsx",[],["593","594"],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\ToDo\\ToDoEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\ToDo\\ToDoList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\SitePage\\SitePageList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryEdit.tsx",["595","596","597","598","599"],"import { Button, ButtonGroup, Container, LinearProgress } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { PageCategory } from './PageCategory';\nimport { PageCategoryContext } from './PageCategoryStore';\nimport { observer } from 'mobx-react-lite';\nimport ContentEditable from 'react-contenteditable'\n\nimport FormControl from '@material-ui/core/FormControl';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Select from '@material-ui/core/Select';\nimport PageCategorySelect from '../../app/common/form/PageCategorySelect';\nimport PageCategoryItem from '../../app/common/common/PageCategoryItem';\n\n\ninterface DetailParms {\n  id: string;\n}\nconst PageCategoryEdit: React.FC = () => {\n\n  const { id } = useParams<DetailParms>();\n  const PageCategoryStore = useContext(PageCategoryContext);\n \n  let history = useHistory();\n  const [item, setItem] = useState(new PageCategory());\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() => {\n\n    PageCategoryStore.getList();\n\n    PageCategoryStore.loadItem(id);\n    if (id) {\n      PageCategoryStore.loadItem(id).then((val) => {\n        setItem(val as any);     \n        setLoading(false);   \n      });\n    } else {\n      setItem(new PageCategory()); \n      setLoading(false);     \n    }\n    \n  }, [id, PageCategoryStore, PageCategoryStore.loadItem]);\n\n  const onItemSubmit = (values: any) => {    \n    setLoading(true);\n    values.Pid = values.Pid ? values.Pid : \"00000000-0000-0000-0000-000000000000\";\n    PageCategoryStore.editItem(values).then((val) => {\n      debugger;\n      setItem(new PageCategory(val));\n      setLoading(false);\n    });\n  };\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    <Container component=\"main\" maxWidth=\"xs\">  \n          \n      <Formik\n          initialValues={item}\n          validationSchema={Yup.object({\n            Title: Yup.string().required('Title required'),                     \n          })}\n          onSubmit={onItemSubmit}\n        >\n          <Form > \n            {item.Id}\n            <MyCustomTxt   \n                name=\"Title\"                         \n                type=\"text\"                \n                autoFocus={true}\n                required={true}                                \n                label=\"Title\"                                                                     \n              />\n\n        \n\n              {/* <MyCustomTxt   \n                name=\"Pid\"                         \n                type=\"text\"                \n                autoFocus={true}\n                required={false}                                \n                label=\"Pid\"                                                                     \n              />              */}\n\n              {/* <FormControl variant=\"outlined\" fullWidth >\n                <InputLabel htmlFor=\"outlined-age-native-simple\">Age</InputLabel>\n                <Select\n                  native\n                  fullWidth\n                  //value={state.age}\n                  //onChange={handleChange}\n                  label=\"Age\"\n                  inputProps={{\n                    name: 'age',\n                    id: 'outlined-age-native-simple',\n                  }}\n                >\n                  <option aria-label=\"None\" value=\"\" />\n                  <option value={10}>Ten</option>\n                  <option value={20}>Twenty</option>\n                  <option value={30}>Thirty</option>\n                </Select>\n              </FormControl> */}\n\n              <PageCategorySelect\n                name=\"Pid\"                                                         \n                autoFocus={true}\n                required={false}                                \n                label=\"Parent\" \n                list={PageCategoryStore.itemList}\n                parent= {false}\n              />\n\n            \n\n              <br/>\n\n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"                  \n                >\n                  Save\n                </Button> \n                { item.Id && \n                  <Button\n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n                      PageCategoryStore.deleteItem(item.Id).then( () => {\n                        history.push('/PageCategorylist');\n                      })\n                    }}\n                  >\n                    Delete\n                  </Button>\n                }\n                <Button onClick={ () => { history.push('/PageCategorylist');  }}>Back</Button>          \n              </ButtonGroup>\n\n          </Form>\n        </Formik>\n    </Container>\n  );\n};\n\nexport default observer(PageCategoryEdit);\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\SitePage\\SitePageEdit.tsx",["600","601","602","603","604","605","606","607"],"import { Button, ButtonGroup, Chip, Container, LinearProgress, TextField } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { SitePage } from './SitePage';\nimport { SitePageContext } from './SitePageStore';\nimport { observer } from 'mobx-react-lite';\nimport { Tag, TagGroup } from 'rsuite';\nimport 'rsuite/dist/styles/rsuite-default.css';\nimport MyTag from '../../app/common/form/MyTag';\nimport { PageTagContext } from '../PageTag/PageTagStore';\nimport { IPageTag, PageTag } from '../PageTag/PageTag';\nimport { Autocomplete } from '@material-ui/lab';\nimport ContentEditable from \"react-contenteditable\";\n\nimport PageCategorySelect from '../../app/common/form/PageCategorySelect';\nimport { PageCategoryContext } from '../PageCategory/PageCategoryStore';\nimport ContentEdit from './ContentEdit';\n\n\ninterface DetailParms {\n  id: string;\n}\nconst SitePageEdit: React.FC = () => {\n\n  \n  const { id } = useParams<DetailParms>();\n  let history = useHistory();\n\n  const SitePageStore = useContext(SitePageContext);\n  const PageTagStore = useContext(PageTagContext);\n  const PageCategoryStore = useContext(PageCategoryContext);\n \n  \n  const [item, setItem] = useState(new SitePage());\n  const [loading, setLoading] = useState(true);  \n  const [tagList, setTagList] = useState<PageTag[]>();\n  \n  const sanitize = () => {\n    //item.PageHtml = d.target.value ;\n    //this.setState({ html: sanitizeHtml(this.state.html, this.sanitizeConf) });\n  };\n\n  useEffect(() => {\n    \n    PageCategoryStore.getList();\n    SitePageStore.loadItem(id);\n    let tgLst: IPageTag[] = [];\n    if (id) {\n      SitePageStore.loadItem(id).then((val) => {\n                 \n        if(val){         \n          if(val?.Tags){\n            val?.Tags.split(' ').map( t => {                  \n                let tg = new PageTag();    \n                tg.Id = t;\n                tg.value = t;\n                tg.label = PageTagStore.getTag(t);\n                tg.value && tgLst.push(tg);          \n            });               \n          }\n        }       \n        setTagList(tgLst);              \n        setItem(val as any);  \n        setLoading(false);   \n      });\n    } else {\n      setItem(new SitePage()); \n      setTagList(tgLst);\n      setLoading(false);     \n    }\n    \n  }, [id, SitePageStore, SitePageStore.loadItem, setTagList]);\n\n  const onItemSubmit = (values: any) => {    \n    //debugger;   \n    setLoading(true);\n    values.Tags = \"\";\n    tagList?.map( t => {\n      values.Tags += t.Id + \" \";\n    });\n    \n    SitePageStore.editItem(values).then((val) => {      \n      setItem(new SitePage(val));\n      setLoading(false);\n    });\n\n  };\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    <Container component=\"main\" maxWidth=\"xs\">  \n      \n      <Formik\n          initialValues={item}\n          //dirty={}\n          validationSchema={Yup.object({\n            Title: Yup.string().required('Title required'),   \n            URLTitle: Yup.string().required('URL Title required'), \n            CatId: Yup.string().required('Category required'),  \n            PageHtml: Yup.string().required('PageHtml required'),                 \n          })}\n          onSubmit={onItemSubmit}          \n        >\n      \n{({ handleChange, handleBlur, handleSubmit, values, isValid, dirty, setFieldValue, setFieldTouched, validateForm }) => (\n          <Form >             \n            \n          <MyCustomTxt   \n              name=\"Title\"                         \n              type=\"text\"                \n              autoFocus={true}\n              required={true}                                \n              label=\"Title\"                                                                     \n            />\n               \n\n            <PageCategorySelect\n                name=\"CatId\"                                                                         \n                required={false}                                \n                label=\"Category\" \n                list={PageCategoryStore.itemList}\n                parent= {false}\n             />\n                                          \n              <Autocomplete     \n                  className=\"customFieldMargin\"                              \n                  value={tagList}\n                  multiple\n                  id=\"TagList\"          \n                  options={PageTagStore.itemList as any[]}\n                  //classes={classes}\n                  getOptionLabel={(option:any) => option.label}                  \n                  freeSolo\n                  renderTags={(value, getTagProps) =>\n                    value.map((option:any, index) => (\n                      tagList  && <Chip variant=\"outlined\" label={option.label} {...getTagProps({ index })} /> \n                    ))\n                  }\n                  renderInput={(params) => (\n                    <TextField {...params} variant=\"outlined\" label=\"Tags\" placeholder=\"Tags\" fullWidth />\n                  )}\n                  \n                  onChange={(event:any, newValue:any) => {\n                    debugger;\n                    setTagList(newValue);                           \n                  }}\n              />\n            \n            <ContentEditable\n              id=\"PageHtml\"              \n              className=\"editable\"\n              tagName=\"pre\"\n              html={item.PageHtml} // innerHTML of the editable div\n              //disabled={!this.state.editable} // use true to disable edition\n              onChange={(d:any) => { \n                debugger;                                 \n                item.PageHtml = d.target.value ; \n                setFieldValue('PageHtml', d.target.value);\n                setFieldTouched(\"PageHtml\", true);\n                \n              }} // handle innerHTML change\n              onBlur={sanitize}\n            />            \n\n            {/* <textarea\n              className=\"editable\"\n              value={item.PageHtml}\n              onChange={ (d:any) => {setFieldValue('PageHtml', d.target.value);} }\n              //onBlur={this.sanitize}\n            /> */}\n                         \n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                <Button\n                  disabled={!isValid}\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"                  \n                >\n                  Save\n                </Button> \n                { item.Id && \n                  <Button\n                     \n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n                      SitePageStore.deleteItem(item.Id).then( () => {\n                        history.push('/SitePagelist');\n                      })\n                    }}\n                  >\n                    Delete\n                  </Button>\n                }\n                <Button onClick={ () => { history.push('/SitePagelist');  }}>Back</Button>          \n              </ButtonGroup>\n\n          </Form>\n           )}        \n        </Formik>      \n    </Container>\n  );\n};\n\nexport default observer(SitePageEdit);\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\User.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageTag\\PageTag.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\app\\api\\agent.ts",["608"],"import axios, { AxiosResponse } from \"axios\";\r\nimport { ApiAttachment } from \"../../features/AppAttachment/AppAttachment\";\r\nimport { IUser, IUserFormValues } from \"../../features/user/User\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:5000/api\";\r\n\r\n\r\n\r\naxios.interceptors.request.use(  \r\n    (config) => {\r\n      //debugger;\r\n      const token = window.localStorage.getItem(\"WayoozToken\");\r\n      if (token) config.headers.Authorization = `Bearer ${token}`;\r\n      return config;\r\n    },\r\n    (error) => {\r\n      return Promise.reject(error);\r\n    }\r\n  );\r\n\r\nconst responseBody = (response: AxiosResponse) =>  response.data;\r\n\r\nconst sleep = (ms: number) => (response: AxiosResponse) => \r\n    new Promise<AxiosResponse>(resolve => setTimeout(() => resolve(response), ms));\r\n\r\n//debugger;\r\nconst requests = {\r\n \r\n    get: (url: string) => axios.get(url).then(sleep(100)).then(responseBody) ,   \r\n    post: (url: string, body: {}) => axios.post(url, body).then(sleep(100)).then(responseBody),\r\n    put: (url: string, body: {}) => axios.put(url, body).then(sleep(100)).then(responseBody),\r\n    del: (url: string) => axios.delete(url).then(sleep(100)).then(responseBody),\r\n\r\n    download: (url: string) => axios.get(url, {responseType: 'blob'}).then(sleep(100)).then(responseBody) ,  \r\n    downloadPost: (url: string, body: {}) => axios.post(url, body, {responseType: 'blob'}).then(sleep(100)).then(responseBody) ,\r\n    \r\n    postForm: (url: string, formData : FormData) => {\r\n\r\n      //let formData = new FormData();\r\n\r\n      // Object.keys(file).forEach((key) => {\r\n      //   formData.append(key, file[key])\r\n      // })\r\n      //formData.append('Files', file);\r\n      // file.forEach( (f) => { \r\n      //   formData.append('FileList', f);\r\n      // })\r\n\r\n      //formData.append('Prop1', \"Test Prop One\");\r\n     \r\n      return axios.post(url, formData, {\r\n          headers: {'Content-type': 'multipart/form-data'}\r\n      }).then(responseBody)\r\n\r\n  }\r\n\r\n};\r\n\r\nconst User = {\r\n  list: (): Promise<IUser[]> => requests.get(\"/UserManager\") ,\r\n  current: (): Promise<IUser> => requests.get(\"/user\"),\r\n  login: (user: IUserFormValues): Promise<IUser> =>\r\n      requests.post(`/user/login`, user),\r\n  register: (user: IUserFormValues): Promise<IUser> =>\r\n      requests.post(`/user/register`, user),\r\n};\r\n\r\nconst agent = {\r\n  requests,\r\n  User,\r\n};\r\n\r\nexport default agent;\r\n\r\n// export default {\r\n//     requests,\r\n//     User\r\n//   };","C:\\Shaiju\\wayooz\\client-app\\src\\features\\ToDo\\ToDo.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\ToDo\\ToDoStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\SitePage\\SitePageStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\SitePage\\SitePage.ts",["609"],"import { IPageTag, PageTag } from \"../PageTag/PageTag\";\n\nexport interface ISitePage {\n\tId: string\n\tTitle: string\n\tCatId: string\n\t//PageTag: IPageTag[]\n\tTags: string\n\tURLTitle: string\n\tPageHtml: string\n}\n\nexport class SitePage implements ISitePage {\n\tId: string = '';\n\tTitle: string = '';\n\tCatId: string = '';\n\t//PageTag: IPageTag[] = [];\n\tTags: string = '';\n\tTagList: IPageTag[] = [];\n\tURLTitle: string = '';\n\tPageHtml: string = '';\n  \n  constructor(init?: ISitePage) {\n    Object.assign(this, init);\n\tthis.TagList =  []; \n  }\n}\n \n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategory.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\CurrentUserNav.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\PageTag\\TagChip.tsx",["610"],"\r\nimport { Chip } from '@material-ui/core';\r\nimport React, { useContext, useEffect } from 'react';\r\nimport { PageTagContext } from './PageTagStore';\r\ninterface IProps {\r\n    IdList: string;   \r\n  }\r\n\r\n\r\nconst TagChip : React.FC<IProps> = ({ IdList }) => {  \r\n    \r\n    const PageTagStore = useContext(PageTagContext);\r\n    \r\n    return (\r\n        \r\n        <div>{ \r\n                IdList && IdList.split(' ').map( t => ( \r\n                    t &&  <Chip size=\"small\" color=\"primary\" variant=\"outlined\" label={PageTagStore.getTag(t)}   />       \r\n                )) \r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TagChip;","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\TestABCD.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\PageCategorySelect.tsx",["611","612"],"import React from \"react\";\r\nimport {  \r\n  useField,\r\n  FieldAttributes,  \r\n} from \"formik\";\r\n\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport { IPageCategory } from \"../../../features/PageCategory/PageCategory\";\r\n\r\ntype CustomTxtProps = { label: string, list : IPageCategory[], parent? : boolean } & FieldAttributes<{}>;\r\n\r\nconst PageCategorySelect: React.FC<CustomTxtProps> = ({ list, parent, label, placeholder, type,required,autoComplete, autoFocus, ...props }) => {\r\n\r\n    //const [field] = useField<{}>(props);\r\n\r\n    const [field, meta] = useField<{}>(props);\r\n    const errorText = meta.error && meta.touched ? meta.error : \"\";\r\n\r\n    return (                \r\n        <FormControl variant=\"outlined\" fullWidth >\r\n            <InputLabel htmlFor=\"outlined-age-native-simple\">{label}</InputLabel>\r\n            <Select\r\n                {...field}\r\n                native\r\n                fullWidth            \r\n                //onChange={handleChange}\r\n                label={label}            \r\n            >\r\n                <option aria-label=\"None\" value=\"\" />\r\n                {list.map((row) => (                              \r\n                  row.Pid != row.Id && <option value={row.Id}>{row.Title}</option>               \r\n                ))}\r\n\r\n            </Select>\r\n        </FormControl>\r\n    );\r\n  };\r\n\r\nexport default PageCategorySelect;","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\MyCustomTxt.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\common\\PageCategoryItem.tsx",["613","614","615"],"import React, { useEffect, useRef, useState } from 'react'\r\nimport { observer } from 'mobx-react-lite';\r\nimport { useContext } from 'react';\r\nimport { PageCategoryContext } from '../../../features/PageCategory/PageCategoryStore';\r\n\r\ntype CustomTxtProps = { CategoryId: string };\r\n\r\n//const PageCategoryItem: React.FC = () => {   \r\nconst PageCategoryItem: React.FC<CustomTxtProps> = ({CategoryId}) => {   \r\n\r\n  const PageCategoryStore = useContext(PageCategoryContext);\r\n\r\n  const [title, setTitle] = useState(\"\");\r\n  \r\n  useEffect(() => {\r\n      console.log('PageCategoryItem : ' + CategoryId);\r\n      for(let i=0;i<PageCategoryStore.itemList.length;i++){\r\n        if( PageCategoryStore.itemList[i].Id == CategoryId ){\r\n          setTitle( PageCategoryStore.itemList[i].Title);\r\n          break;\r\n        }\r\n      }\r\n\r\n  }, [PageCategoryStore]);\r\n\r\n  return (\r\n    <div>{title}</div>    \r\n  );\r\n};\r\n\r\nexport default observer(PageCategoryItem);\r\n\r\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserList.tsx",["616","617","618"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Button, ButtonGroup, LinearProgress, List, ListItem, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\r\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\r\n\r\nimport { User } from './User';\r\nimport { UserManagerContext } from './UserManagerStore';\r\n\r\n \r\nconst UserList: React.FC = () => {\r\n\r\n     const UserManagerStore = useContext(UserManagerContext);  \r\n     \r\n\r\n    useEffect(() => {       \r\n        UserManagerStore.getList();                  \r\n      }, [UserManagerStore, UserManagerStore.getList])     \r\n\r\n    if( UserManagerStore.loading ){\r\n      return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \r\n    }\r\n\r\n    return (\r\n     \r\n      <List>  \r\n        <ListItem divider>\r\n          <h3>User List</h3>  \r\n        </ListItem>\r\n          \r\n          \r\n        <ListItem divider>\r\n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\r\n          <Button >\r\n            <NavLink to=\"/useredit/\" >Add New</NavLink> \r\n          </Button>\r\n          <Button onClick={ () => { UserManagerStore.getList(); }}>Refresh</Button>          \r\n        </ButtonGroup>\r\n        </ListItem>\r\n\r\n        \r\n        \r\n        <ListItem divider>\r\n          <TableContainer component={Paper}>\r\n            <Table aria-label=\"simple table\">\r\n              <TableHead>\r\n                <TableRow>                  \r\n                  <TableCell align=\"left\">DisplayName</TableCell>\r\n                  <TableCell align=\"left\">Username</TableCell>\r\n                  <TableCell align=\"left\">Email</TableCell>\r\n                  <TableCell align=\"left\">PhoneNumber</TableCell>\r\n                  <TableCell align=\"left\">Is Active</TableCell>\r\n                </TableRow>\r\n              </TableHead>\r\n              <TableBody>\r\n                {UserManagerStore.itemList.map((row) => (\r\n                  <TableRow key={row.Username} >\r\n                    <TableCell component=\"th\" scope=\"row\"  >\r\n                      <NavLink to={\"/useredit/\" + row.Username } >{row.DisplayName}</NavLink> \r\n                    </TableCell>\r\n                    <TableCell align=\"left\">{row.Username}</TableCell>                                               \r\n                    <TableCell align=\"left\">{row.Email}</TableCell>  \r\n                    <TableCell align=\"left\">{row.PhoneNumber}</TableCell>\r\n                    <TableCell align=\"left\" >{row.IsActive ? \"Acrive\" : \"Inactive\" }</TableCell>            \r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n        </ListItem>\r\n\r\n      </List>        \r\n     \r\n    );\r\n};\r\n\r\n\r\nexport default observer(UserList);\r\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserManagerStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserManager.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserEdit.tsx",["619"],"import { Button, ButtonGroup, Checkbox, Container, FormControlLabel, LinearProgress } from '@material-ui/core';\r\nimport { Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport {  useHistory, useParams } from 'react-router-dom';\r\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\r\nimport { UserManager } from './UserManager';\r\nimport { UserManagerContext } from './UserManagerStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { debug } from 'console';\r\n\r\n\r\ninterface DetailParms {\r\n  id: string;\r\n}\r\nconst UserEdit: React.FC = () => {\r\n\r\n  const { id } = useParams<DetailParms>();\r\n  const UserManagerStore = useContext(UserManagerContext);\r\n \r\n  let history = useHistory();\r\n  const [item, setItem] = useState(new UserManager());\r\n  const [loading, setLoading] = useState(true);\r\n  \r\n  useEffect(() => {\r\ndebugger;\r\n    if (id) {\r\n      UserManagerStore.loadItem(id).then((val) => {\r\n        setItem(val as any);     \r\n        setLoading(false);   \r\n      });\r\n    } else {\r\n      setItem(new UserManager()); \r\n      setLoading(false);          \r\n    }\r\n    \r\n  }, [id, UserManagerStore, UserManagerStore.loadItem]);\r\n\r\n  const onItemSubmit = (values: any) => {    \r\n\r\n    debugger;\r\n    setLoading(true);\r\n    UserManagerStore.editItem(values, id).then((val) => {\r\n      debugger;\r\n      setItem(new UserManager(val as any));\r\n      setLoading(false);\r\n      history.push('/userlist')\r\n    });\r\n  };\r\n\r\n  if(loading){  \r\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \r\n  }\r\n\r\n    \r\n  return (\r\n    <Container component=\"main\" maxWidth=\"xs\">  \r\n\r\n      <Formik\r\n          initialValues={item}\r\n          validationSchema={Yup.object({\r\n            DisplayName: Yup.string().required('DisplayName required'),   \r\n            Username: Yup.string().required('Username required'),     \r\n            Email: Yup.string().required('Email required'),                                    \r\n          })}\r\n          onSubmit={onItemSubmit}\r\n        >\r\n          <Form > \r\n            \r\n            <MyCustomTxt   \r\n                name=\"DisplayName\"                         \r\n                type=\"text\"                \r\n                autoFocus={true}\r\n                required={true}                                \r\n                label=\"Display Name\"                                                                     \r\n              />\r\n\r\n            <MyCustomTxt   \r\n                name=\"Username\"                         \r\n                type=\"text\"                                \r\n                required={true}                                \r\n                label=\"User Name\"                                                                     \r\n              />\r\n\r\n              <MyCustomTxt   \r\n                name=\"Password\"                         \r\n                type=\"Password\"                                \r\n                required={ id ?  false : true}                                \r\n                label=\"Password\"                                                                     \r\n              />\r\n\r\n            <MyCustomTxt   \r\n                name=\"Email\"                         \r\n                type=\"email\"                                \r\n                required={true}                                \r\n                label=\"Email\"                                                                                     \r\n              />\r\n\r\n            <MyCustomTxt   \r\n                name=\"PhoneNumber\"                         \r\n                type=\"text\"                                \r\n                required={false}                                \r\n                label=\"Phone Number\"                                                                     \r\n              />\r\n\r\n            <FormControlLabel\r\n              control={<Checkbox id=\"IsActive\" name=\"IsActive\" checked={item.IsActive} onClick={ () => { item.IsActive = !item.IsActive; setItem(item) } }  />}\r\n              label=\"IsActive\"              \r\n            />\r\n            \r\n            <br/> \r\n\r\n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\r\n                <Button\r\n                  type=\"submit\"\r\n                  fullWidth\r\n                  variant=\"contained\"\r\n                  color=\"primary\"                  \r\n                >\r\n                  Save\r\n                </Button> \r\n               \r\n                <Button onClick={ () => { history.push('/userlist');  }}>Back</Button>          \r\n              </ButtonGroup>\r\n\r\n          </Form>\r\n        </Formik>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default observer(UserEdit);","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRole\\AppUserRoleList.tsx",["620","621"],"import React, { useContext, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { AppUserRoleContext } from './AppUserRoleStore';\nimport { Button, ButtonGroup, LinearProgress, List, ListItem, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport { AppUserRoleMasterContext } from '../AppUserRoleMaster/AppUserRoleMasterStore';\n \nconst AppUserRoleList: React.FC = () => {\n\n  const AppUserRoleStore = useContext(AppUserRoleContext);\n  const AppUserRoleMasterStore = useContext(AppUserRoleMasterContext);\n  \n    useEffect(() => {       \n      AppUserRoleMasterStore.getList();\n      AppUserRoleStore.getList();                  \n    }, [AppUserRoleStore, AppUserRoleStore.getList])       \n\n    if(AppUserRoleStore.loading){\n      return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \n    }\n\n    return (\n      <List>\n        <ListItem divider>\n          <h3>User Roles</h3>  \n        </ListItem>\n\n        <ListItem divider>\n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n          <Button >\n            <NavLink to=\"/AppUserRoleItemEdit/\" >Add New</NavLink> \n          </Button>\n          <Button onClick={ () => { AppUserRoleStore.getList(); }}>Refresh</Button>          \n        </ButtonGroup>\n        </ListItem>\n        \n        <ListItem divider>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>ID</TableCell>\n                  <TableCell align=\"right\">User Id</TableCell>\n                  <TableCell align=\"right\">User Role</TableCell>\n                  <TableCell align=\"right\">Delete</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {AppUserRoleStore.itemList.map((row) => (\n                  <TableRow key={row.Id} >\n                    <TableCell component=\"th\" scope=\"row\"  >\n                      <NavLink to={\"/AppUserRoleItemEdit/\" + row.Id } >{row.Id}</NavLink> \n                    </TableCell>\n                                             \n                    <TableCell align=\"right\">{row.UserId}</TableCell>\n                    <TableCell align=\"right\">{ AppUserRoleMasterStore.itemList.find( u => u.Id == row.AppUserRoleMasterId )?.Title }</TableCell>  \n                    <TableCell align=\"right\" >\n                      <DeleteOutlinedIcon onClick={ () => { AppUserRoleStore.deleteItem(row.Id).then( () => {   AppUserRoleStore.getList(); })}}  />\n                    </TableCell>            \n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </ListItem>\n\n      </List>        \n     \n    );\n};\n\nexport default observer(AppUserRoleList);\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRole\\AppUserRoleEdit.tsx",["622","623","624","625"],"import { Button, ButtonGroup, Container, LinearProgress, TextField } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { AppUserRole } from './AppUserRole';\nimport { AppUserRoleContext } from './AppUserRoleStore';\nimport { observer } from 'mobx-react-lite';\nimport { UserManagerContext } from '../user/UserManagerStore';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { AppUserRoleMasterContext } from '../AppUserRoleMaster/AppUserRoleMasterStore';\n\ninterface DetailParms {\n  id: string;\n}\nconst AppUserRoleEdit: React.FC = () => {\n\n  const { id } = useParams<DetailParms>();\n  const AppUserRoleStore = useContext(AppUserRoleContext);  \n  const UserManagerStore = useContext(UserManagerContext);\n  const AppUserRoleMasterStore = useContext(AppUserRoleMasterContext);\n \n  let history = useHistory();\n  const [item, setItem] = useState(new AppUserRole());\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() => {\n\n    UserManagerStore.getList();\n    AppUserRoleMasterStore.getList();\n\n    AppUserRoleStore.loadItem(Number(id));\n    if (id) {\n      AppUserRoleStore.loadItem(Number(id)).then((val) => {        \n        setItem(val as any);     \n        setLoading(false);   \n      });\n    } else {\n      setItem(new AppUserRole()); \n      setLoading(false);     \n    }\n    \n  }, [id, AppUserRoleStore, AppUserRoleStore.loadItem]);\n\n  const onItemSubmit = (values: any) => {    \n    debugger;\n    setLoading(true);\n    AppUserRoleStore.editItem(values).then((val) => {\n\t  history.push('/AppUserRolelist');\n      //debugger;\n      //setItem(new AppUserRole(val));\n      //setLoading(false);\n    });\n  };\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    <Container component=\"main\" maxWidth=\"xs\">  \n\n      <h3>User Role</h3>\n      <Formik\n          initialValues={item}\n          validationSchema={Yup.object({\n            UserId: Yup.string().required('Title required'),                     \n          })}\n          onSubmit={onItemSubmit}\n        >\n          <Form > \n            {item.Id}\n            {/* <MyCustomTxt   \n                name=\"UserId\"                         \n                type=\"text\"                \n                autoFocus={true}\n                required={true}                                \n                label=\"UserId\"                                                                     \n            /> */}\n\n            <Autocomplete                             \n                value={ UserManagerStore.itemList.find( u => u.Username == item.UserId ) } \n                id=\"UserId\"\n                options={UserManagerStore.itemList}\n                getOptionLabel={(option) => option.Email ? option.DisplayName : '-'}                \n                style={{ width: 300, paddingTop: 20  }}\n                renderInput={(params) => <TextField {...params} label=\"User Id\" variant=\"outlined\" />}\n\n                onChange={(event:any, newValue:any) => {\n                  item.UserId=newValue.Username;\n                  setItem(item);\n                  debugger;                     \n                }}\n              />\n\n              <Autocomplete                \n                value={ AppUserRoleMasterStore.itemList.find( u => u.Id == item.AppUserRoleMasterId ) } \n                id=\"AppUserRoleMasterId\"\n                options={AppUserRoleMasterStore.itemList}\n                getOptionLabel={(option) => option.Title }                \n                style={{ width: 300, paddingTop: 20, paddingBottom : 20 }}\n                renderInput={(params) => <TextField {...params} label=\"User Role\" variant=\"outlined\" />}\n\n                onChange={(event:any, newValue:any) => {\n                  item.AppUserRoleMasterId = newValue.Id;\n                  setItem(item);\n                  debugger;                     \n                }}\n              />\n\n\n\n            {/* <MyCustomTxt   \n                name=\"AppUserRoleMasterId\"                         \n                type=\"text\"                \n                autoFocus={true}\n                required={true}                                \n                label=\"AppUserRoleMasterId\"                                                                     \n            />\n                */}\n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"                  \n                >\n                  Save\n                </Button> \n                { item.Id && \n                  <Button\n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n                      AppUserRoleStore.deleteItem(item.Id).then( () => {\n                        history.push('/AppUserRolelist');\n                      })\n                    }}\n                  >\n                    Delete\n                  </Button>\n                }\n                <Button onClick={ () => { history.push('/AppUserRolelist');  }}>Back</Button>          \n              </ButtonGroup>\n\n          </Form>\n        </Formik>\n    </Container>\n  );\n};\n\nexport default observer(AppUserRoleEdit);\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRole\\AppUserRoleStore.ts",["626"],"\nimport { createContext } from \"react\";\nimport { observable, action, runInAction, makeObservable } from \"mobx\";\nimport agent from \"../../app/api/agent\";\nimport { AppUserRole, IAppUserRole } from \"./AppUserRole\";\nimport { resolveElement } from \"jodit/src/core/helpers\";\n\nconst IAppUserRoleAPI = \"/AppUserRole\";\n\nconst DBFun = {\n  list: (): Promise<IAppUserRole[]> => agent.requests.get(IAppUserRoleAPI),\n  RoleList: (Role: number): Promise<IAppUserRole[]> => agent.requests.get(`${IAppUserRoleAPI}/RoleList/${Role}`),\n  details: (Id: number) => agent.requests.get(`${IAppUserRoleAPI}/Details/${Id}`),\n  //RoleList: (Role: number) => agent.requests.get(`${IAppUserRoleAPI}/RoleList/${Role}`),\n  create: (item: IAppUserRole) => agent.requests.post(IAppUserRoleAPI, item),\n  update: (item: IAppUserRole) =>\n    agent.requests.put(`${IAppUserRoleAPI}/${item.Id}`, item),\n  delete: (Id: number) => agent.requests.del(`${IAppUserRoleAPI}/${Id}`),\n};\n\nexport default class AppUserRoleStoreImpl {\n\n  loading = false;\n  updating = false;\n  itemList: IAppUserRole[] = [];\n  item: AppUserRole = new AppUserRole()\n  roleList: IAppUserRole[] = [];\n\n  constructor() {\n    makeObservable(this, {\n         itemList: observable,\n         roleList: observable,\n         loading: observable,\n         updating: observable,\n         item: observable,\n         getList: action,\n         loadItem: action,\n         editItem: action\n    });\n  }\n\n  getList = async () => {        \n    this.loading = true;\n    try {               \n      this.itemList = await DBFun.list();       \n      this.loading = false;                   \n    } catch (error) {\n      runInAction( () => {\n        this.loading = false;            \n        throw error;\n      });\n    }\n  }\n\n  getRoleList = async (role: number) => {        \n    this.loading = true;\n    try {               \n      this.roleList = await DBFun.RoleList(role);       \n      this.loading = false;                   \n    } catch (error) {\n      runInAction( () => {\n        this.loading = false;            \n        throw error;\n      });\n    }\n  }\n\n  loadItem = async (id: number) => {\n    this.loading = true;\n    try {\n      this.itemList = await DBFun.list(); \n      this.item = await DBFun.details(id); \n      //this.item.AppUserRoleMasterId = '1';\n\n      this.loading = false;      \n      return this.item;     \n      } catch (error) {\n        console.log(error);\n        this.loading = false;\n      }\n  }\n\n editItem = async (item: IAppUserRole) => {    \n    this.loading = true;\n    try {        \n      let itm = new  AppUserRole();\n      if (item.Id) {\n        itm = await DBFun.update(item);\n      } else {\n        itm = await DBFun.create(item);\n      }\n      this.loading = false;         \n      return itm;   \n    } catch (error) {\n      runInAction( () => {\n        this.loading = false;        \n      });        \n      throw error;\n    }\n  };\n\n  deleteItem = async (id: number) => {\n    this.updating = true;\n    this.loading = true;\n    try {\n      await DBFun.delete(id);    \n      this.updating = false;   \n      this.loading = false;\n    } catch (error) {    \n      this.updating = false;  \n      this.loading = false;             \n      console.log(error);\n      throw error;\n    }\n  };  \n}\n\nexport const AppUserRoleContext = createContext(new AppUserRoleStoreImpl());\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRole\\AppUserRole.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\AppTableMasterList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\AppTableMasterEdit.tsx",["627","628","629","630","631","632","633"],"import { Button, ButtonGroup, Container, LinearProgress, List, ListItem, Paper, Table, TableContainer, TableHead, TableRow, TableCell, TableBody, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Link, AppBar, Tabs, Tab, Box, Typography } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { AppTableMaster } from './AppTableMaster';\nimport { AppTableMasterContext } from './AppTableMasterStore';\nimport { observer } from 'mobx-react-lite';\nimport { AppColumnMasterContext } from '../AppColumnMaster/AppColumnMasterStore';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport AppColumn from '../AppColumnMaster/AppColumn';\nimport { AppColumnMaster } from '../AppColumnMaster/AppColumnMaster';\nimport { ColumnDataType } from '../../app/common/SystemConstants';\nimport { TabPanel } from '@material-ui/lab';\n\ninterface DetailParms {\n  id: string;\n}\nconst AppTableMasterEdit: React.FC = () => {\n\n  const { id } = useParams<DetailParms>();\n  const AppTableMasterStore = useContext(AppTableMasterContext);\n  const AppColumnMasterStore = useContext(AppColumnMasterContext); \n \n  let history = useHistory();\n  const [item, setItem] = useState(new AppTableMaster());\n  const [loading, setLoading] = useState(true);\n\n  const [open, setOpen] = useState(false);\n  const [selectedColumn, setSelectedColumn] = useState(new AppColumnMaster());\n\n  const [tabValue, setTabValue] = useState(0);\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setTabValue(newValue);\n  };\n \n \n  \n  \n  \n  useEffect(() => {\n\n    AppTableMasterStore.loadItem(Number(id));\n    if (id) {      \n      AppColumnMasterStore.getColumnList(Number(id));\n      AppTableMasterStore.loadItem(Number(id)).then((val) => {\n        setItem(val as any);     \n        setLoading(false);   \n      });\n    } else {\n      setItem(new AppTableMaster()); \n      setLoading(false);     \n    }\n    \n  }, [id, AppTableMasterStore, AppTableMasterStore.loadItem, AppColumnMasterStore.getColumnList]);\n\n  const onItemSubmit = (values: any) => {    \n    setLoading(true);\n    AppTableMasterStore.editItem(values).then((val) => {\n      history.push('/AppTableMasterlist');\n      // debugger;\n      // setItem(new AppTableMaster(val));\n      // setLoading(false);\n    });\n  };\n\n  const openModel = (col: AppColumnMaster) => {  \n    if(!col.TableID){\n      col.TableID = item.Id;\n    }\n    setSelectedColumn(col);\n    setOpen(true);\n  };\n\n  const RefreshColumns = (col: AppColumnMaster) => {  \n    //refresh colu\n    AppColumnMasterStore.getColumnList(Number(id));\n    setOpen(false);\n  };\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    <Container component=\"main\" maxWidth=\"lg\">  \n\n      <Formik\n          initialValues={item}\n          validationSchema={Yup.object({\n            Title: Yup.string().required('Title required'),                     \n          })}\n          onSubmit={onItemSubmit}\n          \n        >\n          <Form > \n            {item.Id}\n            <MyCustomTxt   \n                name=\"Title\"                         \n                type=\"text\"                \n                autoFocus={true}\n                required={true}                                \n                label=\"Title\"                                                                     \n            />\n\n            {/* <MyCustomTxt   \n                name=\"UserAccess\"                         \n                type=\"text\"                \n                autoFocus={true}\n                required={false}   \n                multiline={true}                             \n                label=\"User Access\"                                                                     \n            /> */}\n                           \n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"                  \n                >\n                  Save\n                </Button> \n                { item.Id && \n                  <Button\n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n                      AppTableMasterStore.deleteItem(item.Id).then( () => {\n                        history.push('/AppTableMasterlist');\n                      })\n                    }}\n                  >\n                    Delete\n                  </Button>\n                }\n                <Button onClick={ () => { history.push('/AppTableMasterlist');  }}>Back</Button>   \n\n              </ButtonGroup>\n\n          </Form>\n        </Formik>\n\n\n        <List>\n          <ListItem divider>\n            {/* <h5>Column List</h5>   */}\n              \n            <div>\n              <AppBar position=\"static\">\n                <Tabs value={tabValue} onChange={handleChange} aria-label=\"simple tabs example\">\n                  <Tab label=\"Column List\" />\n                  <Tab label=\"Actions\" />                  \n                </Tabs>\n              </AppBar>                           \n          </div>\n      \n          </ListItem>\n          \n          <div hidden={tabValue != 0}>\n          <ListItem divider hidden={true}  >\n            <TableContainer component={Paper}>\n              <Table aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    {/* <TableCell>ID</TableCell> */}\n                    <TableCell align=\"left\">Title</TableCell>\n                    <TableCell align=\"left\">Type</TableCell>\n                    <TableCell align=\"left\">AppDataFiled</TableCell>\n                    {/* <TableCell align=\"left\">User Access</TableCell> */}\n                    <TableCell align=\"left\">Delete</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {AppColumnMasterStore.columnList.map((row) => (\n                    <TableRow key={row.Id} >\n                      {/* <TableCell component=\"th\" scope=\"row\"  >\n                        <NavLink to={\"/AppColumnMasterItemEdit/\" + row.Id } >{row.Id}</NavLink> \n                      </TableCell> */}\n                                              \n                      <TableCell align=\"left\"  >\n                        <Link href=\"#\" onClick={ () => { openModel( row ) } } >{row.Title}</Link>\n                        \n                      </TableCell>  \n                      <TableCell align=\"left\"> { ColumnDataType.find( u => u.Id == row.Type )?.value }</TableCell> \n                      <TableCell align=\"left\">{row.AppDataFiled}</TableCell> \n                      {/* <TableCell align=\"left\">{row.UserAccess}</TableCell>   */}\n                      <TableCell align=\"left\" >\n                        <DeleteOutlinedIcon onClick={ () => { AppColumnMasterStore.deleteItem(row.Id).then( () => {   AppColumnMasterStore.getColumnList(Number(id)); } )}}  />\n                      </TableCell>            \n                    </TableRow>\n                  ))}\n\n                  <TableRow key=\"AddNew\" >                                                                  \n                   \n                    <Button color=\"primary\" onClick={ () => { openModel( new AppColumnMaster() ) }}>Add New Column</Button>   \n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </ListItem>                    \n          </div>\n     \n      </List> \n\n      <Dialog onClose={() => {}} aria-labelledby=\"simple-dialog-title\" open={open}>\n        <DialogTitle id=\"simple-dialog-title\">Column</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <AppColumn initVal={selectedColumn} parentRefresh={RefreshColumns} />\n          </DialogContentText>\n        </DialogContent>           \n      </Dialog>      \n    </Container>\n\n\n  );\n};\n\nexport default observer(AppTableMasterEdit);\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\AppTableMasterStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\AppTableMaster.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumnMasterList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumnMasterEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumnMasterStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumnMaster.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRoleMaster\\AppUserRoleMasterList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRoleMaster\\AppUserRoleMasterEdit.tsx",["634"],"import { Button, ButtonGroup, Chip, Container, LinearProgress, TextField } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { AppUserRoleMaster } from './AppUserRoleMaster';\nimport { AppUserRoleMasterContext } from './AppUserRoleMasterStore';\nimport { observer } from 'mobx-react-lite';\nimport { AppUserRoleContext } from '../AppUserRole/AppUserRoleStore';\nimport { Autocomplete } from '@material-ui/lab';\nimport { UserManagerContext } from '../user/UserManagerStore';\nimport { AppUserRole } from '../AppUserRole/AppUserRole';\n\ninterface DetailParms {\n  id: string;\n}\nconst AppUserRoleMasterEdit: React.FC = () => {\n\n  const { id } = useParams<DetailParms>();\n  const AppUserRoleMasterStore = useContext(AppUserRoleMasterContext);\n  const AppUserRoleStore = useContext(AppUserRoleContext); \n  const UserManagerStore = useContext(UserManagerContext);\n     \n  \n  let history = useHistory();\n  const [item, setItem] = useState(new AppUserRoleMaster());  \n  const [loading, setLoading] = useState(true);\n\n  const [userRole, setUserRole] = useState(new AppUserRole());\n  //const [user, setUser] = useState(new UserManager());\n  \n  useEffect(() => {\n    \n    AppUserRoleStore.getRoleList(Number(id));\n    UserManagerStore.getList();\n\n    AppUserRoleMasterStore.loadItem(Number(id));\n    if (id) {\n      AppUserRoleMasterStore.loadItem(Number(id)).then((val) => {\n        setItem(val as any);                       \n        setLoading(false);   \n      });\n    } else {\n      setItem(new AppUserRoleMaster()); \n      setLoading(false);     \n    }\n    \n  }, [id, AppUserRoleMasterStore, AppUserRoleMasterStore.loadItem, AppUserRoleStore.getRoleList]);\n\n  const onItemSubmit = (values: any) => {    \n    setLoading(true);\n    AppUserRoleMasterStore.editItem(values).then((val) => {\n\t  history.push('/AppUserRoleMasterlist');\n      //debugger;\n      //setItem(new AppUserRoleMaster(val));\n      //setLoading(false);\n    });\n  };\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    <Container component=\"main\" maxWidth=\"xs\">  \n\n      <Formik\n          initialValues={item}\n          validationSchema={Yup.object({\n            Title: Yup.string().required('Title required'),                     \n          })}\n          onSubmit={onItemSubmit}\n        >\n          <Form > \n            {item.Id}\n            <MyCustomTxt   \n                name=\"Title\"                         \n                type=\"text\"                \n                autoFocus={true}\n                required={true}                                \n                label=\"Title\"                                                                     \n              />\n\n              \n                           \n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"                  \n                >\n                  Save\n                </Button> \n                { item.Id && \n                  <Button\n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n                      AppUserRoleMasterStore.deleteItem(item.Id).then( () => {\n                        history.push('/AppUserRoleMasterlist');\n                      })\n                    }}\n                  >\n                    Delete\n                  </Button>\n                }\n                <Button onClick={ () => { history.push('/AppUserRoleMasterlist');  }}>Back</Button>          \n              </ButtonGroup>\n\n          </Form>\n        </Formik>\n\n        { AppUserRoleStore.roleList.length > 0 && AppUserRoleStore.roleList.map( (row) => ( \n            // <div>{row.UserId}</div> \n              <Chip label={row.UserId} onDelete={ () => {  \n                  setLoading(true);\n                  AppUserRoleStore.deleteItem(row.Id).then( () => {\n                    AppUserRoleStore.getRoleList(Number(id)).then( () => {\n                      setLoading(false);\n                    } ); \n                  })\n               }} />\n            ) ) }\n\n\n        <Formik\n          initialValues={userRole}\n\n          validationSchema={Yup.object({\n            // UserId: Yup.string().required('UserId required'), \n            // AppUserRoleMasterId: Yup.string().required('AppUserRoleMasterId required'),                    \n          })}\n          \n          onSubmit={\n            () => {\n              if( userRole.AppUserRoleMasterId && userRole.UserId ){\n                setLoading(true);\n                AppUserRoleStore.editItem(userRole).then((val) => {\n                  AppUserRoleStore.getRoleList(Number(id)).then( () => {\n                    setLoading(false);\n                  } );                 \n                });\n              }\n            }\n          }\n        >\n          <Form > \n           \n         \n\n          <Autocomplete   \n                                                               \n            id=\"UserIdToAdd\"\n            options={UserManagerStore.itemList}\n            getOptionLabel={(option) =>  option.Email ? option.DisplayName : '-'}                \n            style={{ width: 300, paddingTop: 20  }}\n            renderInput={(params) => <TextField name=\"UserId\"  {...params} label=\"User Id\" variant=\"outlined\" />}\n\n            onChange={(event:any, newValue:any) => {\n              var u = new AppUserRole(); \n              u.UserId = newValue.Username;\n              u.AppUserRoleMasterId = item.Id;\n              setUserRole(u);              \n              debugger;                     \n            }}\n          />\n        \n            {/* <MyCustomTxt   \n                name=\"Title\"                         \n                type=\"text\"                \n                autoFocus={true}\n                required={true}                                \n                label=\"User\"                                                                     \n              /> */}\n\n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"                  \n                >\n                  Add User\n                </Button>                                          \n              </ButtonGroup>\n\n          </Form>\n        </Formik>\n\n    </Container>\n  );\n};\n\nexport default observer(AppUserRoleMasterEdit);\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRoleMaster\\AppUserRoleMasterStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRoleMaster\\AppUserRoleMaster.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserAccess\\AppUserAccessList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserAccess\\AppUserAccessEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserAccess\\AppUserAccessStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserAccess\\AppUserAccess.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumn.tsx",["635","636","637","638","639","640","641","642"],"import { Button, ButtonGroup, Container, LinearProgress, TextField } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { AppColumnMaster } from './AppColumnMaster';\nimport { AppColumnMasterContext } from './AppColumnMasterStore';\nimport { observer } from 'mobx-react-lite';\nimport { ColumnAttachmentType, ColumnDataType, SystemConstant } from '../../app/common/SystemConstants';\nimport { Autocomplete } from '@material-ui/lab';\nimport { AppConfigTypeContext } from '../AppConfigType/AppConfigTypeStore';\nimport { AppConfigType } from '../AppConfigType/AppConfigType';\n\n\n\ntype CustomProps = {  initVal : AppColumnMaster, parentRefresh : any } ;\n\nconst AppColumn: React.FC<CustomProps> = ({initVal, parentRefresh}) => {   \n\n  const AppColumnMasterStore = useContext(AppColumnMasterContext);\n  const AppConfigTypeStore = useContext(AppConfigTypeContext);\n\n  const [item, setItem] = useState(initVal);\n  const [loading, setLoading] = useState(false);\n\n  const [type, setType] = useState(initVal.Type);\n  const [configId, setConfigId] = useState(initVal.ConfigId);\n  const [attachmentConfig, setAttachmentConfig] = useState(initVal.AttachmentConfig);\n\n  useEffect(() => {\n    AppConfigTypeStore.getList();\n  });\n  \n  const onItemSubmit = (values: any) => { \n    debugger;      \n    setLoading(true);\n    values.Type = type;\n    values.ConfigId = configId\n    values.AttachmentConfig = attachmentConfig\n\n    AppColumnMasterStore.editItem(values).then((val) => {\n      debugger;\n      parentRefresh();\n      setLoading(false);\n    });\n  };\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    <Container component=\"main\" maxWidth=\"xs\">  \n\n      <Formik\n          initialValues={item}\n          validationSchema={Yup.object({\n            Title: Yup.string().required('Title required'),                     \n          })}\n          onSubmit={onItemSubmit}\n        >\n          <Form > \n            {item.Id}\n            <MyCustomTxt   \n                name=\"Title\"                         \n                type=\"text\"                \n                autoFocus={true}\n                required={true}                                \n                label=\"Title\"                                                                     \n            />\n            \n            <Autocomplete                \n              value={ ColumnDataType.find( u => u.Id == item.Type ) } \n              id=\"Type\"              \n              options={ColumnDataType}\n              getOptionLabel={(option:SystemConstant) => option.value }                \n              style={{ width: 300, paddingTop: 20, paddingBottom : 20 }}\n              renderInput={(params:any) => <TextField {...params} label=\"Type\" variant=\"outlined\" />}\n\n              onChange={(event:any, newValue:any) => {   \n                setType(newValue.Id);         \n                //debugger;                     \n              }}\n            />\n            { type == '6' &&\n            <Autocomplete                \n              value={ AppConfigTypeStore.itemList.find( u => u.Id == item.ConfigId ) } \n              id=\"ConfigId\"              \n              options={AppConfigTypeStore.itemList}\n              getOptionLabel={(option:AppConfigType) => option.Title }                \n              style={{ width: 300, paddingTop: 20, paddingBottom : 20 }}\n              renderInput={(params:any) => <TextField {...params} label=\"Config Type\" variant=\"outlined\" />}\n\n              onChange={(event:any, newValue:any) => {   \n                setConfigId(Number(newValue.Id));         \n                //debugger;                     \n              }}\n            />\n            }\n\n            { type == '7' &&\n            <Autocomplete                \n              value={ ColumnAttachmentType.find( u => u.Id == item.AttachmentConfig.toString() ) } \n              id=\"AttachmentConfig\"              \n              options={ColumnAttachmentType}\n              getOptionLabel={(option:SystemConstant) => option.value }                \n              style={{ width: 300, paddingTop: 20, paddingBottom : 20 }}\n              renderInput={(params:any) => <TextField {...params} label=\"Attachment Type\" variant=\"outlined\" />}\n\n              onChange={(event:any, newValue:any) => {   \n                setAttachmentConfig( Number(newValue.Id));         \n                //debugger;                     \n              }}\n            />\n            }\n\n            {/* <MyCustomTxt   \n                name=\"UserAccess\"                         \n                type=\"text\"                \n                autoFocus={true}\n                required={false}   \n                multiline={true}                             \n                label=\"User Access\"                                                                     \n            /> */}\n                           \n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"                  \n                >\n                  Save\n                </Button> \n                { initVal.Id && \n                  <Button\n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n                      AppColumnMasterStore.deleteItem(initVal.Id).then( () => {\n                        //history.push('/AppColumnMasterlist');\n                        parentRefresh();\n                      })\n                    }}\n                  >\n                    Delete\n                  </Button>\n                }\n                <Button onClick={ () => { parentRefresh();  }}>Close</Button>          \n              </ButtonGroup>\n\n          </Form>\n        </Formik>\n    </Container>\n  );\n};\n\nexport default observer(AppColumn);\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\SystemConstants.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppData\\AppDataEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppData\\AppDataList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppData\\AppData.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppData\\AppDataStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppStatusList\\AppStatusListList.tsx",["643","644","645"],"import React, { useContext, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { AppStatusListContext } from './AppStatusListStore';\nimport { Button, ButtonGroup, LinearProgress, List, ListItem, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport { AppTableMasterContext } from '../AppTableMaster/AppTableMasterStore';\nimport { Item } from 'semantic-ui-react';\n \nconst AppStatusListList: React.FC = () => {\n\n  const AppStatusListStore = useContext(AppStatusListContext); \n  const AppTableMasterStore = useContext(AppTableMasterContext);    \n  \n    useEffect(() => {  \n      AppTableMasterStore.getList();     \n      AppStatusListStore.getList();                  \n    }, [AppStatusListStore, AppStatusListStore.getList])       \n\n    if(AppStatusListStore.loading){\n      return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \n    }\n\n    return (\n      <List>\n        <ListItem divider>\n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n          <Button >\n            <NavLink to=\"/AppStatusListItemEdit/\" >Add New</NavLink> \n          </Button>\n          <Button onClick={ () => { AppStatusListStore.getList(); }}>Refresh</Button>          \n        </ButtonGroup>\n        </ListItem>\n        \n        <ListItem divider>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  {/* <TableCell>ID</TableCell> */}\n                  <TableCell align=\"left\" width=\"50\">Id</TableCell>\n                  <TableCell align=\"left\" width=\"50\">Order</TableCell>\n                  <TableCell align=\"left\">Title</TableCell>\n                  <TableCell align=\"left\">Table</TableCell>\n                  <TableCell align=\"left\">Delete</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {AppStatusListStore.itemList.map((row) => (\n                  <TableRow key={row.Id} >\n                    <TableCell align=\"right\">{row.Id}</TableCell>\n                    <TableCell align=\"right\">{row.Order}</TableCell>\n                    <TableCell component=\"th\" scope=\"row\"  >\n                      <NavLink to={\"/AppStatusListItemEdit/\" + row.Id } >{row.Title}</NavLink> \n                    </TableCell>\n                    <TableCell align=\"left\">{ AppTableMasterStore.itemList.find( u => u.Id == row.TableId )?.Title } </TableCell>\n                                             \n                    {/* <TableCell align=\"right\">{row.Title}</TableCell>   */}\n                    <TableCell align=\"left\" >\n                      <DeleteOutlinedIcon onClick={ () => { AppStatusListStore.deleteItem(row.Id).then( () => {   AppStatusListStore.getList(); })}}  />\n                    </TableCell>            \n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </ListItem>\n\n      </List>        \n     \n    );\n};\n\nexport default observer(AppStatusListList);\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppStatusList\\AppStatusListEdit.tsx",["646","647"],"import { Button, ButtonGroup, Container, LinearProgress, TextField } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { AppStatusList } from './AppStatusList';\nimport { AppStatusListContext } from './AppStatusListStore';\nimport { observer } from 'mobx-react-lite';\nimport { Autocomplete } from '@material-ui/lab';\nimport { AppTableMasterContext } from '../AppTableMaster/AppTableMasterStore';\n\ninterface DetailParms {\n  id: string;\n}\nconst AppStatusListEdit: React.FC = () => {\n\n  const { id } = useParams<DetailParms>();\n  const AppStatusListStore = useContext(AppStatusListContext);\n  const AppTableMasterStore = useContext(AppTableMasterContext);\n \n  let history = useHistory();\n  const [item, setItem] = useState(new AppStatusList());\n  const [table, setTable] = useState(0);\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() => {\n\n    AppTableMasterStore.getList();\n    AppStatusListStore.loadItem(Number(id));\n    if (id) {\n      AppStatusListStore.loadItem(Number(id)).then((val) => {\n        setItem(val as any); \n        var vl = val!.TableId;  \n        setTable(vl);  \n        setLoading(false);   \n      });\n    } else {\n      setItem(new AppStatusList()); \n      setLoading(false);     \n    }\n    \n  }, [id, AppStatusListStore, AppStatusListStore.loadItem]);\n\n  const onItemSubmit = (values: any) => {    \n      setLoading(true);\n      values.TableId = table;\n      AppStatusListStore.editItem(values).then((val) => {\n      history.push('/AppStatusListlist');\n    });\n  };\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    <Container component=\"main\" maxWidth=\"xs\">  \n      <h3>Status</h3>\n      <Formik\n          initialValues={item}\n          validationSchema={Yup.object({\n            Title: Yup.string().required('Title required'),                     \n          })}\n          onSubmit={onItemSubmit}\n        >\n          <Form > \n            {item.Id}\n\n            <MyCustomTxt   \n              name=\"Order\"                         \n              type=\"number\"                               \n              label=\"Order\"                                                                     \n            />\n            table id : {table}\n            <Autocomplete                             \n              value={ AppTableMasterStore.itemList.find( u => u.Id == table ) } \n              id=\"TableId\"\n              options={AppTableMasterStore.itemList}\n              getOptionLabel={(option) => option.Title }                \n              style={{ paddingTop: 20  }}\n              renderInput={(params) => <TextField {...params} label=\"Table\" variant=\"outlined\" />}\n\n              onChange={(event:any, newValue:any) => {\n                if(newValue){\n                  if(newValue){\n                    setTable(newValue.Id);\n                  }                  \n                }                \n              }}\n            /> \n\n            <MyCustomTxt   \n              name=\"Title\"                         \n              type=\"text\"                \n              autoFocus={true}\n              required={true}                                \n              label=\"Title\"                                                                     \n            />\n                           \n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"                  \n                >\n                  Save\n                </Button> \n                { item.Id && \n                  <Button\n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n                      AppStatusListStore.deleteItem(item.Id).then( () => {\n                        history.push('/AppStatusListlist');\n                      })\n                    }}\n                  >\n                    Delete\n                  </Button>\n                }\n                <Button onClick={ () => { history.push('/AppStatusListlist');  }}>Back</Button>          \n              </ButtonGroup>\n          </Form>\n        </Formik>\n    </Container>\n  );\n};\n\nexport default observer(AppStatusListEdit);\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppStatusList\\AppStatusList.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppStatusList\\AppStatusListStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppHistory\\AppHistoryList.tsx",["648","649","650","651","652","653","654","655","656","657","658","659","660","661","662","663","664"],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppHistory\\AppHistoryEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppHistory\\AppHistoryStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppHistory\\AppHistory.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfigType\\AppConfigTypeList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfigType\\AppConfigTypeEdit.tsx",["665"],"import { Button, ButtonGroup, Container, LinearProgress, Link, List, ListItem, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { AppConfigType } from './AppConfigType';\nimport { AppConfigTypeContext } from './AppConfigTypeStore';\nimport { observer } from 'mobx-react-lite';\nimport { AppConfigContext } from '../AppConfig/AppConfigStore';\n\ninterface DetailParms {\n  id: string;\n}\nconst AppConfigTypeEdit: React.FC = () => {\n\n  const { id } = useParams<DetailParms>();\n  const AppConfigTypeStore = useContext(AppConfigTypeContext);\n  const AppConfigStore = useContext(AppConfigContext);  \n \n  let history = useHistory();\n  const [item, setItem] = useState(new AppConfigType());\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() => {\n\n    AppConfigTypeStore.loadItem(Number(id));\n    if (id) {\n      AppConfigStore.getConfigList(Number(id)); \n      AppConfigTypeStore.loadItem(Number(id)).then((val) => {\n        setItem(val as any);     \n        setLoading(false);   \n      });\n    } else {\n      setItem(new AppConfigType()); \n      setLoading(false);     \n    }\n    \n  }, [id, AppConfigTypeStore, AppConfigTypeStore.loadItem]);\n\n  const onItemSubmit = (values: any) => {    \n    setLoading(true);\n    AppConfigTypeStore.editItem(values).then((val) => {\n\t  history.push('/AppConfigTypelist');\n      //debugger;\n      //setItem(new AppConfigType(val));\n      //setLoading(false);\n    });\n  };\n\n  const openModel = (col: AppConfigType) => {  \n    // if(!col.TableID){\n    //   col.TableID = item.Id;\n    // }\n    // setSelectedColumn(col);\n    // setOpen(true);\n  };\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    <Container component=\"main\" maxWidth=\"xs\">  \n\n      <Formik\n          initialValues={item}\n          validationSchema={Yup.object({\n            Title: Yup.string().required('Title required'),                     \n          })}\n          onSubmit={onItemSubmit}\n        >\n          <Form > \n            {item.Id}\n            <MyCustomTxt   \n                name=\"Title\"                         \n                type=\"text\"                \n                autoFocus={true}\n                required={true}                                \n                label=\"Title\"                                                                     \n              />\n                           \n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"                  \n                >\n                  Save\n                </Button> \n                { item.Id && \n                  <Button\n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n                      AppConfigTypeStore.deleteItem(item.Id).then( () => {\n                        history.push('/AppConfigTypelist');\n                      })\n                    }}\n                  >\n                    Delete\n                  </Button>\n                }\n                <Button onClick={ () => { history.push('/AppConfigTypelist');  }}>Back</Button>          \n              </ButtonGroup>\n\n          </Form>\n        </Formik>\n\n\n        <List>\n          <ListItem divider>\n            <h5>Config List</h5>  \n          </ListItem>\n          \n           \n          <ListItem divider>\n            <TableContainer component={Paper}>\n              <Table aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    <TableCell>Order</TableCell>\n                    <TableCell align=\"left\">Title</TableCell>\n                    {/* <TableCell align=\"left\">Type</TableCell>\n                    <TableCell align=\"left\">User Access</TableCell>\n                    <TableCell align=\"left\">Delete</TableCell> */}\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  { AppConfigStore.AppConfigList.map((row) => (\n                    <TableRow key={row.Id} >\n                      {/* <TableCell component=\"th\" scope=\"row\"  >\n                        <NavLink to={\"/AppColumnMasterItemEdit/\" + row.Id } >{row.Id}</NavLink> \n                      </TableCell> */}\n                      <TableCell align=\"left\" width=\"50\">{row.Order}</TableCell>                          \n                      <TableCell align=\"left\"  >\n                        <Link href=\"#\" onClick={ () => { openModel( row as any ) } } >{row.Title}</Link>\n                        \n                      </TableCell>  \n                      {/* <TableCell align=\"left\"> { ColumnDataType.find( u => u.Id == row.Type )?.value }</TableCell>  \n                      <TableCell align=\"left\">{row.UserAccess}</TableCell>  \n                      <TableCell align=\"left\" >\n                        <DeleteOutlinedIcon onClick={ () => { AppColumnMasterStore.deleteItem(row.Id).then( () => {   AppColumnMasterStore.getColumnList(id); } )}}  />\n                      </TableCell>             */}\n                    </TableRow>\n                  ))}\n\n                  <TableRow key=\"AddNew\"  >   \n                    <TableCell colSpan={2}>\n                      <Button color=\"primary\" onClick={ () => { openModel( new AppConfigType() ) }}>Add New {item.Title}</Button>   \n                    </TableCell>                                                                                  \n                    \n                  </TableRow>\n\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </ListItem>                    \n      </List>\n\n    </Container>\n  );\n};\n\nexport default observer(AppConfigTypeEdit);\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfigType\\AppConfigTypeStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfigType\\AppConfigType.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfig\\AppConfigList.tsx",["666","667"],"import React, { useContext, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { AppConfigContext } from './AppConfigStore';\nimport { Button, ButtonGroup, LinearProgress, List, ListItem, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport { AppConfigTypeContext } from '../AppConfigType/AppConfigTypeStore';\n \nconst AppConfigList: React.FC = () => {\n\n  const AppConfigTypeStore = useContext(AppConfigTypeContext);\n  const AppConfigStore = useContext(AppConfigContext);  \n\n  \n    useEffect(() => {       \n      AppConfigTypeStore.getList();\n      AppConfigStore.getList();                        \n    }, [AppConfigStore, AppConfigStore.getList, AppConfigTypeStore.getList])       \n\n    if(AppConfigStore.loading){\n      return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \n    }\n\n    return (\n      <List>\n        <ListItem divider>\n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n          <Button >\n            <NavLink to=\"/AppConfigItemEdit/\" >Add New</NavLink> \n          </Button>\n          <Button onClick={ () => { AppConfigStore.getList(); }}>Refresh</Button>          \n        </ButtonGroup>\n        </ListItem>\n        \n        <ListItem divider>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell align=\"left\">Order</TableCell>\n                  <TableCell align=\"left\">Title</TableCell>\n                  <TableCell align=\"left\">Type</TableCell>                  \n                  <TableCell align=\"left\">Delete</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {AppConfigStore.itemList.map((row) => (\n                  <TableRow key={row.Id} >\n                    <TableCell align=\"left\">{ row.Order }</TableCell>\n                    <TableCell component=\"th\" scope=\"row\"  >\n                      <NavLink to={\"/AppConfigItemEdit/\" + row.Id } >{row.Title}</NavLink> \n                    </TableCell>\n                                             \n                    <TableCell align=\"left\">{ AppConfigTypeStore.itemList.find( u => u.Id == row.Type )?.Title }</TableCell>  \n                    <TableCell align=\"left\" >\n                      <DeleteOutlinedIcon onClick={ () => { AppConfigStore.deleteItem(row.Id).then( () => {   AppConfigStore.getList(); })}}  />\n                    </TableCell>            \n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </ListItem>\n      </List>             \n    );\n};\n\nexport default observer(AppConfigList);\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfig\\AppConfigStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfig\\AppConfig.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfig\\AppConfigEdit.tsx",["668","669","670","671","672","673","674","675","676","677","678","679"],"import { Button, ButtonGroup, Container, LinearProgress, List, ListItem, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { AppConfig } from './AppConfig';\nimport { AppConfigContext } from './AppConfigStore';\nimport { observer } from 'mobx-react-lite';\nimport { Autocomplete } from '@material-ui/lab';\nimport { AppConfigTypeContext } from '../AppConfigType/AppConfigTypeStore';\nimport { isTypeAssertionExpression } from 'typescript';\n\ninterface DetailParms {\n  id: string;\n}\nconst AppConfigEdit: React.FC = () => {\n\n  const { id } = useParams<DetailParms>();\n  const AppConfigTypeStore = useContext(AppConfigTypeContext);\n  const AppConfigStore = useContext(AppConfigContext);\n \n \n  let history = useHistory();\n  const [item, setItem] = useState(new AppConfig());\n  const [type, setType] = useState(0);\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() => {\n\n    AppConfigTypeStore.getList(); \n    AppConfigStore.loadItem(Number(id));\n    if (id) {\n      AppConfigStore.loadItem(Number(id)).then((val) => {\n        setItem(val as any); \n        var ty = val!.Type;\n        setType(ty);    \n        setLoading(false);   \n      });\n    } else {\n      setItem(new AppConfig()); \n      setLoading(false);     \n    }\n    \n  }, [id, AppConfigStore, AppConfigStore.loadItem]);\n\n  const onItemSubmit = (values: any) => {    \n    setLoading(true);\n    values.Type = type;\n    \n    AppConfigStore.editItem(values).then((val) => {\n\t    history.push('/AppConfiglist');\n    });\n  }; \n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    <Container component=\"main\" maxWidth=\"xs\">  \n\n      <Formik\n          initialValues={item}\n          validationSchema={Yup.object({\n            Title: Yup.string().required('Title required'),                     \n          })}\n          onSubmit={onItemSubmit}\n        >\n          <Form > \n            {item.Id}\n            <MyCustomTxt   \n              name=\"Title\"                         \n              type=\"text\"                \n              autoFocus={true}\n              required={true}                                \n              label=\"Title\"                                                                     \n            />\n            Type : {type}\n            <Autocomplete                             \n              value={ AppConfigTypeStore.itemList.find( u => u.Id == type ) } \n              id=\"Type\"\n              options={AppConfigTypeStore.itemList}\n              getOptionLabel={(option) => option.Title }                \n              style={{ width: 300, paddingTop: 20  }}\n              renderInput={(params) => <TextField {...params} label=\"Type\" variant=\"outlined\" />}\n\n              onChange={(event:any, newValue:any) => {\n                if(newValue){\n                  setType(newValue.Id);\n                }                \n              }}\n            />\n\n            <MyCustomTxt   \n              name=\"Order\"                         \n              type=\"number\"                               \n              label=\"Order\"                                                                     \n            />\n\n            <MyCustomTxt   \n              name=\"Det1\"                         \n              type=\"text\"                               \n              label=\"Det1\"                                                                     \n            />\n              <MyCustomTxt   \n              name=\"Det2\"                         \n              type=\"text\"                                \n              label=\"Det2\"                                                                     \n            />\n\n            <MyCustomTxt   \n              name=\"Det3\"                         \n              type=\"text\"                               \n              label=\"Det3\"                                                                     \n            />\n            <MyCustomTxt   \n              name=\"Det4\"                         \n              type=\"text\"                                                \n              label=\"Det4\"                                                                     \n            />\n            <MyCustomTxt   \n              name=\"Det5\"                         \n              type=\"text\"                                             \n              label=\"Det5\"                                                                     \n            />            \n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"                  \n                >\n                  Save\n                </Button> \n                { item.Id && \n                  <Button\n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n                      AppConfigStore.deleteItem(item.Id).then( () => {\n                        history.push('/AppConfiglist');\n                      })\n                    }}\n                  >\n                    Delete\n                  </Button>\n                }\n                <Button onClick={ () => { history.push('/AppConfiglist');  }}>Back</Button>          \n              </ButtonGroup>\n\n          </Form>\n        </Formik>\n\n         \n\n    </Container>\n  );\n};\n\nexport default observer(AppConfigEdit);\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAction\\AppActionEdit.tsx",["680","681","682","683","684","685","686","687","688","689"],"import { Button, ButtonGroup, Checkbox, Chip, Container, FormControl, FormControlLabel, InputLabel, LinearProgress, MenuItem, Select, TextField } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { AppAction } from './AppAction';\nimport { AppActionContext } from './AppActionStore';\nimport { observer } from 'mobx-react-lite';\nimport { Autocomplete } from '@material-ui/lab';\nimport { AppStatusList } from '../AppStatusList/AppStatusList';\nimport { AppStatusListContext } from '../AppStatusList/AppStatusListStore';\nimport MyDropDown from '../../app/common/form/MyDropDown';\nimport { AppConfigContext } from '../AppConfig/AppConfigStore';\nimport { AppTableMasterContext } from '../AppTableMaster/AppTableMasterStore';\nimport { AppFlowContext } from '../AppFlow/AppFlowStore';\nimport { AppConfig } from '../AppConfig/AppConfig';\nimport MyCheckBox from '../../app/common/form/MyCheckBox';\n\ninterface DetailParms {\n  id: string;\n}\nconst AppActionEdit: React.FC = () => {\n\n  const { id } = useParams<DetailParms>();\n  const AppFlowStore = useContext(AppFlowContext);  \n  const AppActionStore = useContext(AppActionContext);\n  const AppStatusListStore = useContext(AppStatusListContext);\n  const AppConfigStore = useContext(AppConfigContext);\n  const AppTableMasterStore = useContext(AppTableMasterContext);\n  \n \n  let history = useHistory();\n  const [item, setItem] = useState(new AppAction());\n  const [loading, setLoading] = useState(true);\n  const [fromStatusList, setFromStatusList] = useState<AppStatusList[]>();\n  \n\n  const ActionTypeList = [{Id: \"Action\", Title: 'Action'}, {Id: \"Query\", Title: 'Query'}, {Id: \"FileDownload\", Title: 'FileDownload'}];\n  \n  useEffect(() => {\n   \n    AppFlowStore.getList();\n    AppTableMasterStore.getList();\n   \n    AppActionStore.loadItem(Number(id));\n    if (id) {\n      AppActionStore.loadItem(Number(id)).then((val) => {\n\n        AppStatusListStore.getStatusList(Number(val?.TableId));\n        val!.InitStatus = val!.InitStatus ? true : false;\n\n        setItem(val as AppAction);   \n        setFromStatusList(val?.FromStatusList);\n        setLoading(false);   \n      });\n    } else {\n      setItem(new AppAction()); \n      setLoading(false);     \n    }\n    \n  }, [id, AppActionStore, AppActionStore.loadItem]);\n\n  const onItemSubmit = (values: any) => {  \n    debugger;\n    //return;  \n    values.FromStatusList = fromStatusList;\n    setLoading(true);\n   \n    AppActionStore.editItem(values).then((val) => {\n\t  history.push('/AppActionlist');\n      //debugger;\n      //setItem(new AppAction(val));\n      //setLoading(false);\n    });\n  };\n\n  const onTableChange = (event: any) => {\n    alert(event.target.value as string);\n  };\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    <Container component=\"main\" maxWidth=\"xs\">  \n\n      <Formik\n          initialValues={item}\n          validationSchema={Yup.object({\n            Action: Yup.string().required('Title required'),                     \n          })}\n          onSubmit={onItemSubmit}\n        >\n          <Form > \n            {item.Id} <br/>                                 \n          <FormControlLabel control={<Checkbox checked={item.InitStatus}  />} label=\"Init Status\"            \n              onChange={ () => { item.InitStatus = item.InitStatus ? false : true; setItem(item);  }}           \n          />\n            <MyDropDown value={item.ActionType} label=\"ActionType\" list={ActionTypeList as any} name=\"ActionType\" /> \n            <MyDropDown value={item.FlowId} label=\"Flow\" list={AppFlowStore.itemList as any} name=\"FlowId\" />  \n            <MyDropDown value={item.TableId} label=\"Table\" list={AppTableMasterStore.itemList as any} name=\"TableId\" \n              handleChange={ (event: any) => { \n                debugger;\n                item.TableId = Number(event.target.value);\n                setItem(item);\n                AppStatusListStore.getStatusList(Number(event.target.value));\n              }} />\n\n            <Autocomplete  className=\"customFieldMargin\"  value={fromStatusList} multiple id=\"FromStatusList\"          \n              options={AppStatusListStore.AppStatusList as any[]} getOptionLabel={(option:AppStatusList) => option.Title}                  \n              freeSolo\n              renderTags={(value, getTagProps) =>\n                value.map((option:any, index) => (\n                  fromStatusList  && <Chip variant=\"outlined\" label={option.Title} {...getTagProps({ index })} /> \n                ))\n              }\n              renderInput={(params) => (\n                <TextField {...params} variant=\"outlined\" label=\"From Status\" placeholder=\"From Status\" fullWidth />\n              )}\n              \n              onChange={(event:any, newValue:any) => {\n                debugger;\n                var unq = true;\n                for(let i=0;i<newValue.length-1;i++){\n                  if( newValue[i].Id == newValue[newValue.length-1].Id){\n                    unq = false;\n                    break;\n                  }\n                }\n                if(unq){\n                  setFromStatusList(newValue); \n                }                                          \n              }}\n            />\n\n            <MyCustomTxt  name=\"Action\" type=\"text\"  autoFocus={true} required={true} label=\"Action\" />              \n            <MyDropDown value={item.ToStatusId} label=\"To Status\" list={AppStatusListStore.AppStatusList as any} name=\"ToStatusId\" />                    \n            <MyCustomTxt value={item.WhenXml} label=\"WhenXml\" type=\"text\" name=\"WhenXml\"  multiline={true}  /> \n            <MyCustomTxt value={item.ActionXml} label=\"ActionXml\" type=\"text\" name=\"ActionXml\"  multiline={true}  />                 \n\n            <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"                  \n              >\n                Save\n              </Button> \n              { item.Id && \n                <Button\n                  type=\"button\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"                    \n                  onClick={ () => {\n                    AppActionStore.deleteItem(item.Id).then( () => {\n                      history.push('/AppActionlist');\n                    })\n                  }}\n                >\n                  Delete\n                </Button>\n              }\n              <Button onClick={ () => { history.push('/AppActionlist');  }}>Back</Button>          \n            </ButtonGroup>\n\n          </Form>\n        </Formik>\n    </Container>\n  );\n};\n\nexport default observer(AppActionEdit);\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAction\\AppActionList.tsx",["690","691","692","693","694"],"import React, { useContext, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { AppActionContext } from './AppActionStore';\nimport { Badge, Button, ButtonGroup, LinearProgress, List, ListItem, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport { AppFlowContext } from '../AppFlow/AppFlowStore';\nimport { AppTableMasterContext } from '../AppTableMaster/AppTableMasterStore';\nimport { AppStatusListContext } from '../AppStatusList/AppStatusListStore';\n \nconst AppActionList: React.FC = () => {\n\n  const AppActionStore = useContext(AppActionContext);   \n  const AppFlowStore = useContext(AppFlowContext);  \n  const AppTableMasterStore = useContext(AppTableMasterContext);\n  const AppStatusListStore = useContext(AppStatusListContext);\n  \n    useEffect(() => {     \n      AppFlowStore.getList();\n      AppTableMasterStore.getList();\n      AppStatusListStore.getList();\n\n      AppActionStore.getList();                  \n    }, [AppActionStore, AppActionStore.getList])       \n\n    if(AppActionStore.loading){\n      return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \n    }\n\n    const ShowDesc = (text: string) => {    \n      debugger;\n      var res = \"\";\n      if(text){\n        var parser = new DOMParser();\n        var xmlDoc = parser.parseFromString(text,\"text/xml\");\n        res = xmlDoc.getElementsByTagName(\"Desc\")[0].innerHTML;\n      }\n      return res;\n    };\n\n    return (\n      <List>\n        <ListItem divider>\n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n          <Button >\n            <NavLink to=\"/AppActionItemEdit/\" >Add New</NavLink> \n          </Button>\n          <Button onClick={ () => { AppActionStore.getList(); }}>Refresh</Button>          \n        </ButtonGroup>\n        </ListItem>\n        \n        <ListItem divider>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>ID</TableCell>\n                  <TableCell align=\"left\">Action</TableCell>\n                  \n                  <TableCell align=\"left\">From Status</TableCell>\n                  <TableCell align=\"left\">To Status</TableCell>\n                  <TableCell align=\"left\">ActionType</TableCell>\n                  <TableCell align=\"left\">Flow</TableCell>\n                  <TableCell align=\"left\">TableId</TableCell>\n                  <TableCell align=\"left\">WhenXml</TableCell>\n                  <TableCell align=\"left\">ActionXml</TableCell>\n\n                  <TableCell align=\"right\">Delete</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {AppActionStore.itemList.map((row) => (\n                  <TableRow key={row.Id} >\n                    <TableCell component=\"th\" scope=\"row\"  >{row.Id}</TableCell>\n                                             \n                    <TableCell align=\"left\">\n                      <Badge color=\"secondary\" variant=\"dot\" invisible={!row.InitStatus} >\n                        <NavLink to={\"/AppActionItemEdit/\" + row.Id } >{row.Action}</NavLink>\n                      </Badge> \n                    </TableCell> \n\n                    <TableCell align=\"left\">\n                      { row.FromStatusList.map( (fs, i, arr) =>(<span key={fs.Id} >{fs.Title}{i != (arr.length-1) ? ',' : ''} </span>) ) } \n                    </TableCell>\n                    <TableCell align=\"left\">{ AppStatusListStore.itemList.find( u => u.Id == row.ToStatusId )?.Title }</TableCell>\n                    <TableCell align=\"left\">{row.ActionType}</TableCell>\n                    <TableCell align=\"left\">{ AppFlowStore.itemList.find( u => u.Id == row.FlowId )?.Title }</TableCell>\n                    <TableCell align=\"left\">{ AppTableMasterStore.itemList.find( u => u.Id == row.TableId )?.Title }</TableCell>\n                    <TableCell align=\"left\">{ShowDesc(row.WhenXml)}</TableCell>\n                    <TableCell align=\"left\">{ShowDesc(row.ActionXml)}</TableCell>\n\n\n                    <TableCell align=\"right\" >\n                      <DeleteOutlinedIcon onClick={ () => { AppActionStore.deleteItem(row.Id).then( () => {   AppActionStore.getList(); })}}  />\n                    </TableCell>            \n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </ListItem>\n\n      </List>        \n     \n    );\n};\n\nexport default observer(AppActionList);\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAction\\AppAction.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAction\\AppActionStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppFlow\\AppFlowEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppFlow\\AppFlowList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppFlow\\AppFlowStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppFlow\\AppFlow.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppApi\\AppApiList.tsx",["695","696"],"import React, { useContext, useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { AppApiContext } from './AppApiStore';\nimport { Button, ButtonGroup, LinearProgress, List, ListItem, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport { AppApiAction } from './AppApi';\nimport { AppStatusListContext } from '../AppStatusList/AppStatusListStore';\n \nconst AppApiList: React.FC = () => {\n\n\n  const AppApiStore = useContext(AppApiContext);     \n  const AppStatusListStore = useContext(AppStatusListContext);\n  \n    const [loading, setLoading] = useState(true);\n    \n    useEffect(() => {    \n      AppStatusListStore.getList();           \n      setLoading(true);\n      let act: AppApiAction = new AppApiAction()\n      act.ActionId = 8;      \n      AppApiStore.ExecuteQuery(act).then( (res) => {     \n        setLoading(false);              \n      });      \n\n    }, [AppApiStore.ExecuteAction])       \n\n    if(loading){\n      return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \n    }\n\n    return (\n      <List>\n        <ListItem divider>\n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n          <Button >\n            <NavLink to=\"/AppApiItemEdit/\" >Add New</NavLink> \n          </Button>\n          <Button onClick={ () => { AppApiStore.getList(); }}>Refresh</Button>          \n        </ButtonGroup>\n        </ListItem>\n        \n        <ListItem divider>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell align=\"left\">ID</TableCell>                  \n                  <TableCell align=\"left\">CustomerName</TableCell>\n                  <TableCell align=\"left\">CIF</TableCell>\n                  <TableCell align=\"left\">Status</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {AppApiStore.apiResult.Result1.map((row) => (\n                  <TableRow key={row.Id} >\n                     <TableCell align=\"left\">{row.Id}</TableCell> \n                    <TableCell component=\"th\" scope=\"row\"  >\n                      <NavLink to={\"/AppApiItemEdit/\" + row.Id } >{row.CustomerName}</NavLink> \n                    </TableCell>\n                                             \n                    {/* <TableCell align=\"left\">{row.CustomerName}</TableCell>   */}\n                    <TableCell align=\"left\">{row.CIF}</TableCell> \n                    <TableCell align=\"left\">{ AppStatusListStore.itemList.find( s => s.Id == row.StatusId )?.Title }</TableCell>         \n\n                    <TableCell align=\"right\" >\n                      <DeleteOutlinedIcon onClick={ () => { \n                        debugger;\n                          setLoading(true);\n                          let act: AppApiAction = new AppApiAction()\n                          act.ActionId = 13;\n                          act.ItemId = row.Id;\n                          AppApiStore.ExecuteQuery(act).then( (res) => { \n                            debugger;\n                            let act: AppApiAction = new AppApiAction();\n                            act.ActionId = 8; \n                            AppApiStore.ExecuteQuery(act).then( (res) => {\n                              setLoading(false);  \n                            });\n                          });\n\n                          // setLoading(true);\n                          // let act: AppApiAction = new AppApiAction()\n                          // act.ActionId = 13;\n                          // act.Parm1 = row.Id.toString();\n                          // AppApiStore.ExecuteQuery(act).then( (res) => {                                    \n                          //     let act: AppApiAction = new AppApiAction()\n                          //     act.ActionId = 8;      \n                          //     AppApiStore.ExecuteQuery(act).then( (res) => {     \n                          //     setLoading(false);              \n                          //   }); \n                          // }); \n                         }}  />\n                    </TableCell>\n\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </ListItem>\n\n      </List>        \n     \n    );\n};\n\nexport default observer(AppApiList);\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppApi\\AppApiEdit.tsx",["697","698","699","700","701","702","703","704","705","706","707","708"],"import { Button, ButtonGroup, Container, LinearProgress, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField,  } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { AppApiAction, AttachmentDetails, Customer, Attachment, ICustomer } from './AppApi';\nimport { AppApiContext } from './AppApiStore';\nimport { observer } from 'mobx-react-lite';\nimport { AppStatusListContext } from '../AppStatusList/AppStatusListStore';\nimport moment from 'moment';\n \ninterface DetailParms {\n  id: string;\n}\nconst AppApiEdit: React.FC = () => {\n\n  const FlowId = 1;\n  const { id } = useParams<DetailParms>();\n  const AppStatusListStore = useContext(AppStatusListContext);\n  const AppApiStore = useContext(AppApiContext);\n \n  let history = useHistory();\n  const [error, setError] = useState('');\n  const [actionId, setActionId] = useState(0);\n  const [item, setItem] = useState(new Customer());\n  const [loading, setLoading] = useState(true);\n  const [attachFileList, setFileList] =useState<Attachment[]>([]);\n  const [ActionComment, SetActionComment] = useState(\"\");\n  \n   \n  useEffect(() => {\n    //debugger;     \n    AppStatusListStore.getStatusList(1);\n\n\n    var IdVal =0;\n    if (id) { IdVal=Number(id); }\n    AppApiStore.getActions(FlowId,IdVal).then( (res) => { \n      //debugger;\n        if((res as any).errors){          \n          setError( error + \", \" + (res as any).errors.Error);         \n          return;\n        }\n    });\n\n    if(id){\n      setLoading(true);\n      let act: AppApiAction = new AppApiAction()\n      act.ActionId = 10;  \n      act.ItemId = Number(id);\n      act.Parm1 = id;\n      //act.ReturnFlow = id ? 'update' : 'create';\n\n      let formData = new FormData();\n      formData.append('ActionId', '10' );\n      formData.append('ItemId',  id );\n      formData.append('Parm1',  id );\n\n      AppApiStore.ExecuteAction(formData).then( (res) => {      \n        //debugger;\n        if((res as any).errors){          \n          setError((res as any).errors.Error);         \n          return;\n        }\n        else{                 \n          setItem(res.Result1[0] as any);\n\n          res.Result1[0].InitAttachment?.forEach( x => {\n            attachFileList.push( new Attachment( {file:  new Blob(), Details : x as any } ))\n          });\n          \n          setFileList(attachFileList);\n        }  \n        setLoading(false);\n      });\n    }\n    else{\n      setItem(new Customer()); \n      setLoading(false);\n    }\n  }, [id, AppApiStore.ExecuteAction , AppApiStore.getActions]);\n\n\n  const onItemSubmit = (values: any) => {    \n    \n    \n    // let colMap = new Map([\n    //   [\"Id\", \"Id\"], \n    //   [\"CustomerName\", \"Txt1\"], \n    //   [\"CIF\", \"Num1\"]\n    // ]);  \n\n    // interface LooseObject {\n    //   [key: string]: any\n    // }\n    // var dataParm: LooseObject = {};    \n    // Object.keys(values).forEach(function(key,index) {          \n    //   if( colMap.get(key) && values[key] ){        \n    //     dataParm[ colMap.get(key) as string ] =  values[key] ;\n    //   }      \n    // });\n\n    debugger;\n    let act: AppApiAction = new AppApiAction()\n    act.ActionId = actionId;\n\n    values.InitAttachment = [];\n\n    let formData = new FormData();\n    attachFileList.forEach( f => {\n      values.InitAttachment.push(f.Details);\n      formData.append('FileList', f.file, f.Details.FileName);\n    });\n   \n    // if(files){\n    //   for(var i=0;i<files.length;i++){\n\n    //     //var f =  file[i] as any;        \n    //     formData.append('FileList', files[i]);\n        \n    //     //values.InitAttachment.push(new Attachment( { Action : 'Create', FileArrayId: i, Id : -1, FileName :  f.name,  Prop1 : 'Desc 1'  }) );\n    //   }      \n    // }\n    // values.InitAttachment = fileDetails;\n\n    formData.append('ActionId', actionId.toString() )\n    formData.append('Parm1', JSON.stringify(values) );\n    formData.append('ItemId',  values.Id );\n\n    formData.append('Parm2',  ActionComment );\n\n    act.Parm1 = JSON.stringify(values );\n    act.ItemId = values.Id; \n//return;\n\n    AppApiStore.ExecuteAction(formData).then( (res) => {      \n      //debugger;\n\n      if((res as any).errors){\n        setError((res as any).errors.Error);\n        setLoading(false);\n        return;\n      }\n      else{\n        history.push('/AppApilist');\n      }\n    });\n  };\n\n  const deleteItem = () => {  \n   \n  }\n\n  const prop1Change = (e:any, i:number) => { \n    let files = [...attachFileList];\n    files[i].Details.Prop1 = e.target.value;\n    setFileList(files);\n\n  }\n\n  const onFileChange = (event:any) => { \n    //debugger;\n    \n    for(var i=0;i<event.target.files.length;i++){\n\n      var f =  event.target.files[i] as any;    \n      var filename = attachFileList.length.toString() + \"-\" + f.name;\n      var attch = new Attachment( { \n          file : f, \n          Details : new  AttachmentDetails({  Action : 'Create', FileArrayId: i, Id : -1, FileName : filename,  Prop1 : 'Desc 1'  }) \n        });\n      \n      setFileList(currentArray => [...currentArray, attch]);\n      event.target.value = null;                        \n    }\n    //setFileList(attachFileList);\n\n  }\n\n  const download = (id:number, fileName:string) => { \n    let act: AppApiAction = new AppApiAction()\n    act.ActionId = 15;  \n    act.ItemId = Number(id);\n    act.Parm1 = id.toString();\n\n    AppApiStore.FileDownload(act).then( (fileSteam) => { \n      debugger;\n      const downloadUrl = window.URL.createObjectURL(new Blob([fileSteam]));\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.setAttribute('download', fileName); //any other extension\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n\n      debugger;\n    });\n   \n  }\n\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    \n    <Container component=\"main\" maxWidth=\"lg\">        \n      {error && <div  style={{ color:'red' , fontWeight:'bold', padding:5 , border: '1px solid green', margin:10 }} >{error}</div>}     \n    \n      {/* <a href=\"#\" onClick={ () => { download(65, \"\")} } >Test download</a>  */}\n\n      <Formik\n          initialValues={item}\n\n          validationSchema={Yup.object({\n            CustomerName: Yup.string().required('Title required'),                     \n          })}\n          onSubmit={onItemSubmit}\n        >\n          <Form > \n            Status : { AppStatusListStore.itemList.find( s => s.Id == item.StatusId )?.Title }\n            <MyCustomTxt   \n              name=\"CustomerName\"                         \n              type=\"text\"                \n              autoFocus={true}\n              required={true}                                \n              label=\"CustomerName\"                                                                     \n            />\n              \n            <MyCustomTxt   \n              name=\"CIF\"                         \n              type=\"number\"                \n              required={true}                                \n              label=\"CIF\"                                                                     \n            />\n            {item.StatusId == 4 && \n            <MyCustomTxt   \n              name=\"ApprovalComment\"                         \n              type=\"text\"                \n              required={item.StatusId == 4 ? true : false}                                \n              label=\"Approval Comment\"                                                                     \n            />\n            }\n            {item.StatusId != 4 && \n              <div>Approval Comment : {item.ApprovalComment} </div>\n            }\n\n            ActionComment: {ActionComment}\n            \n             <TextField \n              id=\"ActionComment\"\n              value={ActionComment} \n              placeholder=\"ActionComment\"            \n              type=\"text\"                                     \n              variant=\"outlined\"\n              margin=\"normal\"                                        \n              fullWidth   \n              label=\"Action Comment\"  \n              multiline={false}\n              onChange={ (event) => { \n                debugger;\n                SetActionComment(event.target.value);\n              } }  \n             />\n\n            \n\n  <TableContainer component={Paper}>\n    <Table aria-label=\"simple table\">\n      <TableHead>\n        <TableRow>       \n          <TableCell align=\"left\">File Name</TableCell>\n          <TableCell align=\"left\">Comment</TableCell>     \n          <TableCell align=\"left\"></TableCell>   \n        </TableRow>      \n      </TableHead>\n      <TableBody>\n      { attachFileList && attachFileList.map( (rr, index) => (\n          <TableRow>       \n            <TableCell align=\"left\"> <a href=\"#\" onClick={ () => { download(rr.Details.Id,  rr.Details.FileName)} } >{rr.Details.FileName}</a> </TableCell>\n            <TableCell align=\"left\">\n              <input type=\"text\" value={rr.Details.Prop1}  onChange={ (e) => { prop1Change(e,index) } } /> \n            </TableCell>     \n            <TableCell align=\"left\"><a href=\"#\">Delete</a></TableCell>      \n          </TableRow>\n          ))\n      } \n      <TableRow>             \n        <TableCell align=\"left\" colSpan={3}><input type=\"file\" multiple={false} onChange={onFileChange} /></TableCell>  \n      </TableRow>      \n      </TableBody>\n    </Table>\n  </TableContainer>\n\n        <TableContainer component={Paper}>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>   \n              <TableCell align=\"left\">Date Time</TableCell>     \n                <TableCell align=\"left\">Action By</TableCell>\n                <TableCell align=\"left\">Action</TableCell>\n                <TableCell align=\"left\">From Status</TableCell>     \n                <TableCell align=\"left\">To Status</TableCell> \n                <TableCell align=\"left\">Comment</TableCell>\n              </TableRow>      \n            </TableHead>\n            <TableBody>\n            { item.AppHistory.map( (hist, index) => (\n                <TableRow> \n                  <TableCell align=\"left\"> {  moment(hist.DateTime).format(\"DD-MMM-YYYY\")  }</TableCell>\n                  <TableCell align=\"left\">{hist.ActionBy}</TableCell>\n                  <TableCell align=\"left\">{hist.Action}</TableCell>\n                  <TableCell align=\"left\">{ AppStatusListStore.AppStatusList.find( s => s.Id == hist.FromStage )?.Title } {hist.FromStage}</TableCell>     \n                  <TableCell align=\"left\">{ AppStatusListStore.AppStatusList.find( s => s.Id == hist.ToStage )?.Title } {hist.ToStage}</TableCell> \n                  <TableCell align=\"left\">{hist.Comment}</TableCell>      \n                </TableRow>\n                ))\n            }      \n            </TableBody>\n          </Table>\n        </TableContainer>\n\n  \n\n\n\n            {/* <table >\n              <tr>\n                <td>File Name</td>\n                <td>Prop1</td>\n                <td></td>\n              </tr>\n              { attachFileList \n              &&  attachFileList.map( (rr, index) => ( \n              \n              <tr key={index}>\n                <td>\n                  <a href=\"#\" onClick={ () => { download(rr.Details.Id,  rr.Details.FileName)} } >{rr.Details.FileName}</a> \n                </td>\n                <td>\n                  <input type=\"text\" value={rr.Details.Prop1}  onChange={ (e) => { \n                    debugger;  \n                    prop1Change(e,index)\n                    } } />                  \n                </td>\n                <td> <a href=\"#\">Delete</a></td>\n              </tr>\n\n            ) ) }\n            \n            <tr>\n              <td colSpan={3}>\n                <input type=\"file\" multiple={false} onChange={onFileChange} />\n              </td>\n            </tr>\n\n            </table> */}\n\n            {/* <input type=\"file\" multiple={true} onChange={onFileChange} />\n\n            <input type=\"file\" multiple={true} onChange={onFileChange} /> */}\n                           \n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n\n                { AppApiStore.actionList.map( (row) => (\n                  \n                  <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    key={row.Id}\n                    onClick={ () => { setActionId( row.Id); }}\n                  >\n                    {row.Action}\n                  </Button> \n                ))}\n                \n                {/* { item.Id && \n                  <Button\n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n\n                      let act: AppApiAction = new AppApiAction()\n                      act.ActionId = 11;\n                      act.Parm1 = item.Id.toString();\n                      AppApiStore.ExecuteAction(act).then( (res) => {      \n                        history.push('/AppApilist');    \n                      });                      \n                    }}\n                  >\n                    Delete\n                  </Button> \n                } */}\n                <Button onClick={ () => { history.push('/AppApilist');  }}>Back</Button>          \n              </ButtonGroup>\n\n          </Form>\n        </Formik>\n\n        \n       \n    </Container>\n  );\n};\n\nexport default observer(AppApiEdit);\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppApi\\AppApi.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppApi\\AppApiStore.ts",["709","710"],"\nimport { createContext } from \"react\";\nimport { observable, action, runInAction, makeObservable } from \"mobx\";\nimport agent from \"../../app/api/agent\";\nimport { ApiResult, AppApi, AppApiAction, Customer, IApiAction, IApiResult, IAppApi, ICustomer, ITaskAction } from \"./AppApi\";\n\nconst IAppApiAPI = \"/AppApi\";\n\nconst DBFun = { \n  Execute: (action: FormData) => agent.requests.postForm(`${IAppApiAPI}/TakeAction`, action),  \n  ExecuteQuery: (action: IApiAction) => agent.requests.post(`${IAppApiAPI}/Query`, action),  \n  //FileDownload: (action: IApiAction) => agent.requests.post(`${IAppApiAPI}/Attachment`, action),\n  FileDownload: (action: IApiAction) => agent.requests.downloadPost(`${IAppApiAPI}/Attachment`, action),\n  ActionList: (FlowId: number, Id: number) =>  agent.requests.get(`${IAppApiAPI}/${FlowId}?ItemId=${Id}`),\n  \n\n  list: (): Promise<IAppApi[]> => agent.requests.get(IAppApiAPI),\n  details: (Id: number) => agent.requests.get(`${IAppApiAPI}/${Id}`),\n  create: (item: IAppApi) => agent.requests.post(IAppApiAPI, item),\n  update: (item: IAppApi) =>\n    agent.requests.put(`${IAppApiAPI}/${item.Id}`, item),\n  delete: (Id: number) => agent.requests.del(`${IAppApiAPI}/${Id}`),\n};\n\nexport default class AppApiStoreImpl {\n\n  loading = false;\n  updating = false;\n  actionList: ITaskAction[] = [];\n  apiResult : ApiResult = new ApiResult();\n  \n  itemList: ICustomer[] = [];\n  item: Customer = new Customer()\n\n  constructor() {\n    makeObservable(this, {      \n      actionList: observable,\n      apiResult :  observable,\n\n      itemList: observable,\n      loading: observable,\n      updating: observable,\n      item: observable,\n      getList: action,\n      //loadItem: action,\n      editItem: action\n    });\n  }\n\n  getActions = async (flowId: number, id: number) => {\n    this.loading = true;\n    try {      \n     \n      this.actionList = await DBFun.ActionList(flowId, id); \n      this.loading = false;      \n      return this.actionList;     \n    } catch (error) {\n        console.log(error);\n        this.loading = false;\n      }\n  }\n\n  FileDownload = async (action: IApiAction) => {\n    this.loading = true;\n    try {        \n      debugger;\n      //let itm = new ApiResult();\n      var itm = await DBFun.FileDownload(action);  \n      //this.apiResult = itm;\n      return itm;\n      //this.apiResult = await DBFun.Execute(action);                 \n      //return this.apiResult;   \n    } catch (error) {\n      runInAction( () => {   \n\n      });        \n      throw error;\n    }\n  }\n\n  ExecuteQuery = async (action: IApiAction) => {\n    this.loading = true;\n    try {        \n      debugger;\n      let itm = new ApiResult();\n      itm = await DBFun.ExecuteQuery(action);  \n      this.apiResult = itm;\n      return itm;\n      //this.apiResult = await DBFun.Execute(action);                 \n      //return this.apiResult;   \n    } catch (error) {\n      runInAction( () => {   \n\n      });        \n      throw error;\n    }\n  }\n\n  ExecuteAction = async (action: FormData) => {\n    \n    this.loading = true;\n    try {        \n      //debugger;\n      let itm = new ApiResult();\n      itm = await DBFun.Execute(action);  \n      this.apiResult = itm;\n      return itm;\n      //this.apiResult = await DBFun.Execute(action);                 \n      //return this.apiResult;   \n    } catch (error) {\n      runInAction( () => {   \n\n      });        \n      throw error;\n    }\n  }\n\n\n  // editItem = async (item: IAppAction) => {    \n  //   this.loading = true;\n  //   try {        \n  //     let itm = new  AppAction();\n  //     if (item.Id) {\n  //       itm = await DBFun.update(item);\n  //     } else {\n  //       itm = await DBFun.create(item);\n  //     }\n  //     this.loading = false;         \n  //     return itm;   \n  //   } catch (error) {\n  //     runInAction( () => {\n  //       this.loading = false;        \n  //     });        \n  //     throw error;\n  //   }\n  // };\n\n\n\n  // loadItem = async (id: number) => {\n  //   this.loading = true;\n  //   try {\n\n  //     this.itemList = await DBFun.list(); \n  //     this.item = await DBFun.details(id); \n      \n  //     this.loading = false;      \n  //     return this.item;     \n  //     } catch (error) {\n  //       console.log(error);\n  //       this.loading = false;\n  //     }\n  // }\n \n  getList = async () => {        \n    // this.loading = true;\n    // try {       \n      \n    //   let action: AppApiAction = new AppApiAction()\n    //   action.ActionId = 8; \n    //   this.apiResult = await DBFun.Execute(action);\n    //   this.itemList = this.apiResult.Result1;\n      \n    //   //this.itemList = await DBFun.list();       \n    //   this.loading = false;                   \n    // } catch (error) {\n    //   runInAction( () => {\n    //     this.loading = false;            \n    //     throw error;\n    //   });\n    // }\n  }\n\n  \n\n editItem = async (item: IAppApi) => {    \n    this.loading = true;\n    try {        \n      let itm = new  AppApi();\n      if (item.Id) {\n        itm = await DBFun.update(item);\n      } else {\n        itm = await DBFun.create(item);\n      }\n      this.loading = false;         \n      return itm;   \n    } catch (error) {\n      runInAction( () => {\n        this.loading = false;        \n      });        \n      throw error;\n    }\n  };\n\n  deleteItem = async (id: number) => {\n    this.updating = true;\n    this.loading = true;\n    try {\n      await DBFun.delete(id);    \n      this.updating = false;   \n      this.loading = false;\n    } catch (error) {    \n      this.updating = false;  \n      this.loading = false;             \n      console.log(error);\n      throw error;\n    }\n  };  \n}\n\nexport const AppApiContext = createContext(new AppApiStoreImpl());\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\MyDropDown.tsx",["711","712","713","714"],"import React from \"react\";\r\nimport {  \r\n  useField,\r\n  FieldAttributes,  \r\n} from \"formik\";\r\n\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Select from '@material-ui/core/Select';\r\nimport { IPageCategory } from \"../../../features/PageCategory/PageCategory\";\r\n\r\ntype CustomProps = { label: string, list : any, handleChange?: any } & FieldAttributes<{}>;\r\n\r\nconst MyDropDown: React.FC<CustomProps> = ({ list, label, placeholder, type,required,autoComplete, autoFocus, handleChange, ...props }) => {\r\n\r\n    //const [field] = useField<{}>(props);\r\n\r\n    const [field, meta] = useField<{}>(props);\r\n    \r\n    const errorText = meta.error && meta.touched ? meta.error : \"\";\r\n\r\n    return (                \r\n        <FormControl variant=\"outlined\" fullWidth style={{ marginTop : 10 , marginBottom : 10}}>\r\n            <InputLabel htmlFor=\"outlined-age-native-simple\">{label}</InputLabel>\r\n            {handleChange && \r\n            <Select\r\n              //onChange={OnChange}\r\n                {...field}\r\n                native\r\n                fullWidth            \r\n                onChange={handleChange}\r\n                label={label}            \r\n            >\r\n                <option aria-label=\"None\" value=\"\" />\r\n                {list.map((row:any) => (                              \r\n                  row.Pid != row.Id && <option value={row.Id}>{row.Title}</option>               \r\n                ))}\r\n            </Select>\r\n            }\r\n\r\n            {!handleChange && \r\n            <Select\r\n              //onChange={OnChange}\r\n                {...field}\r\n                native\r\n                fullWidth                           \r\n                label={label}            \r\n            >\r\n                <option aria-label=\"None\" value=\"\" />\r\n                {list.map((row:any) => (                              \r\n                  row.Pid != row.Id && <option value={row.Id}>{row.Title}</option>               \r\n                ))}\r\n            </Select>\r\n            }\r\n        </FormControl>\r\n    );\r\n  };\r\n\r\nexport default MyDropDown;","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\MyCheckBox.tsx",["715","716","717","718","719","720"],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAttachment\\AppAttachmentList.tsx",["721","722","723"],"import React, { useContext, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { AppAttachmentContext } from './AppAttachmentStore';\nimport { Button, ButtonGroup, LinearProgress, List, ListItem, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport fileDownload from 'js-file-download'\nimport axios from 'axios';\n\nconst AppAttachmentList: React.FC = () => {\n\n  const AppAttachmentStore = useContext(AppAttachmentContext);     \n  \n  \n\n  const download = (id: number, fileName : string) => { \n    \n    AppAttachmentStore.download(id,fileName);\n    \n    // const method = 'GET';\n    // const url = `http://localhost:5000/api/AppAttachment/${id}`;\n\n    // axios\n    //   .request({url, method, responseType: 'blob'})\n    //   .then(({ data }) => {\n    //     const downloadUrl = window.URL.createObjectURL(new Blob([data]));\n    //     const link = document.createElement('a');\n    //     link.href = downloadUrl;\n    //     link.setAttribute('download', fileName); //any other extension\n    //     document.body.appendChild(link);\n    //     link.click();\n    //     link.remove();\n    //   });    \n\n    \n    // AppAttachmentStore.download(id).then((val) => {\n    //   debugger;\n    //   console.log(val);\n    //   //fileDownload(val, fileName);\n\t  //   //history.push('/AppAttachmentlist');\n    //   //debugger;\n    //   //setItem(new AppAttachment(val));\n    //   //setLoading(false);\n\n    //     const downloadUrl = window.URL.createObjectURL(new Blob([val]));\n    //     const link = document.createElement('a');\n    //     link.href = downloadUrl;\n    //     link.setAttribute('download', fileName); //any other extension\n    //     document.body.appendChild(link);\n    //     link.click();\n    //     link.remove();\n\n    // });\n  };\n\n    useEffect(() => {       \n      AppAttachmentStore.getList();                  \n    }, [AppAttachmentStore, AppAttachmentStore.getList])       \n\n    if(AppAttachmentStore.loading){\n      return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \n    }\n\n    return (\n      <List>\n        <ListItem divider>\n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n          <Button >\n            <NavLink to=\"/AppAttachmentItemEdit/\" >Add New</NavLink> \n          </Button>\n          <Button onClick={ () => { AppAttachmentStore.getList(); }}>Refresh</Button>          \n        </ButtonGroup>\n        </ListItem>\n        \n        <ListItem divider>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>ID</TableCell>\n                  <TableCell align=\"right\">FileName</TableCell>\n                  <TableCell align=\"right\">Delete</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {AppAttachmentStore.itemList.map((row) => (\n                  <TableRow key={row.Id} >\n                    <TableCell component=\"th\" scope=\"row\"  >\n                      <NavLink to={\"/AppAttachmentItemEdit/\" + row.Id } >{row.Id}</NavLink> \n                    </TableCell>\n                                             \n                    <TableCell align=\"right\" >\n                      <a href=\"#\" onClick={ () => { download(row.Id, row.FileName)} } >{row.FileName}</a> \n                    </TableCell>  \n                    <TableCell align=\"right\" >\n                      <DeleteOutlinedIcon onClick={ () => { AppAttachmentStore.deleteItem(row.Id).then( () => {   AppAttachmentStore.getList(); })}}  />\n                    </TableCell>            \n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </ListItem>\n\n      </List>        \n     \n    );\n};\n\nexport default observer(AppAttachmentList);\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAttachment\\AppAttachmentEdit.tsx",["724"],"import { Button, ButtonGroup, Container, LinearProgress } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { AppAttachment, ApiAttachment } from './AppAttachment';\nimport { AppAttachmentContext } from './AppAttachmentStore';\nimport { observer } from 'mobx-react-lite';\n\ninterface DetailParms {\n  id: string;\n}\nconst AppAttachmentEdit: React.FC = () => {\n\n  const { id } = useParams<DetailParms>();\n  const AppAttachmentStore = useContext(AppAttachmentContext);\n \n  let history = useHistory();\n  const [item, setItem] = useState(new AppAttachment());\n  const [loading, setLoading] = useState(true);\n  \n  useEffect(() => {\n\n    AppAttachmentStore.loadItem( Number(id));\n    if (id) {\n      AppAttachmentStore.loadItem(Number(id)).then((val) => {\n        setItem(val as any);     \n        setLoading(false);   \n      });\n    } else {\n      setItem(new AppAttachment()); \n      setLoading(false);     \n    }\n    \n  }, [id, AppAttachmentStore, AppAttachmentStore.loadItem]);\n\n  const [file, setFile] = useState<Blob[]>();\n\n  const onFileChange = (event:any) => { \n    debugger;\n    setFile(event.target.files);  \n  }\n\n  const onItemSubmit = (values: any) => {   \n\n    setLoading(true);\n\n    let formData = new FormData();\n    if(file){\n      for(var i=0;i<file.length;i++){\n        formData.append('FileList', file[i]);\n      }\n      //file.forEach( f =>  formData.append('FileList', f)  );\n\n      // file.forEach( (f) => { \n      //   formData.append('FileList', f);\n      // });\n    }\n\n    \n    \n    // file.forEach( (f) => { \n    //   formData.append('FileList', f);\n    // });\n\n    formData.append('Prop1', JSON.stringify(values) );\n    formData.append('Prop2', \"Prop test Two\");\n\n    AppAttachmentStore.uploadPhoto(formData as any)\n    \n    AppAttachmentStore.editItem(values).then((val) => {\n\t  history.push('/AppAttachmentlist');\n      //debugger;\n    });\n  };\n\n  //const [file, setFile] = useState<ApiAttachment[]>();\n\n  const onFileUpload = () => { \n    //AppAttachmentStore.uploadPhoto(file as any)\n  }; \n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    <Container component=\"main\" maxWidth=\"xs\">  \n\n      <Formik\n          initialValues={item}\n          validationSchema={Yup.object({\n            FileName: Yup.string().required('Title required'),                     \n          })}\n          onSubmit={onItemSubmit}\n        >\n          <Form > \n            {item.Id}\n            <MyCustomTxt   \n              name=\"FileName\"                         \n              type=\"text\"                \n              autoFocus={true}\n              required={true}                                \n              label=\"FileName\"                                                                     \n            />\n\n           \n            <div> \n                <input type=\"file\" multiple={true} onChange={onFileChange} /> \n                <button onClick={onFileUpload}> \n                  Upload! \n                </button> \n            </div>\n                           \n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"                  \n                >\n                  Save\n                </Button> \n                { item.Id && \n                  <Button\n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n                      AppAttachmentStore.deleteItem(Number(item.Id) ).then( () => {\n                        history.push('/AppAttachmentlist');\n                      })\n                    }}\n                  >\n                    Delete\n                  </Button>\n                }\n                <Button onClick={ () => { history.push('/AppAttachmentlist');  }}>Back</Button>          \n              </ButtonGroup>\n\n          </Form>\n        </Formik>\n    </Container>\n  );\n};\n\nexport default observer(AppAttachmentEdit);\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAttachment\\AppAttachmentStore.ts",["725","726"],"\nimport { createContext } from \"react\";\nimport { observable, action, runInAction, makeObservable } from \"mobx\";\nimport agent from \"../../app/api/agent\";\nimport { ApiAttachment, AppAttachment, IAppAttachment } from \"./AppAttachment\";\n\nconst IAppAttachmentAPI = \"/AppAttachment\";\n\nconst DBFun = {\n  list: (): Promise<IAppAttachment[]> => agent.requests.get(IAppAttachmentAPI),\n  details: (Id: number) => agent.requests.get(`${IAppAttachmentAPI}/${Id}`),\n  create: (item: IAppAttachment) => agent.requests.post(IAppAttachmentAPI, item),\n  update: (item: IAppAttachment) =>\n    agent.requests.put(`${IAppAttachmentAPI}/${item.Id}`, item),\n  delete: (Id: number) => agent.requests.del(`${IAppAttachmentAPI}/${Id}`),\n  \n  download: (Id: number) => agent.requests.download(`${IAppAttachmentAPI}/${Id}`),\n  \n  uploadPhoto: (formData : FormData): Promise<IAppAttachment> => agent.requests.postForm(`${IAppAttachmentAPI}`, formData),\n};\n\nexport default class AppAttachmentStoreImpl {\n\n  loading = false;\n  updating = false;\n  itemList: IAppAttachment[] = [];\n  item: AppAttachment = new AppAttachment()\n\n  constructor() {\n    makeObservable(this, {\n         itemList: observable,\n         loading: observable,\n         updating: observable,\n         item: observable,\n         getList: action,\n         loadItem: action,\n         editItem: action\n    });\n  }\n\n\n  getList = async () => {        \n    this.loading = true;\n    try {               \n      this.itemList = await DBFun.list();       \n      this.loading = false;                   \n    } catch (error) {\n      runInAction( () => {\n        this.loading = false;            \n        throw error;\n      });\n    }\n  }\n\n  loadItem = async (id: number) => {\n    this.loading = true;\n    try {\n      this.itemList = await DBFun.list(); \n      this.item = await DBFun.details(id); \n      \n      this.loading = false;      \n      return this.item;     \n      } catch (error) {\n        console.log(error);\n        this.loading = false;\n      }\n  }\n\n editItem = async (item: IAppAttachment) => {    \n    this.loading = true;\n    try {        \n      let itm = new  AppAttachment();\n      if (item.Id) {\n        itm = await DBFun.update(item);\n      } else {\n        itm = await DBFun.create(item);\n      }\n      this.loading = false;         \n      return itm;   \n    } catch (error) {\n      runInAction( () => {\n        this.loading = false;        \n      });        \n      throw error;\n    }\n  };\n\n  deleteItem = async (id: number) => {\n    this.updating = true;\n    this.loading = true;\n    try {\n      await DBFun.delete(id);    \n      this.updating = false;   \n      this.loading = false;\n    } catch (error) {    \n      this.updating = false;  \n      this.loading = false;             \n      console.log(error);\n      throw error;\n    }\n  };  \n\n  download = async (id: number, fileName: string) => {\n    debugger;\n    try {\n      await DBFun.download(id).then(  (fileSteam) => {\n        const downloadUrl = window.URL.createObjectURL(new Blob([fileSteam]));\n        const link = document.createElement('a');\n        link.href = downloadUrl;\n        link.setAttribute('download', fileName); //any other extension\n        document.body.appendChild(link);\n        link.click();\n        link.remove();\n      } );              \n    } catch (error) {    \n      this.updating = false;  \n      this.loading = false;             \n      console.log(error);\n      throw error;\n    }\n  }; \n\n  uploadPhoto = async (formData : FormData) => {\n  \n    try {\n        const photo = await DBFun.uploadPhoto(formData); \n        debugger;\n       \n    } catch (error) {\n      debugger;\n    }\n  }\n\n}\n\n\n\nexport const AppAttachmentContext = createContext(new AppAttachmentStoreImpl());\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAttachment\\AppAttachment.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\nav\\listItems.tsx",["727"],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNavigation\\AppNavigationList.tsx",["728","729","730","731","732","733","734","735"],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNavigation\\AppNavigationEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNavigation\\AppNavigationStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNavigation\\AppNavigation.ts",[],{"ruleId":"736","severity":1,"message":"737","line":35,"column":6,"nodeType":"738","endLine":35,"endColumn":43,"suggestions":"739"},{"ruleId":"740","severity":1,"message":"741","line":65,"column":30,"nodeType":"742","messageId":"743","endLine":65,"endColumn":32},{"ruleId":"744","severity":1,"message":"745","line":6,"column":8,"nodeType":"746","messageId":"747","endLine":6,"endColumn":16},{"ruleId":null,"fatal":true,"severity":2,"message":"748","line":125,"column":14},{"ruleId":"744","severity":1,"message":"749","line":10,"column":8,"nodeType":"746","messageId":"747","endLine":10,"endColumn":23},{"ruleId":"744","severity":1,"message":"750","line":12,"column":8,"nodeType":"746","messageId":"747","endLine":12,"endColumn":19},{"ruleId":"744","severity":1,"message":"751","line":13,"column":8,"nodeType":"746","messageId":"747","endLine":13,"endColumn":18},{"ruleId":"744","severity":1,"message":"752","line":14,"column":8,"nodeType":"746","messageId":"747","endLine":14,"endColumn":14},{"ruleId":"744","severity":1,"message":"753","line":16,"column":8,"nodeType":"746","messageId":"747","endLine":16,"endColumn":24},{"ruleId":"744","severity":1,"message":"754","line":1,"column":20,"nodeType":"746","messageId":"747","endLine":1,"endColumn":27},{"ruleId":"744","severity":1,"message":"755","line":3,"column":29,"nodeType":"746","messageId":"747","endLine":3,"endColumn":38},{"ruleId":"744","severity":1,"message":"756","line":19,"column":11,"nodeType":"746","messageId":"747","endLine":19,"endColumn":20},{"ruleId":"740","severity":1,"message":"757","line":33,"column":27,"nodeType":"742","messageId":"743","endLine":33,"endColumn":29},{"ruleId":"744","severity":1,"message":"758","line":1,"column":28,"nodeType":"746","messageId":"747","endLine":1,"endColumn":34},{"ruleId":"740","severity":1,"message":"741","line":18,"column":46,"nodeType":"742","messageId":"743","endLine":18,"endColumn":48},{"ruleId":"736","severity":1,"message":"759","line":24,"column":6,"nodeType":"738","endLine":24,"endColumn":25,"suggestions":"760"},{"ruleId":"761","replacedBy":"762"},{"ruleId":"763","replacedBy":"764"},{"ruleId":"744","severity":1,"message":"765","line":7,"column":10,"nodeType":"746","messageId":"747","endLine":7,"endColumn":14},{"ruleId":"744","severity":1,"message":"766","line":7,"column":16,"nodeType":"746","messageId":"747","endLine":7,"endColumn":23},{"ruleId":"744","severity":1,"message":"767","line":157,"column":9,"nodeType":"746","messageId":"747","endLine":157,"endColumn":25},{"ruleId":"736","severity":1,"message":"737","line":175,"column":6,"nodeType":"738","endLine":175,"endColumn":43,"suggestions":"768"},{"ruleId":"740","severity":1,"message":"741","line":65,"column":30,"nodeType":"742","messageId":"743","endLine":65,"endColumn":32},{"ruleId":"744","severity":1,"message":"745","line":6,"column":8,"nodeType":"746","messageId":"747","endLine":6,"endColumn":16},{"ruleId":"761","replacedBy":"769"},{"ruleId":"763","replacedBy":"770"},{"ruleId":"744","severity":1,"message":"749","line":10,"column":8,"nodeType":"746","messageId":"747","endLine":10,"endColumn":23},{"ruleId":"744","severity":1,"message":"750","line":12,"column":8,"nodeType":"746","messageId":"747","endLine":12,"endColumn":19},{"ruleId":"744","severity":1,"message":"751","line":13,"column":8,"nodeType":"746","messageId":"747","endLine":13,"endColumn":18},{"ruleId":"744","severity":1,"message":"752","line":14,"column":8,"nodeType":"746","messageId":"747","endLine":14,"endColumn":14},{"ruleId":"744","severity":1,"message":"753","line":16,"column":8,"nodeType":"746","messageId":"747","endLine":16,"endColumn":24},{"ruleId":"744","severity":1,"message":"758","line":4,"column":40,"nodeType":"746","messageId":"747","endLine":4,"endColumn":46},{"ruleId":"744","severity":1,"message":"771","line":10,"column":10,"nodeType":"746","messageId":"747","endLine":10,"endColumn":13},{"ruleId":"744","severity":1,"message":"772","line":10,"column":15,"nodeType":"746","messageId":"747","endLine":10,"endColumn":23},{"ruleId":"744","severity":1,"message":"773","line":12,"column":8,"nodeType":"746","messageId":"747","endLine":12,"endColumn":13},{"ruleId":"744","severity":1,"message":"774","line":20,"column":8,"nodeType":"746","messageId":"747","endLine":20,"endColumn":19},{"ruleId":"775","severity":1,"message":"776","line":56,"column":41,"nodeType":"777","messageId":"778","endLine":56,"endColumn":43},{"ruleId":"736","severity":1,"message":"779","line":75,"column":6,"nodeType":"738","endLine":75,"endColumn":61,"suggestions":"780"},{"ruleId":"775","severity":1,"message":"776","line":81,"column":21,"nodeType":"777","messageId":"778","endLine":81,"endColumn":23},{"ruleId":"744","severity":1,"message":"781","line":2,"column":10,"nodeType":"746","messageId":"747","endLine":2,"endColumn":23},{"ruleId":"744","severity":1,"message":"754","line":1,"column":20,"nodeType":"746","messageId":"747","endLine":1,"endColumn":27},{"ruleId":"744","severity":1,"message":"755","line":3,"column":29,"nodeType":"746","messageId":"747","endLine":3,"endColumn":38},{"ruleId":"744","severity":1,"message":"756","line":19,"column":11,"nodeType":"746","messageId":"747","endLine":19,"endColumn":20},{"ruleId":"740","severity":1,"message":"757","line":33,"column":27,"nodeType":"742","messageId":"743","endLine":33,"endColumn":29},{"ruleId":"744","severity":1,"message":"758","line":1,"column":28,"nodeType":"746","messageId":"747","endLine":1,"endColumn":34},{"ruleId":"740","severity":1,"message":"741","line":18,"column":46,"nodeType":"742","messageId":"743","endLine":18,"endColumn":48},{"ruleId":"736","severity":1,"message":"759","line":24,"column":6,"nodeType":"738","endLine":24,"endColumn":25,"suggestions":"782"},{"ruleId":"744","severity":1,"message":"783","line":1,"column":40,"nodeType":"746","messageId":"747","endLine":1,"endColumn":48},{"ruleId":"744","severity":1,"message":"784","line":5,"column":8,"nodeType":"746","messageId":"747","endLine":5,"endColumn":26},{"ruleId":"744","severity":1,"message":"785","line":7,"column":10,"nodeType":"746","messageId":"747","endLine":7,"endColumn":14},{"ruleId":"744","severity":1,"message":"786","line":10,"column":10,"nodeType":"746","messageId":"747","endLine":10,"endColumn":15},{"ruleId":"736","severity":1,"message":"787","line":17,"column":8,"nodeType":"738","endLine":17,"endColumn":52,"suggestions":"788"},{"ruleId":"740","severity":1,"message":"741","line":57,"column":96,"nodeType":"742","messageId":"743","endLine":57,"endColumn":98},{"ruleId":"744","severity":1,"message":"789","line":6,"column":8,"nodeType":"746","messageId":"747","endLine":6,"endColumn":19},{"ruleId":"736","severity":1,"message":"790","line":44,"column":6,"nodeType":"738","endLine":44,"endColumn":55,"suggestions":"791"},{"ruleId":"740","severity":1,"message":"741","line":83,"column":73,"nodeType":"742","messageId":"743","endLine":83,"endColumn":75},{"ruleId":"740","severity":1,"message":"741","line":98,"column":73,"nodeType":"742","messageId":"743","endLine":98,"endColumn":75},{"ruleId":"744","severity":1,"message":"792","line":6,"column":10,"nodeType":"746","messageId":"747","endLine":6,"endColumn":24},{"ruleId":"744","severity":1,"message":"793","line":1,"column":202,"nodeType":"746","messageId":"747","endLine":1,"endColumn":215},{"ruleId":"744","severity":1,"message":"794","line":1,"column":242,"nodeType":"746","messageId":"747","endLine":1,"endColumn":245},{"ruleId":"744","severity":1,"message":"795","line":1,"column":247,"nodeType":"746","messageId":"747","endLine":1,"endColumn":257},{"ruleId":"744","severity":1,"message":"796","line":15,"column":10,"nodeType":"746","messageId":"747","endLine":15,"endColumn":18},{"ruleId":"736","severity":1,"message":"797","line":56,"column":6,"nodeType":"738","endLine":56,"endColumn":97,"suggestions":"798"},{"ruleId":"740","severity":1,"message":"757","line":163,"column":33,"nodeType":"742","messageId":"743","endLine":163,"endColumn":35},{"ruleId":"740","severity":1,"message":"741","line":188,"column":81,"nodeType":"742","messageId":"743","endLine":188,"endColumn":83},{"ruleId":"736","severity":1,"message":"799","line":49,"column":6,"nodeType":"738","endLine":49,"endColumn":97,"suggestions":"800"},{"ruleId":"744","severity":1,"message":"801","line":5,"column":10,"nodeType":"746","messageId":"747","endLine":5,"endColumn":20},{"ruleId":"744","severity":1,"message":"802","line":5,"column":22,"nodeType":"746","messageId":"747","endLine":5,"endColumn":31},{"ruleId":"744","severity":1,"message":"803","line":24,"column":16,"nodeType":"746","messageId":"747","endLine":24,"endColumn":23},{"ruleId":"740","severity":1,"message":"741","line":74,"column":54,"nodeType":"742","messageId":"743","endLine":74,"endColumn":56},{"ruleId":"740","severity":1,"message":"741","line":86,"column":20,"nodeType":"742","messageId":"743","endLine":86,"endColumn":22},{"ruleId":"740","severity":1,"message":"741","line":88,"column":67,"nodeType":"742","messageId":"743","endLine":88,"endColumn":69},{"ruleId":"740","severity":1,"message":"741","line":102,"column":20,"nodeType":"742","messageId":"743","endLine":102,"endColumn":22},{"ruleId":"740","severity":1,"message":"741","line":104,"column":60,"nodeType":"742","messageId":"743","endLine":104,"endColumn":62},{"ruleId":"744","severity":1,"message":"804","line":8,"column":10,"nodeType":"746","messageId":"747","endLine":8,"endColumn":14},{"ruleId":"736","severity":1,"message":"805","line":18,"column":8,"nodeType":"738","endLine":18,"endColumn":56,"suggestions":"806"},{"ruleId":"740","severity":1,"message":"741","line":56,"column":92,"nodeType":"742","messageId":"743","endLine":56,"endColumn":94},{"ruleId":"736","severity":1,"message":"805","line":43,"column":6,"nodeType":"738","endLine":43,"endColumn":59,"suggestions":"807"},{"ruleId":"740","severity":1,"message":"741","line":77,"column":68,"nodeType":"742","messageId":"743","endLine":77,"endColumn":70},{"ruleId":"744","severity":1,"message":"766","line":2,"column":10,"nodeType":"746","messageId":"747","endLine":2,"endColumn":17},{"ruleId":"744","severity":1,"message":"808","line":5,"column":10,"nodeType":"746","messageId":"747","endLine":5,"endColumn":16},{"ruleId":"744","severity":1,"message":"809","line":5,"column":18,"nodeType":"746","messageId":"747","endLine":5,"endColumn":29},{"ruleId":"744","severity":1,"message":"810","line":5,"column":47,"nodeType":"746","messageId":"747","endLine":5,"endColumn":51},{"ruleId":"744","severity":1,"message":"811","line":5,"column":53,"nodeType":"746","messageId":"747","endLine":5,"endColumn":61},{"ruleId":"744","severity":1,"message":"812","line":5,"column":63,"nodeType":"746","messageId":"747","endLine":5,"endColumn":68},{"ruleId":"744","severity":1,"message":"813","line":5,"column":70,"nodeType":"746","messageId":"747","endLine":5,"endColumn":75},{"ruleId":"744","severity":1,"message":"814","line":5,"column":77,"nodeType":"746","messageId":"747","endLine":5,"endColumn":86},{"ruleId":"744","severity":1,"message":"815","line":5,"column":88,"nodeType":"746","messageId":"747","endLine":5,"endColumn":97},{"ruleId":"744","severity":1,"message":"816","line":5,"column":99,"nodeType":"746","messageId":"747","endLine":5,"endColumn":113},{"ruleId":"744","severity":1,"message":"817","line":5,"column":115,"nodeType":"746","messageId":"747","endLine":5,"endColumn":124},{"ruleId":"744","severity":1,"message":"818","line":5,"column":126,"nodeType":"746","messageId":"747","endLine":5,"endColumn":134},{"ruleId":"744","severity":1,"message":"784","line":6,"column":8,"nodeType":"746","messageId":"747","endLine":6,"endColumn":26},{"ruleId":"744","severity":1,"message":"819","line":8,"column":9,"nodeType":"746","messageId":"747","endLine":8,"endColumn":24},{"ruleId":"736","severity":1,"message":"820","line":26,"column":8,"nodeType":"738","endLine":26,"endColumn":50,"suggestions":"821"},{"ruleId":"740","severity":1,"message":"741","line":46,"column":96,"nodeType":"742","messageId":"743","endLine":46,"endColumn":98},{"ruleId":"740","severity":1,"message":"741","line":52,"column":96,"nodeType":"742","messageId":"743","endLine":52,"endColumn":98},{"ruleId":"736","severity":1,"message":"822","line":39,"column":6,"nodeType":"738","endLine":39,"endColumn":59,"suggestions":"823"},{"ruleId":"736","severity":1,"message":"824","line":18,"column":8,"nodeType":"738","endLine":18,"endColumn":76,"suggestions":"825"},{"ruleId":"740","severity":1,"message":"741","line":54,"column":91,"nodeType":"742","messageId":"743","endLine":54,"endColumn":93},{"ruleId":"744","severity":1,"message":"810","line":1,"column":58,"nodeType":"746","messageId":"747","endLine":1,"endColumn":62},{"ruleId":"744","severity":1,"message":"811","line":1,"column":64,"nodeType":"746","messageId":"747","endLine":1,"endColumn":72},{"ruleId":"744","severity":1,"message":"812","line":1,"column":74,"nodeType":"746","messageId":"747","endLine":1,"endColumn":79},{"ruleId":"744","severity":1,"message":"813","line":1,"column":81,"nodeType":"746","messageId":"747","endLine":1,"endColumn":86},{"ruleId":"744","severity":1,"message":"814","line":1,"column":88,"nodeType":"746","messageId":"747","endLine":1,"endColumn":97},{"ruleId":"744","severity":1,"message":"815","line":1,"column":99,"nodeType":"746","messageId":"747","endLine":1,"endColumn":108},{"ruleId":"744","severity":1,"message":"816","line":1,"column":110,"nodeType":"746","messageId":"747","endLine":1,"endColumn":124},{"ruleId":"744","severity":1,"message":"817","line":1,"column":126,"nodeType":"746","messageId":"747","endLine":1,"endColumn":135},{"ruleId":"744","severity":1,"message":"818","line":1,"column":137,"nodeType":"746","messageId":"747","endLine":1,"endColumn":145},{"ruleId":"744","severity":1,"message":"826","line":12,"column":10,"nodeType":"746","messageId":"747","endLine":12,"endColumn":35},{"ruleId":"736","severity":1,"message":"824","line":45,"column":6,"nodeType":"738","endLine":45,"endColumn":51,"suggestions":"827"},{"ruleId":"740","severity":1,"message":"741","line":81,"column":67,"nodeType":"742","messageId":"743","endLine":81,"endColumn":69},{"ruleId":"744","severity":1,"message":"750","line":1,"column":58,"nodeType":"746","messageId":"747","endLine":1,"endColumn":69},{"ruleId":"744","severity":1,"message":"751","line":1,"column":89,"nodeType":"746","messageId":"747","endLine":1,"endColumn":99},{"ruleId":"744","severity":1,"message":"828","line":1,"column":117,"nodeType":"746","messageId":"747","endLine":1,"endColumn":125},{"ruleId":"744","severity":1,"message":"752","line":1,"column":127,"nodeType":"746","messageId":"747","endLine":1,"endColumn":133},{"ruleId":"744","severity":1,"message":"829","line":17,"column":10,"nodeType":"746","messageId":"747","endLine":17,"endColumn":19},{"ruleId":"744","severity":1,"message":"830","line":18,"column":8,"nodeType":"746","messageId":"747","endLine":18,"endColumn":18},{"ruleId":"744","severity":1,"message":"831","line":29,"column":9,"nodeType":"746","messageId":"747","endLine":29,"endColumn":23},{"ruleId":"736","severity":1,"message":"832","line":62,"column":6,"nodeType":"738","endLine":62,"endColumn":51,"suggestions":"833"},{"ruleId":"744","severity":1,"message":"834","line":78,"column":9,"nodeType":"746","messageId":"747","endLine":78,"endColumn":22},{"ruleId":"740","severity":1,"message":"741","line":127,"column":38,"nodeType":"742","messageId":"743","endLine":127,"endColumn":40},{"ruleId":"736","severity":1,"message":"832","line":24,"column":8,"nodeType":"738","endLine":24,"endColumn":48,"suggestions":"835"},{"ruleId":"740","severity":1,"message":"757","line":83,"column":97,"nodeType":"742","messageId":"743","endLine":83,"endColumn":99},{"ruleId":"740","severity":1,"message":"741","line":85,"column":91,"nodeType":"742","messageId":"743","endLine":85,"endColumn":93},{"ruleId":"740","severity":1,"message":"741","line":87,"column":85,"nodeType":"742","messageId":"743","endLine":87,"endColumn":87},{"ruleId":"740","severity":1,"message":"741","line":88,"column":92,"nodeType":"742","messageId":"743","endLine":88,"endColumn":94},{"ruleId":"736","severity":1,"message":"836","line":27,"column":8,"nodeType":"738","endLine":27,"endColumn":35,"suggestions":"837"},{"ruleId":"740","severity":1,"message":"741","line":65,"column":91,"nodeType":"742","messageId":"743","endLine":65,"endColumn":93},{"ruleId":"744","severity":1,"message":"838","line":7,"column":65,"nodeType":"746","messageId":"747","endLine":7,"endColumn":74},{"ruleId":"736","severity":1,"message":"839","line":82,"column":6,"nodeType":"738","endLine":82,"endColumn":62,"suggestions":"840"},{"ruleId":"744","severity":1,"message":"841","line":151,"column":9,"nodeType":"746","messageId":"747","endLine":151,"endColumn":19},{"ruleId":"842","severity":1,"message":"843","line":174,"column":19,"nodeType":"777","messageId":"844","endLine":174,"endColumn":59},{"ruleId":"740","severity":1,"message":"741","line":223,"column":68,"nodeType":"742","messageId":"743","endLine":223,"endColumn":70},{"ruleId":"740","severity":1,"message":"741","line":238,"column":28,"nodeType":"742","messageId":"743","endLine":238,"endColumn":30},{"ruleId":"740","severity":1,"message":"741","line":242,"column":39,"nodeType":"742","messageId":"743","endLine":242,"endColumn":41},{"ruleId":"740","severity":1,"message":"757","line":246,"column":28,"nodeType":"742","messageId":"743","endLine":246,"endColumn":30},{"ruleId":"845","severity":1,"message":"846","line":282,"column":38,"nodeType":"847","endLine":282,"endColumn":118},{"ruleId":"845","severity":1,"message":"846","line":286,"column":37,"nodeType":"847","endLine":286,"endColumn":49},{"ruleId":"740","severity":1,"message":"741","line":315,"column":94,"nodeType":"742","messageId":"743","endLine":315,"endColumn":96},{"ruleId":"740","severity":1,"message":"741","line":316,"column":94,"nodeType":"742","messageId":"743","endLine":316,"endColumn":96},{"ruleId":"744","severity":1,"message":"848","line":5,"column":29,"nodeType":"746","messageId":"747","endLine":5,"endColumn":41},{"ruleId":"744","severity":1,"message":"849","line":5,"column":65,"nodeType":"746","messageId":"747","endLine":5,"endColumn":75},{"ruleId":"744","severity":1,"message":"850","line":10,"column":10,"nodeType":"746","messageId":"747","endLine":10,"endColumn":23},{"ruleId":"744","severity":1,"message":"756","line":20,"column":11,"nodeType":"746","messageId":"747","endLine":20,"endColumn":20},{"ruleId":"740","severity":1,"message":"757","line":36,"column":27,"nodeType":"742","messageId":"743","endLine":36,"endColumn":29},{"ruleId":"740","severity":1,"message":"757","line":51,"column":27,"nodeType":"742","messageId":"743","endLine":51,"endColumn":29},{"ruleId":"744","severity":1,"message":"851","line":5,"column":3,"nodeType":"746","messageId":"747","endLine":5,"endColumn":8},{"ruleId":"744","severity":1,"message":"852","line":11,"column":5,"nodeType":"746","messageId":"747","endLine":11,"endColumn":14},{"ruleId":"744","severity":1,"message":"853","line":19,"column":17,"nodeType":"746","messageId":"747","endLine":19,"endColumn":25},{"ruleId":"744","severity":1,"message":"854","line":20,"column":17,"nodeType":"746","messageId":"747","endLine":20,"endColumn":25},{"ruleId":"855","severity":1,"message":"856","line":64,"column":1,"nodeType":"857","messageId":"858","endLine":67,"endColumn":7},{"ruleId":"855","severity":1,"message":"856","line":69,"column":1,"nodeType":"857","messageId":"858","endLine":72,"endColumn":19},{"ruleId":"744","severity":1,"message":"859","line":7,"column":8,"nodeType":"746","messageId":"747","endLine":7,"endColumn":20},{"ruleId":"744","severity":1,"message":"860","line":8,"column":8,"nodeType":"746","messageId":"747","endLine":8,"endColumn":13},{"ruleId":"845","severity":1,"message":"846","line":93,"column":23,"nodeType":"847","endLine":93,"endColumn":88},{"ruleId":"744","severity":1,"message":"781","line":7,"column":25,"nodeType":"746","messageId":"747","endLine":7,"endColumn":38},{"ruleId":"744","severity":1,"message":"781","line":5,"column":10,"nodeType":"746","messageId":"747","endLine":5,"endColumn":23},{"ruleId":"744","severity":1,"message":"861","line":126,"column":15,"nodeType":"746","messageId":"747","endLine":126,"endColumn":20},{"ruleId":"744","severity":1,"message":"862","line":6,"column":8,"nodeType":"746","messageId":"747","endLine":6,"endColumn":21},{"ruleId":"744","severity":1,"message":"812","line":5,"column":63,"nodeType":"746","messageId":"747","endLine":5,"endColumn":68},{"ruleId":"744","severity":1,"message":"813","line":5,"column":70,"nodeType":"746","messageId":"747","endLine":5,"endColumn":75},{"ruleId":"744","severity":1,"message":"814","line":5,"column":77,"nodeType":"746","messageId":"747","endLine":5,"endColumn":86},{"ruleId":"744","severity":1,"message":"815","line":5,"column":88,"nodeType":"746","messageId":"747","endLine":5,"endColumn":97},{"ruleId":"744","severity":1,"message":"816","line":5,"column":99,"nodeType":"746","messageId":"747","endLine":5,"endColumn":113},{"ruleId":"744","severity":1,"message":"817","line":5,"column":115,"nodeType":"746","messageId":"747","endLine":5,"endColumn":124},{"ruleId":"744","severity":1,"message":"818","line":5,"column":126,"nodeType":"746","messageId":"747","endLine":5,"endColumn":134},{"ruleId":"744","severity":1,"message":"784","line":6,"column":8,"nodeType":"746","messageId":"747","endLine":6,"endColumn":26},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'PageTagStore'. Either include it or remove the dependency array.","ArrayExpression",["863"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'testComp' is defined but never used.","Identifier","unusedVar","Parsing error: Unexpected token. Did you mean `{'>'}` or `&gt;`?","'ContentEditable' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'PageCategoryItem' is defined but never used.","'PageTag' is defined but never used.","'useEffect' is defined but never used.","'errorText' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'CategoryId'. Either include it or remove the dependency array.",["864"],"no-native-reassign",["865"],"no-negated-in-lhs",["866"],"'Link' is defined but never used.","'NavLink' is defined but never used.","'fixedHeightPaper' is assigned a value but never used.",["867"],["865"],["866"],"'Tag' is defined but never used.","'TagGroup' is defined but never used.","'MyTag' is defined but never used.","'ContentEdit' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'PageCategoryStore' and 'PageTagStore'. Either include them or remove the dependency array.",["868"],"'ApiAttachment' is defined but never used.",["869"],"'useState' is defined but never used.","'DeleteOutlinedIcon' is defined but never used.","'User' is defined but never used.","'debug' is defined but never used.","React Hook useEffect has a missing dependency: 'AppUserRoleMasterStore'. Either include it or remove the dependency array.",["870"],"'MyCustomTxt' is defined but never used.","React Hook useEffect has missing dependencies: 'AppUserRoleMasterStore' and 'UserManagerStore'. Either include them or remove the dependency array.",["871"],"'resolveElement' is defined but never used.","'DialogActions' is defined but never used.","'Box' is defined but never used.","'Typography' is defined but never used.","'TabPanel' is defined but never used.","React Hook useEffect has a missing dependency: 'AppColumnMasterStore'. Either include it or remove the dependency array.",["872"],"React Hook useEffect has missing dependencies: 'AppUserRoleStore' and 'UserManagerStore'. Either include them or remove the dependency array.",["873"],"'useHistory' is defined but never used.","'useParams' is defined but never used.","'setItem' is assigned a value but never used.","'Item' is defined but never used.","React Hook useEffect has a missing dependency: 'AppTableMasterStore'. Either include it or remove the dependency array.",["874"],["875"],"'Button' is defined but never used.","'ButtonGroup' is defined but never used.","'List' is defined but never used.","'ListItem' is defined but never used.","'Paper' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'TableCell' is defined but never used.","'TableContainer' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'TablePagination' is defined but never used.","React Hook useEffect has a missing dependency: 'AppStatusListStore'. Either include it or remove the dependency array.",["876"],"React Hook useEffect has a missing dependency: 'AppConfigStore'. Either include it or remove the dependency array.",["877"],"React Hook useEffect has a missing dependency: 'AppConfigTypeStore'. Either include it or remove the dependency array.",["878"],"'isTypeAssertionExpression' is defined but never used.",["879"],"'MenuItem' is defined but never used.","'AppConfig' is defined but never used.","'MyCheckBox' is defined but never used.","'AppConfigStore' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'AppFlowStore', 'AppStatusListStore', and 'AppTableMasterStore'. Either include them or remove the dependency array.",["880"],"'onTableChange' is assigned a value but never used.",["881"],"React Hook useEffect has missing dependencies: 'AppApiStore' and 'AppStatusListStore'. Either include them or remove the dependency array.",["882"],"'ICustomer' is defined but never used.","React Hook useEffect has missing dependencies: 'AppApiStore', 'AppStatusListStore', 'attachFileList', and 'error'. Either include them or remove the dependency array. You can also do a functional update 'setError(e => ...)' if you only need 'error' in the 'setError' call.",["883"],"'deleteItem' is assigned a value but never used.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'attch'.","unsafeRefs","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","'AppApiAction' is defined but never used.","'IApiResult' is defined but never used.","'IPageCategory' is defined but never used.","'Field' is defined but never used.","'TextField' is defined but never used.","'setFiled' is assigned a value but never used.","'setValue' is assigned a value but never used.","no-lone-blocks","Block is redundant.","BlockStatement","redundantBlock","'fileDownload' is defined but never used.","'axios' is defined but never used.","'photo' is assigned a value but never used.","'DashboardIcon' is defined but never used.",{"desc":"884","fix":"885"},{"desc":"886","fix":"887"},"no-global-assign","no-unsafe-negation",{"desc":"884","fix":"888"},{"desc":"889","fix":"890"},{"desc":"886","fix":"891"},{"desc":"892","fix":"893"},{"desc":"894","fix":"895"},{"desc":"896","fix":"897"},{"desc":"898","fix":"899"},{"desc":"900","fix":"901"},{"desc":"902","fix":"903"},{"desc":"904","fix":"905"},{"desc":"906","fix":"907"},{"desc":"908","fix":"909"},{"desc":"910","fix":"911"},{"desc":"912","fix":"913"},{"desc":"914","fix":"915"},{"desc":"916","fix":"917"},{"desc":"918","fix":"919"},"Update the dependencies array to be: [PageTagStore, userStore, userStore.getCurrentUser]",{"range":"920","text":"921"},"Update the dependencies array to be: [CategoryId, PageCategoryStore]",{"range":"922","text":"923"},{"range":"924","text":"921"},"Update the dependencies array to be: [id, SitePageStore, SitePageStore.loadItem, setTagList, PageCategoryStore, PageTagStore]",{"range":"925","text":"926"},{"range":"927","text":"923"},"Update the dependencies array to be: [AppUserRoleMasterStore, AppUserRoleStore, AppUserRoleStore.getList]",{"range":"928","text":"929"},"Update the dependencies array to be: [id, AppUserRoleStore, AppUserRoleStore.loadItem, UserManagerStore, AppUserRoleMasterStore]",{"range":"930","text":"931"},"Update the dependencies array to be: [id, AppTableMasterStore, AppTableMasterStore.loadItem, AppColumnMasterStore.getColumnList, AppColumnMasterStore]",{"range":"932","text":"933"},"Update the dependencies array to be: [id, AppUserRoleMasterStore, AppUserRoleMasterStore.loadItem, AppUserRoleStore.getRoleList, AppUserRoleStore, UserManagerStore]",{"range":"934","text":"935"},"Update the dependencies array to be: [AppStatusListStore, AppStatusListStore.getList, AppTableMasterStore]",{"range":"936","text":"937"},"Update the dependencies array to be: [id, AppStatusListStore, AppStatusListStore.loadItem, AppTableMasterStore]",{"range":"938","text":"939"},"Update the dependencies array to be: [AppHistoryStore, AppHistoryStore.getList, AppStatusListStore]",{"range":"940","text":"941"},"Update the dependencies array to be: [id, AppConfigTypeStore, AppConfigTypeStore.loadItem, AppConfigStore]",{"range":"942","text":"943"},"Update the dependencies array to be: [AppConfigStore, AppConfigStore.getList, AppConfigTypeStore, AppConfigTypeStore.getList]",{"range":"944","text":"945"},"Update the dependencies array to be: [id, AppConfigStore, AppConfigStore.loadItem, AppConfigTypeStore]",{"range":"946","text":"947"},"Update the dependencies array to be: [id, AppActionStore, AppActionStore.loadItem, AppFlowStore, AppTableMasterStore, AppStatusListStore]",{"range":"948","text":"949"},"Update the dependencies array to be: [AppActionStore, AppActionStore.getList, AppFlowStore, AppStatusListStore, AppTableMasterStore]",{"range":"950","text":"951"},"Update the dependencies array to be: [AppApiStore, AppApiStore.ExecuteAction, AppStatusListStore]",{"range":"952","text":"953"},"Update the dependencies array to be: [id, AppApiStore.ExecuteAction, AppApiStore.getActions, AppStatusListStore, AppApiStore, error, attachFileList]",{"range":"954","text":"955"},[1466,1503],"[PageTagStore, userStore, userStore.getCurrentUser]",[824,843],"[CategoryId, PageCategoryStore]",[6422,6459],[2489,2544],"[id, SitePageStore, SitePageStore.loadItem, setTagList, PageCategoryStore, PageTagStore]",[824,843],[823,867],"[AppUserRoleMasterStore, AppUserRoleStore, AppUserRoleStore.getList]",[1541,1590],"[id, AppUserRoleStore, AppUserRoleStore.loadItem, UserManagerStore, AppUserRoleMasterStore]",[2148,2239],"[id, AppTableMasterStore, AppTableMasterStore.loadItem, AppColumnMasterStore.getColumnList, AppColumnMasterStore]",[1783,1874],"[id, AppUserRoleMasterStore, AppUserRoleMasterStore.loadItem, AppUserRoleStore.getRoleList, AppUserRoleStore, UserManagerStore]",[864,912],"[AppStatusListStore, AppStatusListStore.getList, AppTableMasterStore]",[1465,1518],"[id, AppStatusListStore, AppStatusListStore.loadItem, AppTableMasterStore]",[1054,1096],"[AppHistoryStore, AppHistoryStore.getList, AppStatusListStore]",[1397,1450],"[id, AppConfigTypeStore, AppConfigTypeStore.loadItem, AppConfigStore]",[796,864],"[AppConfigStore, AppConfigStore.getList, AppConfigTypeStore, AppConfigTypeStore.getList]",[1557,1602],"[id, AppConfigStore, AppConfigStore.loadItem, AppConfigTypeStore]",[2436,2481],"[id, AppActionStore, AppActionStore.loadItem, AppFlowStore, AppTableMasterStore, AppStatusListStore]",[1118,1158],"[AppActionStore, AppActionStore.getList, AppFlowStore, AppStatusListStore, AppTableMasterStore]",[1061,1088],"[AppApiStore, AppApiStore.ExecuteAction, AppStatusListStore]",[2689,2745],"[id, AppApiStore.ExecuteAction, AppApiStore.getActions, AppStatusListStore, AppApiStore, error, attachFileList]"]