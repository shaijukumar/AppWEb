[{"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\index.tsx":"1","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\reportWebVitals.ts":"2","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\layout\\ScrollToTop.tsx":"3","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\layout\\App.tsx":"4","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\user\\UserStore.ts":"5","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\PageTagStore.ts":"6","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\PageTagList.tsx":"7","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\user\\Login.tsx":"8","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\PageTagEdit.tsx":"9","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\nav\\NavBar.tsx":"10","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\home\\HomePage.tsx":"11","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\ToDo\\ToDoEdit.tsx":"12","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\ToDo\\ToDoList.tsx":"13","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\SitePage\\SitePageEdit.tsx":"14","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\SitePage\\SitePageList.tsx":"15","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryEdit.tsx":"16","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryList.tsx":"17","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\user\\User.ts":"18","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\PageTag.ts":"19","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\api\\agent.ts":"20","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\ToDo\\ToDo.ts":"21","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\ToDo\\ToDoStore.ts":"22","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\SitePage\\SitePageStore.ts":"23","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\SitePage\\SitePage.ts":"24","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryStore.ts":"25","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategory.ts":"26","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\user\\CurrentUserNav.tsx":"27","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\TagChip.tsx":"28","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\common\\form\\TestABCD.tsx":"29","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\common\\form\\PageCategorySelect.tsx":"30","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\common\\form\\MyCustomTxt.tsx":"31","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\common\\common\\PageCategoryItem.tsx":"32","C:\\Shaiju\\wayooz\\client-app\\src\\index.tsx":"33","C:\\Shaiju\\wayooz\\client-app\\src\\reportWebVitals.ts":"34","C:\\Shaiju\\wayooz\\client-app\\src\\app\\layout\\App.tsx":"35","C:\\Shaiju\\wayooz\\client-app\\src\\app\\layout\\ScrollToTop.tsx":"36","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserStore.ts":"37","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\Login.tsx":"38","C:\\Shaiju\\wayooz\\client-app\\src\\features\\home\\HomePage.tsx":"39","C:\\Shaiju\\wayooz\\client-app\\src\\features\\nav\\NavBar.tsx":"40","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\User.ts":"41","C:\\Shaiju\\wayooz\\client-app\\src\\app\\api\\agent.ts":"42","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\CurrentUserNav.tsx":"43","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\MyCustomTxt.tsx":"44","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserList.tsx":"45","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserManagerStore.ts":"46","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserManager.ts":"47","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserEdit.tsx":"48","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRole\\AppUserRoleList.tsx":"49","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRole\\AppUserRoleEdit.tsx":"50","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRole\\AppUserRoleStore.ts":"51","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRole\\AppUserRole.ts":"52","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\AppTableMasterList.tsx":"53","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\AppTableMasterEdit.tsx":"54","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\AppTableMasterStore.ts":"55","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\AppTableMaster.ts":"56","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumnMasterList.tsx":"57","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumnMasterEdit.tsx":"58","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumnMasterStore.ts":"59","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumnMaster.ts":"60","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRoleMaster\\AppUserRoleMasterList.tsx":"61","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRoleMaster\\AppUserRoleMasterEdit.tsx":"62","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRoleMaster\\AppUserRoleMasterStore.ts":"63","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRoleMaster\\AppUserRoleMaster.ts":"64","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserAccess\\AppUserAccessList.tsx":"65","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserAccess\\AppUserAccessEdit.tsx":"66","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserAccess\\AppUserAccessStore.ts":"67","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserAccess\\AppUserAccess.ts":"68","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumn.tsx":"69","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\SystemConstants.ts":"70","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppData\\AppDataEdit.tsx":"71","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppData\\AppDataList.tsx":"72","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppData\\AppData.ts":"73","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppData\\AppDataStore.ts":"74","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppStatusList\\AppStatusListList.tsx":"75","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppStatusList\\AppStatusListEdit.tsx":"76","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppStatusList\\AppStatusList.ts":"77","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppStatusList\\AppStatusListStore.ts":"78","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppHistory\\AppHistoryList.tsx":"79","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppHistory\\AppHistoryEdit.tsx":"80","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppHistory\\AppHistoryStore.ts":"81","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppHistory\\AppHistory.ts":"82","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfigType\\AppConfigTypeList.tsx":"83","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfigType\\AppConfigTypeEdit.tsx":"84","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfigType\\AppConfigTypeStore.ts":"85","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfigType\\AppConfigType.ts":"86","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfig\\AppConfigList.tsx":"87","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfig\\AppConfigStore.ts":"88","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfig\\AppConfig.ts":"89","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfig\\AppConfigEdit.tsx":"90","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAction\\AppActionEdit.tsx":"91","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAction\\AppActionList.tsx":"92","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAction\\AppAction.ts":"93","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAction\\AppActionStore.ts":"94","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppFlow\\AppFlowEdit.tsx":"95","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppFlow\\AppFlowList.tsx":"96","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppFlow\\AppFlowStore.ts":"97","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppFlow\\AppFlow.ts":"98","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppApi\\AppApiList.tsx":"99","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppApi\\AppApiEdit.tsx":"100","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppApi\\AppApi.ts":"101","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppApi\\AppApiStore.ts":"102","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\MyDropDown.tsx":"103","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\MyCheckBox.tsx":"104","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAttachment\\AppAttachmentList.tsx":"105","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAttachment\\AppAttachmentEdit.tsx":"106","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAttachment\\AppAttachmentStore.ts":"107","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAttachment\\AppAttachment.ts":"108","C:\\Shaiju\\wayooz\\client-app\\src\\features\\nav\\listItems.tsx":"109","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNavigation\\AppNavigationList.tsx":"110","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNavigation\\AppNavigationEdit.tsx":"111","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNavigation\\AppNavigationStore.ts":"112","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNavigation\\AppNavigation.ts":"113","C:\\Shaiju\\wayooz\\client-app\\src\\features\\nav\\AppLeftNavBar.tsx":"114","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNotificationsMaster\\AppNotificationsMasterEdit.tsx":"115","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNotificationsMaster\\AppNotificationsMasterList.tsx":"116","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNotificationsMaster\\AppNotificationsMaster.ts":"117","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNotificationsMaster\\AppNotificationsMasterStore.ts":"118","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNitificationTemplate\\AppNitificationTemplateList.tsx":"119","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNitificationTemplate\\AppNitificationTemplateEdit.tsx":"120","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNitificationTemplate\\AppNitificationTemplateStore.ts":"121","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNitificationTemplate\\AppNitificationTemplate.ts":"122","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AdminPage\\AdminPage.tsx":"123","C:\\Shaiju\\wayooz\\client-app\\src\\features\\nav\\Notifications.tsx":"124","C:\\Shaiju\\wayooz\\client-app\\src\\features\\nav\\CurrentUser.tsx":"125","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNotifications\\AppNotificationsList.tsx":"126","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNotifications\\AppNotificationsStore.ts":"127","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNotifications\\AppNotifications.ts":"128","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNotifications\\AppNotificationsEdit.tsx":"129","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserProfile.tsx":"130","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\common\\ErrorPage.tsx":"131","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\Theme.ts":"132","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\TableButton.tsx":"133","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\TableDetails.tsx":"134","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\TableColumns.tsx":"135","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\common\\MessageDialog.tsx":"136","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\TableStatusList.tsx":"137","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\TableFlowList.tsx":"138","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\TableActions.tsx":"139","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\TableActionItemEdit.tsx":"140","C:\\Shaiju\\wayooz\\client-app\\src\\Portal\\Navigation\\NavigationEdit.tsx":"141","C:\\Shaiju\\wayooz\\client-app\\src\\Portal\\Navigation\\Navigation.ts":"142","C:\\Shaiju\\wayooz\\client-app\\src\\Portal\\Api\\Api.ts":"143","C:\\Shaiju\\wayooz\\client-app\\src\\Portal\\Navigation\\NavigationList.tsx":"144","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\common\\ErrorMessage.tsx":"145","C:\\Shaiju\\wayooz\\client-app\\src\\Portal\\Navigation\\LeftNavBar.tsx":"146","C:\\Shaiju\\wayooz\\client-app\\src\\Portal\\Employee\\EmployeeList.tsx":"147","C:\\Shaiju\\wayooz\\client-app\\src\\Portal\\Employee\\EmployeeEdit.tsx":"148","C:\\Shaiju\\wayooz\\client-app\\src\\Portal\\Employee\\Employee.ts":"149","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\ConfigDropDown.tsx":"150","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\RoleSelect.tsx":"151","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\UserSelect.tsx":"152","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\MyDatePicker.tsx":"153","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\MyAttachment.tsx":"154"},{"size":766,"mtime":1613232574000,"results":"155","hashOfConfig":"156"},{"size":425,"mtime":499202100000,"results":"157","hashOfConfig":"156"},{"size":311,"mtime":1612453058000,"results":"158","hashOfConfig":"156"},{"size":2565,"mtime":1617510382000,"results":"159","hashOfConfig":"156"},{"size":1858,"mtime":1613238916000,"results":"160","hashOfConfig":"156"},{"size":2695,"mtime":1614453736000,"results":"161","hashOfConfig":"156"},{"size":2759,"mtime":1613690668000,"results":"162","hashOfConfig":"156"},{"size":3164,"mtime":1613232614000,"results":"163","hashOfConfig":"156"},{"size":3245,"mtime":1614208660000,"results":"164","hashOfConfig":"156"},{"size":2626,"mtime":1617564034000,"results":"165","hashOfConfig":"156"},{"size":1119,"mtime":1614644996000,"results":"166","hashOfConfig":"156"},{"size":3210,"mtime":1613233048000,"results":"167","hashOfConfig":"156"},{"size":2460,"mtime":1614639548000,"results":"168","hashOfConfig":"156"},{"size":7790,"mtime":1620315798000,"results":"169","hashOfConfig":"156"},{"size":2713,"mtime":1614562032000,"results":"170","hashOfConfig":"156"},{"size":5262,"mtime":1617579894000,"results":"171","hashOfConfig":"156"},{"size":2717,"mtime":1617560276000,"results":"172","hashOfConfig":"156"},{"size":493,"mtime":1612942978000,"results":"173","hashOfConfig":"156"},{"size":251,"mtime":1613690534000,"results":"174","hashOfConfig":"156"},{"size":1501,"mtime":1613238564000,"results":"175","hashOfConfig":"156"},{"size":225,"mtime":1613066634000,"results":"176","hashOfConfig":"156"},{"size":2959,"mtime":1613240398000,"results":"177","hashOfConfig":"156"},{"size":2539,"mtime":1613245984000,"results":"178","hashOfConfig":"156"},{"size":530,"mtime":1617565020000,"results":"179","hashOfConfig":"156"},{"size":2635,"mtime":1617510488000,"results":"180","hashOfConfig":"156"},{"size":411,"mtime":1617483040000,"results":"181","hashOfConfig":"156"},{"size":821,"mtime":1613232684000,"results":"182","hashOfConfig":"156"},{"size":635,"mtime":1614455866000,"results":"183","hashOfConfig":"156"},{"size":483,"mtime":1614648878000,"results":"184","hashOfConfig":"156"},{"size":1481,"mtime":1617566328000,"results":"185","hashOfConfig":"156"},{"size":1034,"mtime":1617588490000,"results":"186","hashOfConfig":"156"},{"size":947,"mtime":1617561322000,"results":"187","hashOfConfig":"156"},{"size":765,"mtime":1625059577496,"results":"188","hashOfConfig":"189"},{"size":425,"mtime":499202100000,"results":"190","hashOfConfig":"189"},{"size":13777,"mtime":1627212067507,"results":"191","hashOfConfig":"189"},{"size":347,"mtime":1625091577698,"results":"192","hashOfConfig":"189"},{"size":2201,"mtime":1620740255212,"results":"193","hashOfConfig":"189"},{"size":3163,"mtime":1622621679202,"results":"194","hashOfConfig":"189"},{"size":569,"mtime":1625654139303,"results":"195","hashOfConfig":"189"},{"size":4782,"mtime":1625059484734,"results":"196","hashOfConfig":"189"},{"size":727,"mtime":1620915237107,"results":"197","hashOfConfig":"189"},{"size":2452,"mtime":1625648340615,"results":"198","hashOfConfig":"189"},{"size":821,"mtime":1613232684000,"results":"199","hashOfConfig":"189"},{"size":1643,"mtime":1627396608528,"results":"200","hashOfConfig":"189"},{"size":5276,"mtime":1626891205820,"results":"201","hashOfConfig":"189"},{"size":2868,"mtime":1626357860482,"results":"202","hashOfConfig":"189"},{"size":452,"mtime":1625893510835,"results":"203","hashOfConfig":"189"},{"size":5390,"mtime":1626357868575,"results":"204","hashOfConfig":"189"},{"size":3024,"mtime":1626002572164,"results":"205","hashOfConfig":"189"},{"size":5611,"mtime":1626622772394,"results":"206","hashOfConfig":"189"},{"size":3254,"mtime":1626003963699,"results":"207","hashOfConfig":"189"},{"size":294,"mtime":1622617795721,"results":"208","hashOfConfig":"189"},{"size":5312,"mtime":1627017354219,"results":"209","hashOfConfig":"189"},{"size":8661,"mtime":1627017307024,"results":"210","hashOfConfig":"189"},{"size":2730,"mtime":1626891571043,"results":"211","hashOfConfig":"189"},{"size":290,"mtime":1622953435901,"results":"212","hashOfConfig":"189"},{"size":2648,"mtime":1621340044682,"results":"213","hashOfConfig":"189"},{"size":4736,"mtime":1626536936738,"results":"214","hashOfConfig":"189"},{"size":3399,"mtime":1626157447035,"results":"215","hashOfConfig":"189"},{"size":547,"mtime":1626536860599,"results":"216","hashOfConfig":"189"},{"size":2439,"mtime":1626891075605,"results":"217","hashOfConfig":"189"},{"size":8581,"mtime":1627021277877,"results":"218","hashOfConfig":"189"},{"size":4211,"mtime":1626891337859,"results":"219","hashOfConfig":"189"},{"size":670,"mtime":1626361635342,"results":"220","hashOfConfig":"189"},{"size":2715,"mtime":1621339043459,"results":"221","hashOfConfig":"189"},{"size":4314,"mtime":1622617658872,"results":"222","hashOfConfig":"189"},{"size":2643,"mtime":1622617663487,"results":"223","hashOfConfig":"189"},{"size":335,"mtime":1622617616547,"results":"224","hashOfConfig":"189"},{"size":7120,"mtime":1626536971013,"results":"225","hashOfConfig":"189"},{"size":1084,"mtime":1626666899553,"results":"226","hashOfConfig":"189"},{"size":3230,"mtime":1622034130541,"results":"227","hashOfConfig":"189"},{"size":2441,"mtime":1622034130558,"results":"228","hashOfConfig":"189"},{"size":251,"mtime":1622034130496,"results":"229","hashOfConfig":"189"},{"size":2518,"mtime":1622034130520,"results":"230","hashOfConfig":"189"},{"size":3219,"mtime":1625654407471,"results":"231","hashOfConfig":"189"},{"size":4659,"mtime":1625654422736,"results":"232","hashOfConfig":"189"},{"size":311,"mtime":1622609157708,"results":"233","hashOfConfig":"189"},{"size":3285,"mtime":1626174047515,"results":"234","hashOfConfig":"189"},{"size":2520,"mtime":1625654483311,"results":"235","hashOfConfig":"189"},{"size":3309,"mtime":1622617576839,"results":"236","hashOfConfig":"189"},{"size":2580,"mtime":1622617583934,"results":"237","hashOfConfig":"189"},{"size":648,"mtime":1624807837013,"results":"238","hashOfConfig":"189"},{"size":2554,"mtime":1622542870642,"results":"239","hashOfConfig":"189"},{"size":6239,"mtime":1626890629010,"results":"240","hashOfConfig":"189"},{"size":2671,"mtime":1625387314197,"results":"241","hashOfConfig":"189"},{"size":286,"mtime":1622542508776,"results":"242","hashOfConfig":"189"},{"size":3247,"mtime":1626892484277,"results":"243","hashOfConfig":"189"},{"size":3178,"mtime":1622607148410,"results":"244","hashOfConfig":"189"},{"size":569,"mtime":1625390657128,"results":"245","hashOfConfig":"189"},{"size":6384,"mtime":1626890683368,"results":"246","hashOfConfig":"189"},{"size":6711,"mtime":1626336130866,"results":"247","hashOfConfig":"189"},{"size":4807,"mtime":1625650899870,"results":"248","hashOfConfig":"189"},{"size":704,"mtime":1626339870114,"results":"249","hashOfConfig":"189"},{"size":3150,"mtime":1626347554539,"results":"250","hashOfConfig":"189"},{"size":3253,"mtime":1622720677097,"results":"251","hashOfConfig":"189"},{"size":2459,"mtime":1622723466422,"results":"252","hashOfConfig":"189"},{"size":2977,"mtime":1626891672470,"results":"253","hashOfConfig":"189"},{"size":251,"mtime":1626182901618,"results":"254","hashOfConfig":"189"},{"size":4597,"mtime":1626600228782,"results":"255","hashOfConfig":"189"},{"size":13781,"mtime":1626892248409,"results":"256","hashOfConfig":"189"},{"size":3712,"mtime":1627447092372,"results":"257","hashOfConfig":"189"},{"size":6779,"mtime":1625949180234,"results":"258","hashOfConfig":"189"},{"size":2040,"mtime":1626337090449,"results":"259","hashOfConfig":"189"},{"size":1118,"mtime":1627368726002,"results":"260","hashOfConfig":"189"},{"size":2781,"mtime":1626890734095,"results":"261","hashOfConfig":"189"},{"size":4382,"mtime":1625654848591,"results":"262","hashOfConfig":"189"},{"size":3691,"mtime":1625654775099,"results":"263","hashOfConfig":"189"},{"size":945,"mtime":1624011160447,"results":"264","hashOfConfig":"189"},{"size":2388,"mtime":1625067792138,"results":"265","hashOfConfig":"189"},{"size":3106,"mtime":1626891621981,"results":"266","hashOfConfig":"189"},{"size":5286,"mtime":1626516887653,"results":"267","hashOfConfig":"189"},{"size":2904,"mtime":1625654461944,"results":"268","hashOfConfig":"189"},{"size":467,"mtime":1626891642178,"results":"269","hashOfConfig":"189"},{"size":1650,"mtime":1627027374480,"results":"270","hashOfConfig":"189"},{"size":3553,"mtime":1625141691855,"results":"271","hashOfConfig":"189"},{"size":2682,"mtime":1625142217348,"results":"272","hashOfConfig":"189"},{"size":742,"mtime":1625564593918,"results":"273","hashOfConfig":"189"},{"size":2832,"mtime":1625141604105,"results":"274","hashOfConfig":"189"},{"size":2527,"mtime":1625648755310,"results":"275","hashOfConfig":"189"},{"size":5063,"mtime":1625490438421,"results":"276","hashOfConfig":"189"},{"size":2854,"mtime":1625370706343,"results":"277","hashOfConfig":"189"},{"size":367,"mtime":1625370688553,"results":"278","hashOfConfig":"189"},{"size":1998,"mtime":1625649413109,"results":"279","hashOfConfig":"189"},{"size":4755,"mtime":1625654109322,"results":"280","hashOfConfig":"189"},{"size":1599,"mtime":1625649044832,"results":"281","hashOfConfig":"189"},{"size":2740,"mtime":1625552573890,"results":"282","hashOfConfig":"189"},{"size":3379,"mtime":1625553689239,"results":"283","hashOfConfig":"189"},{"size":724,"mtime":1625648686876,"results":"284","hashOfConfig":"189"},{"size":3783,"mtime":1625496119335,"results":"285","hashOfConfig":"189"},{"size":545,"mtime":1625653998234,"results":"286","hashOfConfig":"189"},{"size":541,"mtime":1625857314877,"results":"287","hashOfConfig":"189"},{"size":258,"mtime":1626175876293,"results":"288","hashOfConfig":"189"},{"size":1262,"mtime":1626251624541,"results":"289","hashOfConfig":"189"},{"size":3376,"mtime":1627016445166,"results":"290","hashOfConfig":"189"},{"size":6005,"mtime":1627016340678,"results":"291","hashOfConfig":"189"},{"size":1294,"mtime":1626251586130,"results":"292","hashOfConfig":"189"},{"size":5902,"mtime":1627016493623,"results":"293","hashOfConfig":"189"},{"size":5339,"mtime":1627016375641,"results":"294","hashOfConfig":"189"},{"size":8823,"mtime":1627018844797,"results":"295","hashOfConfig":"189"},{"size":8233,"mtime":1627019056184,"results":"296","hashOfConfig":"189"},{"size":6071,"mtime":1627294640843,"results":"297","hashOfConfig":"189"},{"size":548,"mtime":1626664936100,"results":"298","hashOfConfig":"189"},{"size":11971,"mtime":1627485511069,"results":"299","hashOfConfig":"189"},{"size":3561,"mtime":1627313552363,"results":"300","hashOfConfig":"189"},{"size":533,"mtime":1626933559861,"results":"301","hashOfConfig":"189"},{"size":2076,"mtime":1627030008291,"results":"302","hashOfConfig":"189"},{"size":3335,"mtime":1627401213064,"results":"303","hashOfConfig":"189"},{"size":6248,"mtime":1627569638853,"results":"304","hashOfConfig":"189"},{"size":802,"mtime":1627461867278,"results":"305","hashOfConfig":"189"},{"size":3790,"mtime":1627369352717,"results":"306","hashOfConfig":"189"},{"size":2997,"mtime":1627369789668,"results":"307","hashOfConfig":"189"},{"size":2915,"mtime":1627369828653,"results":"308","hashOfConfig":"189"},{"size":2255,"mtime":1627400956744,"results":"309","hashOfConfig":"189"},{"size":11059,"mtime":1627569707644,"results":"310","hashOfConfig":"189"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d76hw6",{"filePath":"313","messages":"314","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"317","messages":"318","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"321","messages":"322","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"329","messages":"330","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"331","messages":"332","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"333","messages":"334","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"335","messages":"336","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"337","messages":"338","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"339"},{"filePath":"340","messages":"341","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"342","messages":"343","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"344","messages":"345","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"346","messages":"347","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"348","messages":"349","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"350","messages":"351","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"352","messages":"353","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"354","messages":"355","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"356","messages":"357","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"358","messages":"359","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"360","messages":"361","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"362","messages":"363","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"364","messages":"365","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"366","messages":"367","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"368","messages":"369","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"370","messages":"371","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"372","messages":"373","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"374","messages":"375","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"376","messages":"377","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},"11y7zz1",{"filePath":"379","messages":"380","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"381","messages":"382","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"383","messages":"384","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"385","messages":"386","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"387","messages":"388","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"389","messages":"390","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"391","messages":"392","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"393"},{"filePath":"394","messages":"395","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"396","messages":"397","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"398","messages":"399","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"393"},{"filePath":"400","messages":"401","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"402","usedDeprecatedRules":"378"},{"filePath":"403","messages":"404","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"405","messages":"406","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"407","messages":"408","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"409","messages":"410","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"411","messages":"412","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"413","messages":"414","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"415","messages":"416","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"417","messages":"418","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"419","messages":"420","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"421","messages":"422","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"423","usedDeprecatedRules":"378"},{"filePath":"424","messages":"425","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"426","messages":"427","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"428","messages":"429","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"430","messages":"431","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"432","messages":"433","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"434","messages":"435","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"436","messages":"437","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"438","messages":"439","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"440","messages":"441","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"442","messages":"443","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"444","messages":"445","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"446","messages":"447","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"448","messages":"449","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"450","messages":"451","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"452","messages":"453","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"454","messages":"455","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"456","messages":"457","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"458","messages":"459","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"460","messages":"461","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"462","messages":"463","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"464","messages":"465","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"466","messages":"467","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"470","messages":"471","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"472","messages":"473","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"474","messages":"475","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"486","messages":"487","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"488","messages":"489","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"490","usedDeprecatedRules":"378"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"503","messages":"504","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"505","messages":"506","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"507","messages":"508","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"517","usedDeprecatedRules":"378"},{"filePath":"518","messages":"519","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"520","messages":"521","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"526","usedDeprecatedRules":"378"},{"filePath":"527","messages":"528","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"529","usedDeprecatedRules":"378"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"534","messages":"535","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"536","messages":"537","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"538","messages":"539","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"540","messages":"541","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"542","messages":"543","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"546","messages":"547","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"548","messages":"549","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"550","messages":"551","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"556","messages":"557","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"558","messages":"559","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"560","messages":"561","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"566","messages":"567","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"568","messages":"569","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"570","messages":"571","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"572","messages":"573","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"576","messages":"577","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"578","messages":"579","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"580","messages":"581","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"586","messages":"587","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"588","usedDeprecatedRules":"378"},{"filePath":"589","messages":"590","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"378"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"378"},{"filePath":"597","messages":"598","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"599","usedDeprecatedRules":"378"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"602","usedDeprecatedRules":"378"},{"filePath":"603","messages":"604","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"605","messages":"606","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"607","usedDeprecatedRules":"378"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"612","messages":"613","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"614","usedDeprecatedRules":"378"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"617","usedDeprecatedRules":"378"},{"filePath":"618","messages":"619","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"378"},{"filePath":"620","messages":"621","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"622","usedDeprecatedRules":"378"},{"filePath":"623","messages":"624","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"378"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"628","usedDeprecatedRules":"378"},{"filePath":"629","messages":"630","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"631","usedDeprecatedRules":"378"},{"filePath":"632","messages":"633","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"634","usedDeprecatedRules":"378"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637","usedDeprecatedRules":"378"},{"filePath":"638","messages":"639","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"640","usedDeprecatedRules":"378"},{"filePath":"641","messages":"642","errorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\index.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\reportWebVitals.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\layout\\ScrollToTop.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\layout\\App.tsx",["643"],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\user\\UserStore.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\PageTagStore.ts",["644"],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\PageTagList.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\user\\Login.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\PageTagEdit.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\nav\\NavBar.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\home\\HomePage.tsx",["645"],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\ToDo\\ToDoEdit.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\ToDo\\ToDoList.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\SitePage\\SitePageEdit.tsx",["646"],"import { Button, ButtonGroup, Chip, Container, LinearProgress, TextField } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useRef, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { SitePage } from './SitePage';\nimport { SitePageContext } from './SitePageStore';\nimport { observer } from 'mobx-react-lite';\nimport { Tag, TagGroup } from 'rsuite';\nimport 'rsuite/dist/styles/rsuite-default.css';\nimport MyTag from '../../app/common/form/MyTag';\nimport { PageTagContext } from '../PageTag/PageTagStore';\nimport { IPageTag, PageTag } from '../PageTag/PageTag';\nimport { Autocomplete } from '@material-ui/lab';\nimport ContentEditable from \"react-contenteditable\";\n\nimport PageCategorySelect from '../../app/common/form/PageCategorySelect';\nimport { PageCategoryContext } from '../PageCategory/PageCategoryStore';\nimport ContentEdit from './ContentEdit';\n\n\ninterface DetailParms {\n  id: string;\n}\nconst SitePageEdit: React.FC = () => {\n\n  \n\n  const { id } = useParams<DetailParms>();\n  let history = useHistory();\n\n  const SitePageStore = useContext(SitePageContext);\n  const PageTagStore = useContext(PageTagContext);\n  const PageCategoryStore = useContext(PageCategoryContext);\n \n  \n  const [item, setItem] = useState(new SitePage());\n  const [loading, setLoading] = useState(true);  \n  const [tagList, setTagList] = useState<PageTag[]>();\n  \n  const sanitize = () => {\n    //item.PageHtml = d.target.value ;\n    //this.setState({ html: sanitizeHtml(this.state.html, this.sanitizeConf) });\n  };\n\n  useEffect(() => {\n    \n    PageCategoryStore.getList();\n    SitePageStore.loadItem(id);\n    let tgLst: IPageTag[] = [];\n    if (id) {\n      SitePageStore.loadItem(id).then((val) => {\n                 \n        if(val){         \n          if(val?.Tags){\n            val?.Tags.split(' ').map( t => {                  \n                let tg = new PageTag();    \n                tg.Id = t;\n                tg.value = t;\n                tg.label = PageTagStore.getTag(t);\n                tg.value && tgLst.push(tg);          \n            });               \n          }\n        }       \n        setTagList(tgLst);              \n        setItem(val as any);  \n        setLoading(false);   \n      });\n    } else {\n      setItem(new SitePage()); \n      setTagList(tgLst);\n      setLoading(false);     \n    }\n    \n  }, [id, SitePageStore, SitePageStore.loadItem, setTagList]);\n\n  const onItemSubmit = (values: any) => {    \n    //debugger;   \n    setLoading(true);\n    values.Tags = \"\";\n    tagList?.map( t => {\n      values.Tags += t.Id + \" \";\n    });\n    \n    SitePageStore.editItem(values).then((val) => {      \n      setItem(new SitePage(val));\n      setLoading(false);\n    });\n\n  };\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    <Container component=\"main\" maxWidth=\"xs\">  \n      \n      <Formik\n          initialValues={item}\n          //dirty={}\n          validationSchema={Yup.object({\n            Title: Yup.string().required('Title required'),   \n            URLTitle: Yup.string().required('URL Title required'), \n            CatId: Yup.string().required('Category required'),  \n            PageHtml: Yup.string().required('PageHtml required'),                 \n          })}\n          onSubmit={onItemSubmit}          \n        >\n      \n{({ handleChange, handleBlur, handleSubmit, values, isValid, dirty, setFieldValue, setFieldTouched, validateForm }) => (\n          <Form >             \n            \n          <MyCustomTxt   \n              name=\"Title\"                         \n              type=\"text\"                \n              autoFocus={true}\n              required={true}                                \n              label=\"Title\"                                                                     \n            />\n                type=\"text\"                                \n                required={true}                                \n                label=\"URL Title\"                                                                     \n             />\n\n            <PageCategorySelect\n                name=\"CatId\"                                                                         \n                required={false}                                \n                label=\"Category\" \n                list={PageCategoryStore.itemList}\n                parent= {false}\n             />\n                                          \n              <Autocomplete     \n                  className=\"customFieldMargin\"                              \n                  value={tagList}\n                  multiple\n                  id=\"TagList\"          \n                  options={PageTagStore.itemList as any[]}\n                  //classes={classes}\n                  getOptionLabel={(option:any) => option.label}                  \n                  freeSolo\n                  renderTags={(value, getTagProps) =>\n                    value.map((option:any, index) => (\n                      tagList  && <Chip variant=\"outlined\" label={option.label} {...getTagProps({ index })} /> \n                    ))\n                  }\n                  renderInput={(params) => (\n                    <TextField {...params} variant=\"outlined\" label=\"Tags\" placeholder=\"Tags\" fullWidth />\n                  )}\n                  \n                  onChange={(event:any, newValue:any) => {\n                    debugger;\n                    setTagList(newValue);                           \n                  }}\n              />\n            \n            <ContentEditable\n              id=\"PageHtml\"              \n              className=\"editable\"\n              tagName=\"pre\"\n              html={item.PageHtml} // innerHTML of the editable div\n              //disabled={!this.state.editable} // use true to disable edition\n              onChange={(d:any) => { \n                debugger;                                 \n                item.PageHtml = d.target.value ; \n                setFieldValue('PageHtml', d.target.value);\n                setFieldTouched(\"PageHtml\", true);\n                \n              }} // handle innerHTML change\n              onBlur={sanitize}\n            />            \n\n            {/* <textarea\n              className=\"editable\"\n              value={item.PageHtml}\n              onChange={ (d:any) => {setFieldValue('PageHtml', d.target.value);} }\n              //onBlur={this.sanitize}\n            /> */}\n                         \n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                <Button\n                  disabled={!isValid}\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"                  \n                >\n                  Save\n                </Button> \n                { item.Id && \n                  <Button\n                     \n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n                      SitePageStore.deleteItem(item.Id).then( () => {\n                        history.push('/SitePagelist');\n                      })\n                    }}\n                  >\n                    Delete\n                  </Button>\n                }\n                <Button onClick={ () => { history.push('/SitePagelist');  }}>Back</Button>          \n              </ButtonGroup>\n\n          </Form>\n           )}        \n        </Formik>      \n    </Container>\n  );\n};\n\nexport default observer(SitePageEdit);\n\n","C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\SitePage\\SitePageList.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryEdit.tsx",["647","648","649","650","651"],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryList.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\user\\User.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\PageTag.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\api\\agent.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\ToDo\\ToDo.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\ToDo\\ToDoStore.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\SitePage\\SitePageStore.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\SitePage\\SitePage.ts",["652"],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategoryStore.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageCategory\\PageCategory.ts",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\user\\CurrentUserNav.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\features\\PageTag\\TagChip.tsx",["653"],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\common\\form\\TestABCD.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\common\\form\\PageCategorySelect.tsx",["654","655"],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\common\\form\\MyCustomTxt.tsx",[],"C:\\Shaiju\\GitGub\\wayooz\\client-app\\src\\app\\common\\common\\PageCategoryItem.tsx",["656","657","658"],"C:\\Shaiju\\wayooz\\client-app\\src\\index.tsx",[],["659","660"],"C:\\Shaiju\\wayooz\\client-app\\src\\reportWebVitals.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\app\\layout\\App.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\app\\layout\\ScrollToTop.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\Login.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\home\\HomePage.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\nav\\NavBar.tsx",[],["661","662"],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\User.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\app\\api\\agent.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\CurrentUserNav.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\MyCustomTxt.tsx",["663","664"],"import React, { useEffect } from \"react\";\r\nimport {  \r\n  useField,\r\n  FieldAttributes,  \r\n} from \"formik\";\r\n\r\nimport {        \r\n    TextField,    \r\n  } from \"@material-ui/core\";\r\n\r\nimport moment from 'moment';\r\n\r\ntype CustomTxtProps = { label: string, multiline?: boolean, width?: string  } & FieldAttributes<{}>;\r\n\r\nconst MyCustomTxt: React.FC<CustomTxtProps> = ({ label, placeholder, type,required,autoComplete, autoFocus,multiline, width, ...props }) => {\r\n\r\n  const [field,meta , { setValue }] = useField<{}>(props);\r\n  \r\n  useEffect(() => {\r\n    if( type == \"date\" ){\r\n      debugger;\r\n      if(field.value){\r\n        setValue(moment(field.value).format(\"YYYY-MM-DD\"));\r\n      }      \r\n    }\r\n  },[]);\r\n    //const [field] = useField<{}>(props);\r\n\r\n    \r\n    //const [txtMargin] = useField('normal');\r\n    const errorText = meta.error && meta.touched ? meta.error : \"\";\r\n  //var multiline = true;\r\n    return (      \r\n        <TextField\r\n           \r\n            placeholder={placeholder}\r\n            {...field}\r\n            type={type}          \r\n            error={!!errorText}\r\n            variant=\"outlined\"\r\n            margin='normal'\r\n            required={required}\r\n           //autoComplete={autoComplete}\r\n            autoFocus={autoFocus}\r\n            fullWidth   \r\n            label={label}\r\n            multiline={multiline}  \r\n            style={{width: width, display: 'block'}}    \r\n            size='small'  \r\n            \r\n            InputLabelProps={{\r\n              shrink: true,\r\n            }}\r\n\r\n                                      \r\n      />           \r\n    );        \r\n  };\r\n\r\nexport default MyCustomTxt;\r\n\r\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserManagerStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserManager.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRole\\AppUserRoleList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRole\\AppUserRoleEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRole\\AppUserRoleStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRole\\AppUserRole.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\AppTableMasterList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\AppTableMasterEdit.tsx",["665"],"import { Button, ButtonGroup, Container, LinearProgress, List, ListItem, Paper, Table, TableContainer, TableHead, TableRow, TableCell, TableBody, Dialog, DialogTitle, DialogContent, DialogContentText, Link, AppBar, Tabs, Tab } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { AppTableMaster } from './AppTableMaster';\nimport { AppTableMasterContext } from './AppTableMasterStore';\nimport { observer } from 'mobx-react-lite';\nimport { AppColumnMasterContext } from '../AppColumnMaster/AppColumnMasterStore';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport AppColumn from '../AppColumnMaster/AppColumn';\nimport { AppColumnMaster } from '../AppColumnMaster/AppColumnMaster';\nimport { ColumnDataType } from '../../app/common/SystemConstants';\nimport ErrorMessage from '../../app/common/common/ErrorMessage';\n\ninterface DetailParms {\n  id: string;\n}\nconst AppTableMasterEdit: React.FC = () => {\n\n  const { id } = useParams<DetailParms>();\n  const AppTableMasterStore = useContext(AppTableMasterContext);\n  const AppColumnMasterStore = useContext(AppColumnMasterContext); \n \n  let history = useHistory();\n  const [item, setItem] = useState(new AppTableMaster());\n  const [loading, setLoading] = useState(true);\n\n  const [open, setOpen] = useState(false);\n  const [selectedColumn, setSelectedColumn] = useState(new AppColumnMaster());\n  const [error, setError] = useState('');\n\n  const [tabValue, setTabValue] = useState(0);\n  const handleChange = (event: React.ChangeEvent<{}>, newValue: number) => {\n    setTabValue(newValue);\n  };\n \n \n  \n  \n  \n  useEffect(() => {\n\n    AppTableMasterStore.loadItem(Number(id));\n    if (id) {      \n      AppColumnMasterStore.getColumnList(Number(id));\n      AppTableMasterStore.loadItem(Number(id)).then((res) => {\n\n        if((res as any).errors){          \n          setError( error + \", \" + (res as any).errors.Error); \n          setLoading(false);                       \n        }\n        else{\n          setItem(res as any); setLoading(false);  \n        }          \n      });\n    } else {\n      setItem(new AppTableMaster()); \n      setLoading(false);     \n    }\n    \n  }, [id, AppTableMasterStore, AppTableMasterStore.loadItem, AppColumnMasterStore.getColumnList, AppColumnMasterStore]);\n\n  const onItemSubmit = (values: any) => {    \n    setLoading(true);\n    AppTableMasterStore.editItem(values).then((val) => {\n      history.push('/AppTableMasterlist');\n      // debugger;\n      // setItem(new AppTableMaster(val));\n      // setLoading(false);\n    });\n  };\n\n  const openModel = (col: AppColumnMaster) => {  \n    if(!col.TableID){\n      col.TableID = item.Id;\n    }\n    setSelectedColumn(col);\n    setOpen(true);\n  };\n\n  const RefreshColumns = (col: AppColumnMaster) => {  \n    //refresh colu\n    AppColumnMasterStore.getColumnList(Number(id));\n    setOpen(false);\n  };\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    <Container component=\"main\" maxWidth=\"lg\">  \n    <ErrorMessage message={error} /> \t\n\n      <Formik\n          initialValues={item}\n          validationSchema={Yup.object({\n            Title: Yup.string().required('Title required'),                     \n          })}\n          onSubmit={onItemSubmit}\n          \n        >\n          <Form > \n            {item.Id}\n            <MyCustomTxt   \n                name=\"Title\"                         \n                type=\"text\"                \n                autoFocus={true}\n                required={true}                                \n                label=\"Title\"                                                                     \n            />\n\n            {/* <MyCustomTxt   \n                name=\"UserAccess\"                         \n                type=\"text\"                \n                autoFocus={true}\n                required={false}   \n                multiline={true}                             \n                label=\"User Access\"                                                                     \n            /> */}\n                           \n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n                <Button\n                  type=\"submit\"\n                  fullWidth\n                  variant=\"contained\"\n                  color=\"primary\"                  \n                >\n                  Save\n                </Button> \n                { item.Id && \n                  <Button\n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n                      AppTableMasterStore.deleteItem(item.Id).then( () => {\n                        history.push('/AppTableMasterlist');\n                      })\n                    }}\n                  >\n                    Delete\n                  </Button>\n                }\n                <Button onClick={ () => { history.push('/AppTableMasterlist');  }}>Back</Button>   \n\n              </ButtonGroup>\n\n          </Form>\n        </Formik>\n\n\n        <List>\n          <ListItem divider>\n            {/* <h5>Column List</h5>   */}\n              \n            <div>\n              <AppBar position=\"static\">\n                <Tabs value={tabValue} onChange={handleChange} aria-label=\"simple tabs example\">\n                  <Tab label=\"Column List\" />\n                  <Tab label=\"Actions\" />                  \n                </Tabs>\n              </AppBar>                           \n          </div>\n      \n          </ListItem>\n          \n          <div hidden={tabValue !== 0}>\n          <ListItem divider hidden={true}  >\n            <TableContainer component={Paper}>\n              <Table aria-label=\"simple table\">\n                <TableHead>\n                  <TableRow>\n                    {/* <TableCell>ID</TableCell> */}\n                    <TableCell align=\"left\">Title</TableCell>\n                    <TableCell align=\"left\">Type</TableCell>\n                    <TableCell align=\"left\">AppDataFiled</TableCell>\n                    {/* <TableCell align=\"left\">User Access</TableCell> */}\n                    <TableCell align=\"left\">Delete</TableCell>\n                  </TableRow>\n                </TableHead>\n                <TableBody>\n                  {AppColumnMasterStore.columnList.map((row) => (\n                    <TableRow key={row.Id} >\n                      {/* <TableCell component=\"th\" scope=\"row\"  >\n                        <NavLink to={\"/AppColumnMasterItemEdit/\" + row.Id } >{row.Id}</NavLink> \n                      </TableCell> */}\n                                              \n                      <TableCell align=\"left\"  >\n                        <Link href=\"#\" onClick={ () => { openModel( row ) } } >{row.Title}</Link>\n                        \n                      </TableCell>  \n                      <TableCell align=\"left\"> { ColumnDataType.find( u => u.Id === row.Type )?.value }</TableCell> \n                      <TableCell align=\"left\">{row.AppDataFiled}</TableCell> \n                      {/* <TableCell align=\"left\">{row.UserAccess}</TableCell>   */}\n                      <TableCell align=\"left\" >\n                        <DeleteOutlinedIcon onClick={ () => { AppColumnMasterStore.deleteItem(row.Id).then( () => {   AppColumnMasterStore.getColumnList(Number(id)); } )}}  />\n                      </TableCell>            \n                    </TableRow>\n                  ))}\n\n                  <TableRow key=\"AddNew\" >                                                                  \n                   \n                    <Button color=\"primary\" onClick={ () => { openModel( new AppColumnMaster() ) }}>Add New Column</Button>   \n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </ListItem>                    \n          </div>\n     \n      </List> \n\n      <Dialog onClose={() => {}} aria-labelledby=\"simple-dialog-title\" open={open}>\n        <DialogTitle id=\"simple-dialog-title\">Column</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            <AppColumn initVal={selectedColumn} parentRefresh={RefreshColumns} />\n          </DialogContentText>\n        </DialogContent>           \n      </Dialog>      \n    </Container>\n\n\n  );\n};\n\nexport default observer(AppTableMasterEdit);\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\AppTableMasterStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\AppTableMaster.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumnMasterList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumnMasterEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumnMasterStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumnMaster.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRoleMaster\\AppUserRoleMasterList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRoleMaster\\AppUserRoleMasterEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRoleMaster\\AppUserRoleMasterStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserRoleMaster\\AppUserRoleMaster.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserAccess\\AppUserAccessList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserAccess\\AppUserAccessEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserAccess\\AppUserAccessStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppUserAccess\\AppUserAccess.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppColumnMaster\\AppColumn.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\SystemConstants.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppData\\AppDataEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppData\\AppDataList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppData\\AppData.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppData\\AppDataStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppStatusList\\AppStatusListList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppStatusList\\AppStatusListEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppStatusList\\AppStatusList.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppStatusList\\AppStatusListStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppHistory\\AppHistoryList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppHistory\\AppHistoryEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppHistory\\AppHistoryStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppHistory\\AppHistory.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfigType\\AppConfigTypeList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfigType\\AppConfigTypeEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfigType\\AppConfigTypeStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfigType\\AppConfigType.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfig\\AppConfigList.tsx",["666","667"],"import React, { useContext, useEffect, useState } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { AppConfigContext } from './AppConfigStore';\nimport { Button, ButtonGroup, LinearProgress, List, ListItem } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nimport { AppConfigTypeContext } from '../AppConfigType/AppConfigTypeStore';\nimport { IAppConfig } from './AppConfig';\nimport MaterialTable from 'material-table';\nimport { IAppConfigType } from '../AppConfigType/AppConfigType';\n \nconst AppConfigList: React.FC = () => {\n\n  const AppConfigTypeStore = useContext(AppConfigTypeContext);\n  const AppConfigStore = useContext(AppConfigContext);  \n  const [types, setTypes] = useState<string[]>([]); \n\n  const TableColumns = [\n    {\n      title: \"Order\",\n      field: \"Order\",          \n      defaultSort: \"asc\",\n      filtering: false,\n    },\n    {\n      title: \"Title\",\n      field: \"Title\",\n      render : (values: IAppConfig) => { return <NavLink to={`/AppConfigItemEdit/${values.ConfigTypeId}/${values.Id}` } >{values.Title}</NavLink> },\n    },\n    {\n      title: \"Type\",\n      field: \"ConfigTypeId\", \n      render : (values: IAppConfig) => { return AppConfigTypeStore.itemList.find( u => u.Id === values.ConfigTypeId )?.Title },\n      lookup: types, \n    },\n    {\n      title: \"Id\",\n      field: \"Id\", \n      render : (values: IAppConfig) => { return <DeleteOutlinedIcon onClick={ () => { AppConfigStore.deleteItem(values.Id).then( () => {   AppConfigStore.getList(); })}}  /> },      \n      filtering: false,\n    },\n  ];\n\n   \n  \n    useEffect(() => {       \n      \n      AppConfigTypeStore.getList().then( (res : any) => {        \n        res.map( (row:IAppConfigType) => {\n          types[ row.Id ] =  row.Title;                  \n        });        \n        setTypes(types);\n      });\n\n      AppConfigStore.getList();                        \n    }, [AppConfigStore, AppConfigStore.getList, AppConfigTypeStore.getList])       \n\n    if(AppConfigStore.loading){\n      return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \n    }\n\n    return (\n      <List>\n        <ListItem divider>\n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n          <Button >\n            <NavLink to=\"/AppConfigItemEdit/\" >Add New</NavLink> \n          </Button>\n          <Button onClick={ () => { AppConfigStore.getList(); }}>Refresh</Button>          \n        </ButtonGroup>\n        </ListItem>\n        \n        <ListItem divider>\n          <div className={\"tabcontainers1\"}>\n            <div className={\"tabcontainers2\"} >     \n              {TableColumns.length>0     &&   \n              <MaterialTable                    \n                title=\"Application Configration\"\n                data={AppConfigStore.itemList}\n                columns={TableColumns as any}\n                options={{ sorting:true, search: true, paging: true, filtering: true, exportButton: true, pageSize:100,  tableLayout: \"auto\"}}            \n              />\n            }\n            </div>\n          </div>\n        </ListItem>\n      </List>             \n    );\n};\n\nexport default observer(AppConfigList);\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfig\\AppConfigStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfig\\AppConfig.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppConfig\\AppConfigEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAction\\AppActionEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAction\\AppActionList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAction\\AppAction.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAction\\AppActionStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppFlow\\AppFlowEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppFlow\\AppFlowList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppFlow\\AppFlowStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppFlow\\AppFlow.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppApi\\AppApiList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppApi\\AppApiEdit.tsx",["668","669","670"],"import { Button, ButtonGroup, Container, LinearProgress, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField,  } from '@material-ui/core';\nimport { Form, Formik } from 'formik';\nimport * as Yup from 'yup';\nimport React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport moment from 'moment';\n\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\nimport { AppApiAction, AttachmentDetails, Customer, Attachment } from './AppApi';\nimport { AppStatusListContext } from '../AppStatusList/AppStatusListStore';\nimport { AppApiContext } from './AppApiStore';\n \ninterface DetailParms {\n  id: string;\n}\nconst AppApiEdit: React.FC = () => { \n\n  const FlowId = 1;\n  const { id } = useParams<DetailParms>();\n  const AppStatusListStore = useContext(AppStatusListContext);\n  const AppApiStore = useContext(AppApiContext);\n \n  let history = useHistory();\n  const [error, setError] = useState('');\n  const [actionId, setActionId] = useState(0);\n  const [item, setItem] = useState(new Customer());\n  const [loading, setLoading] = useState(true);\n  const [attachFileList, setFileList] =useState<Attachment[]>([]);\n  const [ActionComment, SetActionComment] = useState(\"\");\n  \n   \n  useEffect(() => {\n    //debugger;     \n    AppStatusListStore.getStatusList(1);\n\n\n    var IdVal =0;\n    if (id) { IdVal=Number(id); }\n    AppApiStore.getActions(FlowId,IdVal).then( (res) => { \n      //debugger;\n        if((res as any).errors){          \n          setError( error + \", \" + (res as any).errors.Error);         \n          return;\n        }\n    });\n\n    if(id){\n      setLoading(true);\n\n\n\n      \n      let act: AppApiAction = new AppApiAction()\n      act.ActionId = 10;  \n      act.ItemId = Number(id);\n      act.Parm1 = id;\n      //act.ReturnFlow = id ? 'update' : 'create';\n\n      let formData = new FormData();\n      formData.append('ActionId', '10' );\n      formData.append('ItemId',  id );\n      formData.append('Parm1',  id );\n\n      AppApiStore.ExecuteAction(formData).then( (res) => {      \n        //debugger;\n        if((res as any).errors){          \n          setError((res as any).errors.Error);         \n          return;\n        }\n        else{                 \n          setItem(res.Result1[0] as any);\n\n          res.Result1[0].InitAttachment?.forEach( x => {\n            attachFileList.push( new Attachment( {file:  new Blob(), Details : x as any } ))\n          });\n          \n          setFileList(attachFileList);\n        }  \n        setLoading(false);\n      });\n    }\n    else{\n      setItem(new Customer()); \n      setLoading(false);\n    }\n  }, [id, error, AppApiStore.ExecuteAction , AppApiStore.getActions, AppApiStore, AppStatusListStore, attachFileList]);\n\n\n  const onItemSubmit = (values: any) => {    \n    \n    \n    // let colMap = new Map([\n    //   [\"Id\", \"Id\"], \n    //   [\"CustomerName\", \"Txt1\"], \n    //   [\"CIF\", \"Num1\"]\n    // ]);  \n\n    // interface LooseObject {\n    //   [key: string]: any\n    // }\n    // var dataParm: LooseObject = {};    \n    // Object.keys(values).forEach(function(key,index) {          \n    //   if( colMap.get(key) && values[key] ){        \n    //     dataParm[ colMap.get(key) as string ] =  values[key] ;\n    //   }      \n    // });\n\n    debugger;\n    let act: AppApiAction = new AppApiAction()\n    act.ActionId = actionId;\n\n    values.InitAttachment = [];\n\n    let formData = new FormData();\n    attachFileList.forEach( f => {\n      values.InitAttachment.push(f.Details);\n      formData.append('FileList', f.file, f.Details.FileName);\n    });\n   \n    // if(files){\n    //   for(var i=0;i<files.length;i++){\n\n    //     //var f =  file[i] as any;        \n    //     formData.append('FileList', files[i]);\n        \n    //     //values.InitAttachment.push(new Attachment( { Action : 'Create', FileArrayId: i, Id : -1, FileName :  f.name,  Prop1 : 'Desc 1'  }) );\n    //   }      \n    // }\n    // values.InitAttachment = fileDetails;\n\n    formData.append('ActionId', actionId.toString() )\n    formData.append('Parm1', JSON.stringify(values) );\n    formData.append('ItemId',  values.Id );\n\n    formData.append('Parm2',  ActionComment );\n\n    act.Parm1 = JSON.stringify(values );\n    act.ItemId = values.Id; \n//return;\n\n    AppApiStore.ExecuteAction(formData).then( (res) => {      \n      //debugger;\n\n      if((res as any).errors){\n        setError((res as any).errors.Error);\n        setLoading(false);\n        return;\n      }\n      else{\n        history.push('/AppApilist');\n      }\n    });\n  };\n\n  \n  const prop1Change = (e:any, i:number) => { \n    let files = [...attachFileList];\n    files[i].Details.Prop1 = e.target.value;\n    setFileList(files);\n\n  }\n\n  const onFileChange = (event:any) => { \n    //debugger;\n    \n    for(var i=0;i<event.target.files.length;i++){\n\n      var f =  event.target.files[i] as any;    \n      var filename = attachFileList.length.toString() + \"-\" + f.name;\n      var attch = new Attachment( { \n          file : f, \n          Details : new  AttachmentDetails({  Action : 'Create', FileArrayId: i, Id : -1, FileName : filename,  Prop1 : 'Desc 1'  }) \n        });\n      \n      setFileList(currentArray => [...currentArray, attch]);\n      event.target.value = null;                        \n    }\n    //setFileList(attachFileList);\n\n  }\n\n  const download = (id:number, fileName:string) => { \n    let act: AppApiAction = new AppApiAction()\n    act.ActionId = 15;  \n    act.ItemId = Number(id);\n    act.Parm1 = id.toString();\n\n    AppApiStore.FileDownload(act).then( (fileSteam) => { \n      debugger;\n      const downloadUrl = window.URL.createObjectURL(new Blob([fileSteam]));\n      const link = document.createElement('a');\n      link.href = downloadUrl;\n      link.setAttribute('download', fileName); //any other extension\n      document.body.appendChild(link);\n      link.click();\n      link.remove();\n\n      debugger;\n    });\n   \n  }\n\n\n  if(loading){\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \n  }\n  \n  return (\n    \n    <Container component=\"main\" maxWidth=\"lg\">        \n      {error && <div  style={{ color:'red' , fontWeight:'bold', padding:5 , border: '1px solid green', margin:10 }} >{error}</div>}     \n    \n      {/* <a href=\"#\" onClick={ () => { download(65, \"\")} } >Test download</a>  */}\n\n      <Formik\n          initialValues={item}\n\n          validationSchema={Yup.object({\n            CustomerName: Yup.string().required('Title required'),                     \n          })}\n          onSubmit={onItemSubmit}\n        >\n          <Form > \n            Status : { AppStatusListStore.itemList.find( s => s.Id === item.StatusId )?.Title }\n            <MyCustomTxt   \n              name=\"CustomerName\"                         \n              type=\"text\"                \n              autoFocus={true}\n              required={true}                                \n              label=\"CustomerName\"                                                                     \n            />\n              \n            <MyCustomTxt   \n              name=\"CIF\"                         \n              type=\"number\"                \n              required={true}                                \n              label=\"CIF\"                                                                     \n            />\n            {item.StatusId === 4 && \n            <MyCustomTxt   \n              name=\"ApprovalComment\"                         \n              type=\"text\"                \n              required={item.StatusId === 4 ? true : false}                                \n              label=\"Approval Comment\"                                                                     \n            />\n            }\n            {item.StatusId !== 4 && \n              <div>Approval Comment : {item.ApprovalComment} </div>\n            }\n\n            ActionComment: {ActionComment}\n            \n             <TextField \n              id=\"ActionComment\"\n              value={ActionComment} \n              placeholder=\"ActionComment\"            \n              type=\"text\"                                     \n              variant=\"outlined\"\n              margin=\"normal\"                                        \n              fullWidth   \n              label=\"Action Comment\"  \n              multiline={false}\n              onChange={ (event) => { \n                debugger;\n                SetActionComment(event.target.value);\n              } }  \n             />\n\n            \n\n  <TableContainer component={Paper}>\n    <Table aria-label=\"simple table\">\n      <TableHead>\n        <TableRow>       \n          <TableCell align=\"left\">File Name</TableCell>\n          <TableCell align=\"left\">Comment</TableCell>     \n          <TableCell align=\"left\"></TableCell>   \n        </TableRow>      \n      </TableHead>\n      <TableBody>\n      { attachFileList && attachFileList.map( (rr, index) => (\n          <TableRow>       \n            <TableCell align=\"left\"> <a href=\"#\" onClick={ () => { download(rr.Details.Id,  rr.Details.FileName)} } >{rr.Details.FileName}</a> </TableCell>\n            <TableCell align=\"left\">\n              <input type=\"text\" value={rr.Details.Prop1}  onChange={ (e) => { prop1Change(e,index) } } /> \n            </TableCell>     \n            <TableCell align=\"left\"><a href=\"#\">Delete</a></TableCell>      \n          </TableRow>\n          ))\n      } \n      <TableRow>             \n        <TableCell align=\"left\" colSpan={3}><input type=\"file\" multiple={false} onChange={onFileChange} /></TableCell>  \n      </TableRow>      \n      </TableBody>\n    </Table>\n  </TableContainer>\n\n        <TableContainer component={Paper}>\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>   \n              <TableCell align=\"left\">Date Time</TableCell>     \n                <TableCell align=\"left\">Action By</TableCell>\n                <TableCell align=\"left\">Action</TableCell>\n                <TableCell align=\"left\">From Status</TableCell>     \n                <TableCell align=\"left\">To Status</TableCell> \n                <TableCell align=\"left\">Comment</TableCell>\n              </TableRow>      \n            </TableHead>\n            <TableBody>\n            { item.AppHistory.map( (hist, index) => (\n                <TableRow> \n                  <TableCell align=\"left\"> {  moment(hist.DateTime).format(\"DD-MMM-YYYY\")  }</TableCell>\n                  <TableCell align=\"left\">{hist.ActionBy}</TableCell>\n                  <TableCell align=\"left\">{hist.Action}</TableCell>\n                  <TableCell align=\"left\">{ AppStatusListStore.AppStatusList.find( s => s.Id === hist.FromStage )?.Title } {hist.FromStage}</TableCell>     \n                  <TableCell align=\"left\">{ AppStatusListStore.AppStatusList.find( s => s.Id === hist.ToStage )?.Title } {hist.ToStage}</TableCell> \n                  <TableCell align=\"left\">{hist.Comment}</TableCell>      \n                </TableRow>\n                ))\n            }      \n            </TableBody>\n          </Table>\n        </TableContainer>\n\n  \n\n\n\n            {/* <table >\n              <tr>\n                <td>File Name</td>\n                <td>Prop1</td>\n                <td></td>\n              </tr>\n              { attachFileList \n              &&  attachFileList.map( (rr, index) => ( \n              \n              <tr key={index}>\n                <td>\n                  <a href=\"#\" onClick={ () => { download(rr.Details.Id,  rr.Details.FileName)} } >{rr.Details.FileName}</a> \n                </td>\n                <td>\n                  <input type=\"text\" value={rr.Details.Prop1}  onChange={ (e) => { \n                    debugger;  \n                    prop1Change(e,index)\n                    } } />                  \n                </td>\n                <td> <a href=\"#\">Delete</a></td>\n              </tr>\n\n            ) ) }\n            \n            <tr>\n              <td colSpan={3}>\n                <input type=\"file\" multiple={false} onChange={onFileChange} />\n              </td>\n            </tr>\n\n            </table> */}\n\n            {/* <input type=\"file\" multiple={true} onChange={onFileChange} />\n\n            <input type=\"file\" multiple={true} onChange={onFileChange} /> */}\n                           \n              <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n\n                { AppApiStore.actionList.map( (row) => (\n                  \n                  <Button\n                    type=\"submit\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"\n                    key={row.Id}\n                    onClick={ () => { setActionId( row.Id); }}\n                  >\n                    {row.Action}\n                  </Button> \n                ))}\n                \n                {/* { item.Id && \n                  <Button\n                    type=\"button\"\n                    fullWidth\n                    variant=\"contained\"\n                    color=\"primary\"                    \n                    onClick={ () => {\n\n                      let act: AppApiAction = new AppApiAction()\n                      act.ActionId = 11;\n                      act.Parm1 = item.Id.toString();\n                      AppApiStore.ExecuteAction(act).then( (res) => {      \n                        history.push('/AppApilist');    \n                      });                      \n                    }}\n                  >\n                    Delete\n                  </Button> \n                } */}\n                <Button onClick={ () => { history.push('/AppApilist');  }}>Back</Button>          \n              </ButtonGroup>\n\n          </Form>\n        </Formik>\n\n        \n       \n    </Container>\n  );\n};\n\nexport default observer(AppApiEdit);\n\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppApi\\AppApi.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppApi\\AppApiStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\MyDropDown.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\MyCheckBox.tsx",["671"],"\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {  \r\n  useField,\r\n  FieldAttributes,  \r\n} from \"formik\";\r\n\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nimport { Checkbox, FormControlLabel } from \"@material-ui/core\";\r\n\r\n\r\ntype CustomProps = { checked?: boolean, label?: string, width?: string  } & FieldAttributes<{}>;\r\n\r\nconst MyCheckBox : React.FC<CustomProps> = ({ checked, label, placeholder, type,required,autoComplete, autoFocus,  width, ...props }) => {\r\n    \r\n    const [field] = useField<{}>(props);\r\n    const [val, setVal] = useState(false);\r\n\r\n    useEffect(() => {\r\n      setVal(field.value as boolean);      \r\n    },[setVal]);\r\n       \r\n    return (                  \r\n        <FormControl variant=\"outlined\" fullWidth style={{ marginTop : 10 , marginBottom : 10, width:width,  display: 'block'}} >\r\n           <FormControlLabel  \r\n                control={<Checkbox {...field}  checked={val} onClick={ () => { setVal(!val);} }  />}\r\n                label={label}              \r\n          />\r\n        </FormControl>              \r\n    );\r\n  };\r\n\r\nexport default MyCheckBox;\r\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAttachment\\AppAttachmentList.tsx",["672"],"import React, { useContext, useEffect } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { observer } from 'mobx-react-lite';\nimport { AppAttachmentContext } from './AppAttachmentStore';\nimport { Button, ButtonGroup, LinearProgress, List, ListItem, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow } from '@material-ui/core';\nimport DeleteOutlinedIcon from '@material-ui/icons/DeleteOutlined';\nconst AppAttachmentList: React.FC = () => {\n\n  const AppAttachmentStore = useContext(AppAttachmentContext);     \n  \n  \n\n  const download = (id: number, fileName : string) => { \n    \n    AppAttachmentStore.download(id,fileName);        \n  };\n\n    useEffect(() => {       \n      AppAttachmentStore.getList();                  \n    }, [AppAttachmentStore, AppAttachmentStore.getList])       \n\n    if(AppAttachmentStore.loading){\n      return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \n    }\n\n    return (\n      <List>\n        <ListItem divider>\n        <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\n          <Button >\n            <NavLink to=\"/AppAttachmentItemEdit/\" >Add New</NavLink> \n          </Button>\n          <Button onClick={ () => { AppAttachmentStore.getList(); }}>Refresh</Button>          \n        </ButtonGroup>\n        </ListItem>\n        \n        <ListItem divider>\n          <TableContainer component={Paper}>\n            <Table aria-label=\"simple table\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>ID</TableCell>\n                  <TableCell align=\"right\">FileName</TableCell>\n                  <TableCell align=\"right\">Delete</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {AppAttachmentStore.itemList.map((row) => (\n                  <TableRow key={row.Id} >\n                    <TableCell component=\"th\" scope=\"row\"  >\n                      <NavLink to={\"/AppAttachmentItemEdit/\" + row.Id } >{row.Id}</NavLink> \n                    </TableCell>\n                                             \n                    <TableCell align=\"right\" >\n                      <a href=\"#\" onClick={ () => { download(row.Id, row.FileName)} } >{row.FileName}</a> \n                    </TableCell>  \n                    <TableCell align=\"right\" >\n                      <DeleteOutlinedIcon onClick={ () => { AppAttachmentStore.deleteItem(row.Id).then( () => {   AppAttachmentStore.getList(); })}}  />\n                    </TableCell>            \n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </ListItem>\n\n      </List>        \n     \n    );\n};\n\nexport default observer(AppAttachmentList);\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAttachment\\AppAttachmentEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAttachment\\AppAttachmentStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppAttachment\\AppAttachment.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\nav\\listItems.tsx",["673"],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNavigation\\AppNavigationList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNavigation\\AppNavigationEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNavigation\\AppNavigationStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNavigation\\AppNavigation.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\nav\\AppLeftNavBar.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNotificationsMaster\\AppNotificationsMasterEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNotificationsMaster\\AppNotificationsMasterList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNotificationsMaster\\AppNotificationsMaster.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNotificationsMaster\\AppNotificationsMasterStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNitificationTemplate\\AppNitificationTemplateList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNitificationTemplate\\AppNitificationTemplateEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNitificationTemplate\\AppNitificationTemplateStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNitificationTemplate\\AppNitificationTemplate.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AdminPage\\AdminPage.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\nav\\Notifications.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\nav\\CurrentUser.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNotifications\\AppNotificationsList.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNotifications\\AppNotificationsStore.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNotifications\\AppNotifications.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppNotifications\\AppNotificationsEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\user\\UserProfile.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\common\\ErrorPage.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\Theme.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\TableButton.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\TableDetails.tsx",["674","675"],"import { Button, Grid, Typography } from \"@material-ui/core\";\r\nimport React, { useContext, useEffect, useState } from \"react\";\r\nimport {  useHistory } from \"react-router-dom\";\r\nimport { AppTheme } from \"../../app/common/Theme\";\r\nimport { AppFlowContext } from \"../AppFlow/AppFlowStore\";\r\nimport { AppTableMasterContext } from './AppTableMasterStore';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\ninterface Parms {\r\n    tableId : number;  \r\n    showTitle? : boolean;\r\n    flowId?: string;\r\n\r\n  }\r\n\r\nconst TableDetails: React.FC<Parms> = ({ tableId, showTitle = true, flowId }) => {\r\n\r\n   const AppTableMasterStore = useContext(AppTableMasterContext);\r\n   const AppFlowStore = useContext(AppFlowContext);\r\n   const [error, setError] = useState('');\r\n\r\n   \r\n   let history = useHistory();\r\n\r\n   useEffect(() => {\r\n    \r\n      if(showTitle){\r\n         AppTableMasterStore.loadItem(tableId).then( (res:any) => {\r\n            AppFlowStore.getFlowList( res.Id );            \r\n         } );\r\n      }              \r\n   },[ tableId, showTitle, flowId, AppTableMasterStore, AppTableMasterStore.loadItem, AppFlowStore, AppFlowStore.getFlowList]);\r\n   \r\n\r\n   const navigateToPath = (path:string) => {        \r\n        history.push(path);        \r\n   };\r\n\r\n   const  buttonStyle = {\r\n      marginRight:'5px', marginLeft:'5px'\r\n   };\r\n\r\n    return (\r\n        <Grid container spacing={1} style={{width:'1000px'}}>\r\n                       \r\n            {showTitle &&\r\n               <React.Fragment>\r\n                  \r\n                  <Typography variant=\"h6\" gutterBottom style={{paddingLeft:15, paddingRight:30,color: AppTheme.TableTitleColor }} >\r\n                     <span>{AppTableMasterStore.item.Title}</span> \r\n                  </Typography>\r\n                  <Button style={buttonStyle} onClick={ () => navigateToPath(`/AppTableMasterList`)}\r\n                   variant=\"text\" size=\"small\" color= \"primary\" >Table List</Button>\r\n               </React.Fragment>\r\n            }\r\n            <Button style={buttonStyle}\r\n              onClick={ () => navigateToPath(`/TableColumns/${tableId}`)} variant=\"contained\" size=\"small\" \r\n               color= {  history.location.pathname.includes('/TableColumns/') ? \"secondary\" : \"primary\" }\r\n               >Columns</Button>\r\n\r\n            <Button style={buttonStyle} onClick={ () => navigateToPath(`/TableStatusList/${tableId}`)} variant=\"contained\" size=\"small\" \r\n                color= {  history.location.pathname.includes('/TableStatusList/') ? \"secondary\" : \"primary\" }\r\n                >Status List</Button>\r\n\r\n            <Button style={buttonStyle} onClick={ () => navigateToPath(`/TableFlowList/${tableId}`)} variant=\"contained\" size=\"small\" \r\n                color= {  history.location.pathname.includes('/TableFlowList/') ? \"secondary\" : \"primary\" }\r\n                >Flow List</Button>\r\n\r\n            {showTitle && AppFlowStore.tableFlows.map( (row) => (\r\n               <Button key={row.Id} style={buttonStyle} onClick={ () => navigateToPath(`/TableActions/${tableId}/${row.Id}`)} variant=\"contained\" size=\"small\" \r\n                  color= {  history.location.pathname.includes(`/TableActions/${tableId}/${row.Id}`) ? \"secondary\" : \"primary\" }\r\n               >{row.Title}</Button>\r\n\r\n            ))\r\n\r\n            }\r\n\r\n            \r\n        </Grid>\r\n\r\n        \r\n    );\r\n}\r\n\r\nexport default observer(TableDetails);\r\n","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\TableColumns.tsx",["676","677"],"import { Dialog, DialogTitle, DialogContent, DialogContentText, Link } from '@material-ui/core';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport {  useParams } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { AppColumnMasterContext } from '../AppColumnMaster/AppColumnMasterStore';\r\nimport AppColumn from '../AppColumnMaster/AppColumn';\r\nimport { AppColumnMaster } from '../AppColumnMaster/AppColumnMaster';\r\nimport { ColumnDataType } from '../../app/common/SystemConstants';\r\nimport TableDetails from './TableDetails';\r\nimport MaterialTable from 'material-table';\r\nimport TableButton from '../../app/common/form/TableButton';\r\nimport MessageDialog from '../../app/common/common/MessageDialog';\r\nimport moment from 'moment';\r\n\r\ninterface DetailParms {\r\n    id: string;\r\n  }\r\n\r\n  const TableColumns: React.FC = () => {\r\n\r\n    const { id } = useParams<DetailParms>();\r\n    const AppColumnMasterStore = useContext(AppColumnMasterContext);\r\n    const [open, setOpen] = useState(false);\r\n    const [selectedColumn, setSelectedColumn] = useState(new AppColumnMaster());\r\n    const [error, setError] = useState('');\r\n   \r\n    const [dialogMessage, setDialogMessage] = useState('');\r\n    const [timeStamp, setTimeStamp] = useState('');\r\n    const showDialogBox = (message: string) => {  \r\n        setDialogMessage(message);\r\n        setTimeStamp(moment().toString());\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n        AppColumnMasterStore.getColumnList(Number(id));\r\n\r\n    }, [id, AppColumnMasterStore, AppColumnMasterStore.getColumnList]);\r\n\r\n    const TableColumns = [\r\n        {\r\n          title: \"Order\",\r\n          field: \"Order\",          \r\n          defaultSort: \"asc\",\r\n          //render :  (values: any) => { return <Link onClick={ () => { openModel( values ) } } >{values.Title}</Link> } \r\n        }, \r\n        {\r\n          title: \"Title\",\r\n          field: \"Title\",          \r\n          //defaultSort: \"asc\",\r\n          render :  (values: any) => { return <Link onClick={ () => { openModel( values ) } } >{values.Title}</Link> } \r\n        },  \r\n        {\r\n          title: \"Type\",\r\n          field: \"Type\", \r\n          render : (values: any) => { return ColumnDataType.find( u => u.Id === values.Type )?.value  },                          \r\n        },  \r\n        {\r\n            title: \"AppDataFiled\",\r\n            field: \"AppDataFiled\",                     \r\n        },          \r\n      ];\r\n\r\n    const TableActions = [\r\n    {          \r\n        icon: (values: any) => { return <TableButton  label=\"Add New\"  /> },\r\n        tooltip: 'Add New',\r\n        isFreeAction: true,\r\n        onClick: (event:any) =>{ openModel( new AppColumnMaster() ) },   \r\n        iconProps: { style: { fontSize: \"34px\", color: \"green\", borderRadius:\"0%  !important\" , backgroundColor:'rosybrown' } },            \r\n    },\r\n    {          \r\n        icon: (values: any) => { return <TableButton label=\"Refresh\"  /> },\r\n        tooltip: 'Refresh',\r\n        isFreeAction: true,\r\n        onClick: (event:any) =>{ AppColumnMasterStore.getColumnList(Number(id));},   \r\n        iconProps: { style: { fontSize: \"34px\", color: \"green\", borderRadius:\"0%  !important\" , backgroundColor:'rosybrown' } },            \r\n        }\r\n    ];  \r\n\r\n    const openModel = (col: AppColumnMaster) => {  \r\n        if(!col.TableID){\r\n            col.TableID = Number(id);\r\n        }\r\n        setSelectedColumn(col);\r\n        setOpen(true);\r\n    };\r\n\r\n    const RefreshColumns = (col: AppColumnMaster) => {      \r\n        AppColumnMasterStore.getColumnList(Number(id));\r\n        setOpen(false);\r\n    };\r\n\r\n    return(\r\n    <React.Fragment>\r\n        <TableDetails tableId={Number(id)}  />\r\n\r\n        <MaterialTable                    \r\n              title=\"Fields\"\r\n              data={AppColumnMasterStore.columnList as any}\r\n              columns={TableColumns as any}\r\n              actions={TableActions}\r\n              options={{ sorting:true, search: true, paging: true, filtering: true, exportButton: true, pageSize:10,  tableLayout: \"auto\"}}\r\n              editable={{\r\n                onRowDelete: oldData =>\r\n                new Promise((resolve, reject) => {                  \r\n                  setTimeout(() => {\r\n                      debugger;\r\n                      var itemId = Number((oldData as any).Id);\r\n                      AppColumnMasterStore.deleteItem(itemId).then((val) =>{  \r\n                        debugger;\r\n\r\n                        if((val as any).errors){                         \r\n                          showDialogBox((val as any).errors.Error);                                                \r\n                          resolve(true);                                                \r\n                        }   \r\n                        else if((val as any).name === 'Error') {                             \r\n                            showDialogBox( (val as any).message );\r\n                                \r\n                            resolve(true); \r\n                          }                                               \r\n                        AppColumnMasterStore.getColumnList(Number(id)).then( () => {resolve(true);});                                          \r\n                                                    \r\n                      })                  \r\n                    resolve(true);\r\n                  }, 10)\r\n                }),\r\n              }}\r\n        />\r\n\r\n        <Dialog onClose={() => {}} aria-labelledby=\"simple-dialog-title\" open={open}>\r\n            <DialogTitle id=\"simple-dialog-title\">Column</DialogTitle>\r\n            <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n                <AppColumn initVal={selectedColumn} parentRefresh={RefreshColumns} />\r\n            </DialogContentText>\r\n            </DialogContent>           \r\n        </Dialog>  \r\n\r\n    <MessageDialog message={dialogMessage} timeStamp={timeStamp} />\r\n\r\n    </React.Fragment>)\r\n}\r\n\r\nexport default observer(TableColumns);","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\common\\MessageDialog.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\TableStatusList.tsx",["678","679"],"import { Dialog, DialogTitle, DialogContent, DialogContentText } from '@material-ui/core';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport AppColumn from '../AppColumnMaster/AppColumn';\r\nimport { AppColumnMaster } from '../AppColumnMaster/AppColumnMaster';\r\nimport TableDetails from './TableDetails';\r\nimport MaterialTable from 'material-table';\r\nimport MessageDialog from '../../app/common/common/MessageDialog';\r\nimport moment from 'moment';\r\nimport { AppStatusListContext } from '../AppStatusList/AppStatusListStore';\r\nimport { AppStatusList } from '../AppStatusList/AppStatusList';\r\n\r\ninterface DetailParms {\r\n    id: string;\r\n  }\r\n\r\n  const TableStatusList: React.FC = () => {\r\n\r\n    const { id } = useParams<DetailParms>();\r\n    const AppStatusListStore = useContext(AppStatusListContext);\r\n\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [selectedColumn] = useState(new AppColumnMaster());\r\n   \r\n    const [dialogMessage, setDialogMessage] = useState('');\r\n    const [timeStamp, setTimeStamp] = useState('');\r\n    const [error, setError] = useState('');\r\n    \r\n    const showDialogBox = (message: string) => {  \r\n        setDialogMessage(message);\r\n        setTimeStamp(moment().toString());\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n      AppStatusListStore.getStatusList(Number(id));\r\n    }, [id,AppStatusListStore, AppStatusListStore.getStatusList]);\r\n\r\n        \r\n    const TableColumns = [        \r\n        {title: \"Id\", field: \"Id\", type: 'numeric', editable: 'never'},\r\n        {title: \"Order\", field: \"Order\", type: 'numeric', defaultSort: \"asc\",},\r\n        { title: \"Title\", field: \"Title\"},                  \r\n      ];\r\n   \r\n   \r\n    const RefreshColumns = (col: AppColumnMaster) => {      \r\n      AppStatusListStore.getStatusList(Number(id));\r\n        setOpen(false);\r\n    };\r\n\r\n    return(\r\n    <React.Fragment>\r\n        <TableDetails tableId={Number(id)}  />\r\n\r\n        <MaterialTable                    \r\n              title=\"Status List\"\r\n              data={AppStatusListStore.AppStatusList as any}\r\n              columns={TableColumns as any}\r\n              //actions={TableActions}\r\n              options={{ sorting:true, search: true, paging: true, filtering: true, exportButton: true, pageSize:10,  tableLayout: \"auto\"}}\r\n\r\n\r\n              editable={{\r\n\r\n                onRowAdd: newData => new Promise(resolve => { \r\n\r\n                  var tab = new AppStatusList();\r\n                  tab.Title = (newData as any).Title;\r\n                  tab.Order = (newData as any).Order;\r\n                  tab.TableId = Number(id);\r\n                  AppStatusListStore.editItem(tab).then((val) =>{  \r\n                    AppStatusListStore.getStatusList(Number(id));                   \r\n                    resolve(true);                                \r\n                  })\r\n                }),\r\n\r\n                onRowUpdate: (newData, oldData) =>\r\n                new Promise((resolve, reject) => {\r\n                  debugger;\r\n                  var tab = new AppStatusList();\r\n                  tab.Title = (newData as any).Title;\r\n                  tab.Order = (newData as any).Order;\r\n                  tab.TableId = Number(id);\r\n                  tab.Id =  (newData as any).Id;\r\n                  AppStatusListStore.editItem(tab).then((val) =>{  \r\n                    AppStatusListStore.getStatusList(Number(id));                   \r\n                    resolve(true);                                \r\n                  })\r\n\r\n                  resolve(true); \r\n                  // setTimeout(() => {\r\n                  //   // const dataUpdate = [...data];\r\n                  //   // const index = oldData.tableData.id;\r\n                  //   // dataUpdate[index] = newData;\r\n                  //   // setData([...dataUpdate]);\r\n\r\n                  //   // resolve();\r\n                  // }, 1000)\r\n                }),\r\n\r\n\r\n                onRowDelete: oldData =>\r\n                new Promise((resolve, reject) => {                  \r\n                  setTimeout(() => {\r\n                      debugger;\r\n                      var itemId = Number((oldData as any).Id);\r\n                      AppStatusListStore.deleteItem(itemId).then((val) =>{  \r\n                        debugger;\r\n\r\n                        if((val as any).errors){                         \r\n                          showDialogBox((val as any).errors.Error);                                                \r\n                          resolve(true);                                                \r\n                        }   \r\n                        else if((val as any).name === 'Error') {                             \r\n                            showDialogBox( (val as any).message );\r\n                                \r\n                            resolve(true); \r\n                        }                                               \r\n                        AppStatusListStore.getStatusList(Number(id)).then( () => {resolve(true);});                                          \r\n                                                    \r\n                      })                  \r\n                    resolve(true);\r\n                  }, 10)\r\n                }),\r\n              }}\r\n        />\r\n\r\n        <Dialog onClose={() => {}} aria-labelledby=\"simple-dialog-title\" open={open}>\r\n            <DialogTitle id=\"simple-dialog-title\">Column</DialogTitle>\r\n            <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n                <AppColumn initVal={selectedColumn} parentRefresh={RefreshColumns} />\r\n            </DialogContentText>\r\n            </DialogContent>           \r\n        </Dialog>  \r\n\r\n    <MessageDialog message={dialogMessage} timeStamp={timeStamp} />\r\n\r\n    </React.Fragment>)\r\n}\r\n\r\nexport default observer(TableStatusList);","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\TableFlowList.tsx",["680","681"],"import { Dialog, DialogTitle, DialogContent, DialogContentText } from '@material-ui/core';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport AppColumn from '../AppColumnMaster/AppColumn';\r\nimport { AppColumnMaster } from '../AppColumnMaster/AppColumnMaster';\r\nimport TableDetails from './TableDetails';\r\nimport MaterialTable from 'material-table';\r\nimport MessageDialog from '../../app/common/common/MessageDialog';\r\nimport moment from 'moment';\r\nimport { AppStatusList } from '../AppStatusList/AppStatusList';\r\nimport { AppFlowContext } from '../AppFlow/AppFlowStore';\r\n\r\ninterface DetailParms {\r\n    id: string;\r\n  }\r\n\r\n  const TableFlowList: React.FC = () => {\r\n\r\n    const { id } = useParams<DetailParms>();\r\n    const AppFlowStore = useContext(AppFlowContext);\r\n\r\n    const [open, setOpen] = useState(false);\r\n    const [selectedColumn] = useState(new AppColumnMaster());\r\n   \r\n    const [dialogMessage, setDialogMessage] = useState('');\r\n    const [timeStamp, setTimeStamp] = useState('');\r\n    const [error, setError] = useState('');\r\n    \r\n    const showDialogBox = (message: string) => {  \r\n        setDialogMessage(message);\r\n        setTimeStamp(moment().toString());\r\n    };\r\n\r\n\r\n    useEffect(() => {\r\n      AppFlowStore.getFlowList(Number(id));\r\n    }, [id,AppFlowStore, AppFlowStore.getFlowList]);\r\n\r\n    const TableColumns = [   \r\n        { title: \"Id\", field: \"Id\"},                \r\n        { title: \"Title\", field: \"Title\"},                        \r\n      ];\r\n   \r\n \r\n    const RefreshColumns = (col: AppColumnMaster) => {      \r\n      AppFlowStore.getFlowList(Number(id));\r\n        setOpen(false);\r\n    };\r\n\r\n    return(\r\n    <React.Fragment>\r\n        <TableDetails tableId={Number(id)}  />\r\n\r\n        <MaterialTable                    \r\n              title=\"Status List\"\r\n              data={AppFlowStore.tableFlows as any}\r\n              columns={TableColumns as any}\r\n              //actions={TableActions}\r\n              options={{ sorting:true, search: true, paging: true, filtering: true, exportButton: true, pageSize:10,  tableLayout: \"auto\"}}\r\n\r\n\r\n              editable={{\r\n\r\n                onRowAdd: newData => new Promise(resolve => { \r\n\r\n                  var tab = new AppStatusList();\r\n                  tab.Title = (newData as any).Title;\r\n                  tab.Order = (newData as any).Order;\r\n                  tab.TableId = Number(id);\r\n                  AppFlowStore.editItem(tab).then((val) =>{  \r\n                    AppFlowStore.getFlowList(Number(id));                   \r\n                    resolve(true);                                \r\n                  })\r\n                }),\r\n\r\n                onRowUpdate: (newData, oldData) =>\r\n                new Promise((resolve, reject) => {\r\n                  debugger;\r\n                  var tab = new AppStatusList();\r\n                  tab.Title = (newData as any).Title;\r\n                  tab.Order = (newData as any).Order;\r\n                  tab.TableId = Number(id);\r\n                  tab.Id =  (newData as any).Id;\r\n                  AppFlowStore.editItem(tab).then((val) =>{  \r\n                    AppFlowStore.getFlowList(Number(id));                   \r\n                    resolve(true);                                \r\n                  })\r\n                  resolve(true);           \r\n                }),\r\n\r\n\r\n                onRowDelete: oldData =>\r\n                new Promise((resolve, reject) => {                  \r\n                  setTimeout(() => {\r\n                      debugger;\r\n                      var itemId = Number((oldData as any).Id);\r\n                      AppFlowStore.deleteItem(itemId).then((val) =>{  \r\n                        debugger;\r\n\r\n                        if((val as any).errors){                         \r\n                          showDialogBox((val as any).errors.Error);                                                \r\n                          resolve(true);                                                \r\n                        }   \r\n                        else if((val as any).name === 'Error') {                             \r\n                            showDialogBox( (val as any).message );                                \r\n                            resolve(true); \r\n                        }                                               \r\n                        AppFlowStore.getFlowList(Number(id)).then( () => {resolve(true);});                                          \r\n                                                    \r\n                      })                  \r\n                    resolve(true);\r\n                  }, 10)\r\n                }),\r\n              }}\r\n        />\r\n\r\n        <Dialog onClose={() => {}} aria-labelledby=\"simple-dialog-title\" open={open}>\r\n            <DialogTitle id=\"simple-dialog-title\">Column</DialogTitle>\r\n            <DialogContent>\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n                <AppColumn initVal={selectedColumn} parentRefresh={RefreshColumns} />\r\n            </DialogContentText>\r\n            </DialogContent>           \r\n        </Dialog>  \r\n\r\n    <MessageDialog message={dialogMessage} timeStamp={timeStamp} />\r\n\r\n    </React.Fragment>)\r\n}\r\n\r\nexport default observer(TableFlowList);","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\TableActions.tsx",["682","683"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { NavLink, useParams } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport TableDetails from './TableDetails';\r\nimport MaterialTable from 'material-table';\r\nimport { AppActionContext } from '../AppAction/AppActionStore';\r\nimport { AppAction, IAppAction } from '../AppAction/AppAction';\r\nimport { AppStatusListContext } from '../AppStatusList/AppStatusListStore';\r\nimport { AppFlowContext } from '../AppFlow/AppFlowStore';\r\nimport TableButton from '../../app/common/form/TableButton';\r\n\r\ninterface DetailParms {\r\n    tableId: string;\r\n    id: string;   \r\n  }\r\n\r\nconst TableActions: React.FC = () => {\r\n\r\n    const { tableId, id } = useParams<DetailParms>();\r\n    \r\n    const AppActionStore = useContext(AppActionContext);       \r\n    const AppStatusListStore = useContext(AppStatusListContext);\r\n    const AppFlowStore = useContext(AppFlowContext);\r\n    const [error, setError] = useState('');\r\n\r\n    useEffect(() => {     \r\n        debugger;        \r\n        AppFlowStore.loadItem(Number(id));\r\n        AppActionStore.flowActions(Number(id));\r\n        AppStatusListStore.getStatusList(Number(tableId));            \r\n      }, [id, tableId, AppActionStore, AppActionStore.flowActions,AppStatusListStore, AppStatusListStore.getStatusList, AppFlowStore])\r\n\r\n    const ShowDesc = (text: string) => {        \r\n        var res = \"\";\r\n        if(text){\r\n        var parser = new DOMParser();\r\n        var xmlDoc = parser.parseFromString(text,\"text/xml\");\r\n        res = xmlDoc.getElementsByTagName(\"Desc\")[0].innerHTML;\r\n        }\r\n        return res;\r\n    };\r\n\r\n    const TableColumns = [\r\n        { title: \"Id\", field: \"Id\", editable: 'never', },\r\n        { title: \"FlowId\", field: \"FlowId\", hidden: true },\r\n        { title: \"TableId\", field: \"TableId\", hidden: true },\r\n        {\r\n          title: \"Order\",\r\n          field: \"Order\", \r\n          type: 'numeric',\r\n          defaultSort: \"asc\",      \r\n         // width: \"5%\"\r\n        },\r\n        {\r\n          title: \"Action\", field: \"Action\",          \r\n          //editable: \"never\",  \r\n          render : (values: any) => { return <NavLink to={ `/TableActionItemEdit/${tableId}/${values.FlowId}/${values.Id}` } >{values.Action}</NavLink> },\r\n          //render : (values: IAppAction) => { return <NavLink to={\"/AppNavigationItemEdit/\" + values.Id } >{values.Title}</NavLink> }\r\n          //lookup: { \"Resubmit\": 'Resubmit', \"Approve\": 'Approve', \"New Request\" : \"New Request\", \"Reject\" : \"Reject\"},\r\n          //width: \"10%\",\r\n          editable: 'never',   \r\n          \r\n        },\r\n        {\r\n          title: \"From Status\", field: \"FromStatus\",       \r\n          render : (values: IAppAction) => { return values.FromStatusList.map( (fs, i, arr) =>(<span key={fs.Id} >{fs.Title}{i !== (arr.length-1) ? ',' : ''} </span>) )  },\r\n          //width: \"10%\"\r\n          editable: 'never',  \r\n        },  \r\n        {\r\n          title: \"To Status\", field: \"FromStatus\",       \r\n          render : (values: IAppAction) => { return  AppStatusListStore.AppStatusList.find( u => u.Id === values.ToStatusId )?.Title },\r\n          //width: \"10%\",\r\n          editable: 'never',  \r\n        },     \r\n        {\r\n          title: \"ActionType\",  field: \"ActionType\",\r\n          //render : rend\r\n          //render : (values: IAppHistory) => { return AppStatusListStore.itemList.find( u => u.Id ==values.FromStage )?.Title },\r\n          //width: \"10%\",\r\n          editable: 'never',  \r\n        }, \r\n        // {\r\n        //   title: \"Flow\",\r\n        //   field: \"Flow\",  \r\n        //   render : (values: IAppAction) => { return AppFlowStore.itemList.find( u => u.Id === values.FlowId )?.Title }  \r\n        // },\r\n        // {\r\n        //   title: \"Table\",\r\n        //   field: \"Table\",  \r\n        //   render : (values: IAppAction) => { return AppTableMasterStore.itemList.find( u => u.Id === values.TableId )?.Title  }  \r\n        // },\r\n        {\r\n          title: \"WhenXml\",\r\n          field: \"WhenXml\",  \r\n          render : (values: IAppAction) => { return ShowDesc(values.WhenXml)  } ,\r\n          //width: \"20%\",\r\n          editable: 'never',  \r\n        },\r\n        {\r\n          title: \"ActionXml\",\r\n          field: \"ActionXml\",  \r\n          render : (values: IAppAction) => { return ShowDesc(values.ActionXml)  } ,\r\n          //width: \"35%\",\r\n          editable: 'never',  \r\n        },\r\n        // {\r\n        //   title: \"Delete\",\r\n        //   field: \"Delete\",  \r\n        //   render : (values: IAppAction) => { return <DeleteOutlinedIcon onClick={ () => { AppActionStore.deleteItem(values.Id).then( () => {   AppActionStore.getList(); })}}  />  }  \r\n        // },\r\n      ];\r\n\r\n    const TableActions = [\r\n        {          \r\n            icon: (values: any) => { return <TableButton  label=\"Add New\" path={`/TableActionItemEdit/${tableId}/${id}`}  /> },\r\n            tooltip: 'Add New',\r\n            isFreeAction: true,\r\n            //onClick: (event:any) =>{ history.push(`/TableActionItemEdit/${tableId}/${id}`) },   \r\n            iconProps: { style: { fontSize: \"34px\", color: \"green\", borderRadius:\"0%  !important\" , backgroundColor:'rosybrown' } },            \r\n        },\r\n        {          \r\n            icon: (values: any) => { return <TableButton label=\"Refresh\"  /> },\r\n            tooltip: 'Refresh',\r\n            isFreeAction: true,\r\n            onClick: (event:any) =>{AppActionStore.flowActions(Number(id));},   \r\n            iconProps: { style: { fontSize: \"34px\", color: \"green\", borderRadius:\"0%  !important\" , backgroundColor:'rosybrown' } },            \r\n          }\r\n        ];  \r\n    // if(AppActionStore.loading){\r\n    //     return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \r\n    // }\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <TableDetails tableId={Number(tableId)} flowId={id} showTitle={true} />\r\n            <div className={\"tabcontainers11\"}>\r\n            <div className={\"tabcontainers2\"} >        \r\n                <MaterialTable                       \r\n                    title={`Action List for ${AppFlowStore.item.Title}`}\r\n                    data={AppActionStore.flowList}\r\n                    columns={TableColumns as any}\r\n                    options={{ sorting:true, search: true, paging: true, filtering: true, exportButton: true, pageSize:10,  tableLayout: \"fixed\" }}    \r\n                    actions={TableActions as any}\r\n                    \r\n                    \r\n                    cellEditable={{\r\n                        onCellEditApproved: (newValue, oldValue, rowData, columnDef) => {\r\n                          debugger;       \r\n                          //let filedName : any =  \"Title\"; //columnDef.field == null ? columnDef.field as string : \"Title\" \r\n                          return new Promise((resolve, reject) => {\r\n                            \r\n                            (rowData as any)[(columnDef as any).title] = newValue;\r\n                            \r\n                            var action = new AppAction();\r\n                            action.Action =  rowData.Action;\r\n                            action.ActionType =  rowData.ActionType;\r\n                            action.ActionXml =  rowData.ActionXml;\r\n                            action.FlowId =  rowData.FlowId;\r\n                            action.FromStatusList =  rowData.FromStatusList;\r\n                            action.Id =  rowData.Id;\r\n                            action.InitStatus =  rowData.InitStatus ? true : false;\r\n                            action.Order =  rowData.Order;\r\n                            action.TableId =  rowData.TableId;\r\n                            action.ToStatusId =  rowData.ToStatusId;\r\n                            action.WhenXml =  rowData.WhenXml;\r\n  \r\n                            AppActionStore.editItem(action).then((val) =>{ \r\n                                if((val as any).errors){\r\n                                    alert((val as any).errors.Error);                         \r\n                                    reject();                                                                                                                               \r\n                                }    \r\n                                else{\r\n                                    resolve();\r\n                                }  \r\n                            });                                                        \r\n                            resolve();                                  \r\n                          });\r\n                        }\r\n                      }}\r\n\r\n                     \r\n                      \r\n                    />\r\n            </div>\r\n            </div>   \r\n\r\n            \r\n        </React.Fragment>\r\n\r\n        )\r\n}\r\n\r\nexport default observer(TableActions);","C:\\Shaiju\\wayooz\\client-app\\src\\features\\AppTableMaster\\TableActionItemEdit.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\Portal\\Navigation\\NavigationEdit.tsx",["684"],"import { Button, ButtonGroup, Chip, Container, LinearProgress, TextField } from '@material-ui/core';\r\nimport { Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\r\nimport { AppNavigation } from './Navigation';\r\nimport { ActionConfig, ApiContext,  AppStatusList, AppUserRoleMaster } from '../Api/Api'\r\nimport { Autocomplete } from '@material-ui/lab';\r\n\r\n \r\n\r\ninterface DetailParms {\r\n    id: string;\r\n}\r\n\r\nconst NavigationEdit: React.FC = () => { \r\n      \r\n    const { id } = useParams<DetailParms>();\r\n    let history = useHistory();\r\n\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(true);\r\n    const [item, setItem] = useState(new AppNavigation());\r\n    const [actionId, setActionId] = useState(0);\r\n    const [actions, setActions] = useState<AppStatusList[]>();\r\n    const [roleList, setRoleList] = useState<AppUserRoleMaster[]>();\r\n    const [roles, setRoles] = useState<AppUserRoleMaster[]>();\r\n    const ApiStore = useContext(ApiContext);\r\n\r\n    useEffect(() => {\r\n        var IdVal =0;\r\n        if (id) { IdVal=Number(id); }\r\n\r\n        setLoading(true);\r\n        ApiStore.updateActions(ActionConfig.NavigationFlowId, IdVal, setActions, setError);\r\n      \r\n        ApiStore.getRoleList().then( resRoles => {\r\n          setRoleList(resRoles);        \r\n          \r\n          if(id){            \r\n            ApiStore.LoadItem(ActionConfig.NavigationById,id, setError).then( res => {              \r\n              if(res){\r\n                setItem(res);\r\n                var roleArray = ApiStore.rolesFromArray(resRoles as any, res.UserAccessRoles as any);                    \r\n                setRoles(roleArray);                                            \r\n              }\r\n              setLoading(false);   \r\n            });              \r\n          }\r\n          else{ \r\n              setItem(new AppNavigation()); \r\n              setLoading(false);\r\n          }\r\n        });\r\n\r\n    },[id, ApiStore, ApiStore.updateActions, , ApiStore.getRoleList, ApiStore.LoadItem, setRoles, setItem, ApiStore.rolesFromArray ]);\r\n\r\n    const onItemSubmit = (values: any) => {\r\n        \r\n        values.UserAccessRoles = roles;\r\n        let formData = new FormData();\r\n        formData.append('ActionId', actionId.toString() ); \r\n        formData.append('Parm1', JSON.stringify(values) );\r\n        formData.append('ItemId',  values.Id );\r\n\r\n        ApiStore.ExecuteAction(formData, setError).then( (res) => {            \r\n            if(res){\r\n              history.push('/NavigationList');\r\n            }           \r\n        });\r\n    }\r\n\r\n  \r\n\r\n    if(loading){\r\n        return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \r\n    }\r\n\r\n    return (    \r\n        <Container component=\"main\" maxWidth=\"lg\">\r\n            {error && <div  style={{ color:'red' , fontWeight:'bold', padding:5 , border: '1px solid green', margin:10 }} >{error}</div>}\r\n\r\n            <Formik\r\n                initialValues={item}\r\n                validationSchema={Yup.object({\r\n                    Title: Yup.string().required('Title required'),                     \r\n                })}\r\n                onSubmit={onItemSubmit}>\r\n\r\n            <Form>\r\n                <MyCustomTxt name=\"Order\" label=\"Order\" type=\"Number\" autoFocus={true} required={true}  />\r\n                <MyCustomTxt name=\"Title\" label=\"Title\" type=\"text\" required={true}  />\r\n                <MyCustomTxt name=\"Path\" label=\"Path\" type=\"text\" required={true}  />\r\n                <MyCustomTxt name=\"Icon\" label=\"Icon\" type=\"text\" required={true}  />\r\n                {/* <MyCustomTxt name=\"UserAccessRoles\" label=\"UserAccessRoles\" type=\"text\" required={true}  />  */}\r\n\r\n               \r\n            {\r\n            <Autocomplete id=\"UserAccessRoles\" className=\"customFieldMargin\" multiple \r\n                style={{width: '300'}}   \r\n                size=\"small\"  \r\n                value={roles as any}  \r\n                options={roleList as any[]} \r\n                getOptionLabel={(option:AppUserRoleMaster) => option.Name}                  \r\n                freeSolo\r\n                renderTags={(value, getTagProps) =>\r\n                  value.map((option:any, index) => (\r\n                    roles  && <Chip variant=\"outlined\" label={option.Name} {...getTagProps({ index })} /> \r\n                  ))\r\n                }\r\n                renderInput={(params) => (\r\n                  <TextField {...params} variant=\"outlined\" label=\"Access Groups\" placeholder=\"Access Groups\" fullWidth />\r\n                )}\r\n                \r\n                onChange={(event:any, newValue:any) => {\r\n                  //debugger;\r\n                  var unq = true;\r\n                  for(let i=0;i<newValue.length-1;i++){\r\n                    if( newValue[i].Id === newValue[newValue.length-1].Id){\r\n                      unq = false;\r\n                      break;\r\n                    }\r\n                  }\r\n                  if(unq){\r\n                    setRoles(newValue); \r\n                  }                                          \r\n                }}\r\n              />}\r\n\r\n\r\n                <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\r\n                    { actions && (actions as any).map( (row:any) => (                    \r\n                    <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" key={row.Id}                         \r\n                        onClick={ () => { setActionId( row.Id); }} > {row.Action}</Button>                     \r\n                    ))}\r\n                    <Button onClick={ () => { history.push('/Navigationlist');  }}>Back</Button>                   \r\n                </ButtonGroup>    \r\n\r\n            </Form>\r\n            \r\n            </Formik>\r\n\r\n        </Container>\r\n    )\r\n}\r\n\r\nexport default observer(NavigationEdit);","C:\\Shaiju\\wayooz\\client-app\\src\\Portal\\Navigation\\Navigation.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\Portal\\Api\\Api.ts",[],"C:\\Shaiju\\wayooz\\client-app\\src\\Portal\\Navigation\\NavigationList.tsx",["685"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { LinearProgress } from '@material-ui/core';\r\nimport MaterialTable from 'material-table';\r\nimport { ActionConfig, ApiContext, AppApiAction, AppUserRoleMaster, IAppStatusList } from '../Api/Api';\r\nimport { AppNavigation } from './Navigation';\r\nimport TableButton from '../../app/common/form/TableButton';\r\nimport ErrorMessage from '../../app/common/common/ErrorMessage';\r\n\r\nconst NavigationList: React.FC = () => {\r\n\r\n    const [loading, setLoading] = useState(true);\r\n    const [data, setData] = useState<AppNavigation[]>();\r\n    const [stausList, setStausList] = useState<IAppStatusList[]>();\r\n    const [roleList, setRoleList] = useState<AppUserRoleMaster[]>();\r\n    const [error, setError] = useState('');\r\n\r\n    const ApiStore = useContext(ApiContext);\r\n    useEffect(() => {    \r\n        setLoading(true); \r\n\r\n        ApiStore.getRoleList().then( res => {\r\n            setRoleList(res);\r\n        })\r\n\r\n        ApiStore.getStatusList(ActionConfig.NavigationTableID).then( res => {\r\n            setStausList(res);\r\n        })\r\n\r\n        ApiStore.LoadDataList(ActionConfig.NavigationList, setData, setLoading, setError );\r\n \r\n        \r\n    },[ApiStore, ApiStore.LoadDataList]);\r\n\r\n   \r\n    const TableColumns = [     \r\n        {title: \"Order\", field: \"Order\", defaultSort: \"asc\"},\r\n        { title: \"Title\", field: \"Title\", defaultSort: \"asc\",\r\n          render :  (values: any) => { return <Link to={`/NavigationEdit/${values.Id}`} >{values.Title}</Link> }  },   \r\n        { title: \"StatusId\", field: \"StatusId\",\r\n          render : (values: any) => {  return stausList &&  (stausList as IAppStatusList[]).find( u => u.Id === Number(values.StatusId) )?.Title }\r\n        },  \r\n        {title: \"Path\", field: \"Path\"},\r\n        {title: \"Icon\", field: \"Icon\"},\r\n        {title: \"UserAccessRoles\", field: \"UserAccessRoles\",\r\n         render : (values: any) => {  return ApiStore.rolesName(roleList as any, values.UserAccessRoles)   }},          \r\n    ];\r\n\r\n    const TableActions = [\r\n            {          \r\n                icon: (values: any) => { return <TableButton  label=\"Add New\" path=\"/NavigationEdit\" /> },\r\n                tooltip: 'Add New',\r\n                isFreeAction: true, \r\n                onClick: (event:any) =>{  },                                     \r\n            },\r\n            {          \r\n                icon: (values: any) => { return <TableButton  label=\"Refresh\"  /> },\r\n                tooltip: 'Refresh',\r\n                isFreeAction: true, \r\n                onClick: (event:any) =>{  ApiStore.LoadDataList(ActionConfig.NavigationList, setData, setLoading, setError ); },                                     \r\n            }\r\n        ]; \r\n\r\n    if(loading){\r\n        return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \r\n    }\r\n\r\n    return(\r\n        <React.Fragment>\r\n       \r\n        <ErrorMessage message={error} />                           \r\n        { data &&          \r\n            <MaterialTable                    \r\n              title=\"Navigation List\"\r\n              data={data as AppNavigation[]}\r\n              columns={TableColumns as any}\r\n              actions={TableActions as any}\r\n              options={{ sorting:true, search: true, paging: true, filtering: true, exportButton: true, pageSize:10,  tableLayout: \"auto\"}}/>\r\n        }       \r\n        </React.Fragment>\r\n        \r\n    )\r\n}\r\n\r\nexport default observer(NavigationList);","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\common\\ErrorMessage.tsx",["686","687"],"import React from 'react'\r\nimport { useParams } from 'react-router-dom';\r\nimport {Card, Typography } from '@material-ui/core';\r\nimport { AppTheme } from '../Theme';\r\n\r\n\r\n\r\ninterface Parms {\r\n  message : string;   \r\n}\r\n\r\n\r\nconst ErrorMessage: React.FC<Parms> = ({ message=\"\" }) => {\r\n\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {message && \r\n        <Card style={{ margin: '10px', padding: '10px', color:AppTheme.ErrorMessgeColor}}>{message}</Card>        \r\n      }\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default ErrorMessage;\r\n\r\n","C:\\Shaiju\\wayooz\\client-app\\src\\Portal\\Navigation\\LeftNavBar.tsx",[],"C:\\Shaiju\\wayooz\\client-app\\src\\Portal\\Employee\\EmployeeList.tsx",["688"],"import React, { useContext, useEffect, useState } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { LinearProgress } from '@material-ui/core';\r\nimport MaterialTable from 'material-table';\r\nimport moment from 'moment';\r\n\r\nimport { ActionConfig, ApiContext, AppUserRoleMaster, IAppStatusList } from '../Api/Api';\r\nimport TableButton from '../../app/common/form/TableButton';\r\nimport ErrorMessage from '../../app/common/common/ErrorMessage';\r\nimport { Employee } from './Employee';\r\n\r\nconst EmployeeList: React.FC = () => {\r\n    \r\n  const [loading, setLoading] = useState(true);\r\n  const [data, setData] = useState<Employee[]>();\r\n  const [stausList, setStausList] = useState<IAppStatusList[]>();\r\n  const [roleList, setRoleList] = useState<AppUserRoleMaster[]>();\r\n  const [error, setError] = useState('');\r\n\r\n  const ApiStore = useContext(ApiContext);\r\n      \r\n  useEffect(() => {    \r\n    setLoading(true); \r\n\r\n    ApiStore.getRoleList().then( res => {\r\n        setRoleList(res);\r\n    })\r\n     \r\n    ApiStore.getStatusList(ActionConfig.EmployeeTableID).then( res => {\r\n        setStausList(res);\r\n    })\r\n\r\n    ApiStore.LoadDataList(ActionConfig.EmployeeList, setData, setLoading, setError );\r\n\r\n    \r\n  },[ApiStore, ApiStore.LoadDataList]);\r\n\r\n  const TableColumns = [     \r\n    {title: \"Id\", field: \"TableItemId\", defaultSort: \"asc\"},\r\n    { title: \"Name\", field: \"Name\",\r\n      render :  (values: any) => { return <Link to={`/EmployeeEdit/${values.Id}`} >{values.Name}</Link> }  },   \r\n    { title: \"StatusId\", field: \"StatusId\",\r\n      render : (values: any) => {  return stausList &&  (stausList as IAppStatusList[]).find( u => u.Id === Number(values.StatusId) )?.Title }\r\n    },  \r\n    {title: \"IsActive\", field: \"IsActive\"},\r\n    {title: \"DOB\", field: \"DOB\",\r\n      render : (values: any) => { return moment(values.DOB).format(\"DD-MMM-YYYY\")  }  },\r\n    {title: \"Country\", field: \"Country\"},\r\n    {title: \"Manager\", field: \"Manager\"}        \r\n  ];\r\n\r\n  const TableActions = [\r\n    {          \r\n        icon: (values: any) => { return <TableButton  label=\"Add New\" path=\"/EmployeeEdit\" /> },\r\n        tooltip: 'Add New',\r\n        isFreeAction: true, \r\n        onClick: (event:any) =>{  },                                     \r\n    },\r\n    {          \r\n        icon: (values: any) => { return <TableButton  label=\"Refresh\"  /> },\r\n        tooltip: 'Refresh',\r\n        isFreeAction: true, \r\n        onClick: (event:any) =>{  ApiStore.LoadDataList(ActionConfig.NavigationList, setData, setLoading, setError ); },                                     \r\n    }\r\n  ];\r\n\r\n  if(loading){\r\n    return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" />     \r\n  }\r\n\r\n      return (\r\n        <React.Fragment>       \r\n        <ErrorMessage message={error} />                           \r\n        { data &&          \r\n            <MaterialTable                    \r\n              title=\"Navigation List\"\r\n              data={data as Employee[]}\r\n              columns={TableColumns as any}\r\n              actions={TableActions as any}\r\n              options={{ sorting:true, search: true, paging: true, filtering: true, exportButton: true, pageSize:10,  tableLayout: \"auto\"}}/>\r\n        }       \r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default observer(EmployeeList);","C:\\Shaiju\\wayooz\\client-app\\src\\Portal\\Employee\\EmployeeEdit.tsx",["689","690","691","692","693","694"],"\r\nimport { Button, ButtonGroup, Container, LinearProgress } from '@material-ui/core';\r\nimport { Form, Formik } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport React, { useContext, useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport { observer } from 'mobx-react-lite';\r\n\r\n\r\nimport MyCustomTxt from '../../app/common/form/MyCustomTxt';\r\nimport { ActionConfig, ApiContext, AppStatusList, AppUserRoleMaster } from '../Api/Api'\r\nimport { Employee } from './Employee';\r\nimport ErrorMessage from '../../app/common/common/ErrorMessage';\r\nimport ConfigDropDown from '../../app/common/form/ConfigDropDown';\r\nimport MyCheckBox from '../../app/common/form/MyCheckBox';\r\nimport RoleSelect from '../../app/common/form/RoleSelect';\r\nimport UserSelect from '../../app/common/form/UserSelect';\r\nimport MyDatePicker from '../../app/common/form/MyDatePicker';\r\nimport MyAttachment from '../../app/common/form/MyAttachment';\r\nimport { AnyCnameRecord } from 'dns';\r\n\r\n\r\n\r\ninterface DetailParms {\r\n    id: string;\r\n}\r\n\r\nconst EmployeeEdit: React.FC = () => {\r\n    const [selectedDate, handleDateChange] = useState(new Date());\r\n\r\n    const { id } = useParams<DetailParms>();\r\n    let history = useHistory();\r\n\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(true);\r\n    const [item, setItem] = useState(new Employee());\r\n    const [actionId, setActionId] = useState(0);\r\n    const [actions, setActions] = useState<AppStatusList[]>();\r\n    const [roleList, setRoleList] = useState<AppUserRoleMaster[]>();\r\n    \r\n    const [roles, setRoles] = useState<AppUserRoleMaster[]>();\r\n    \r\n\r\n    const ApiStore = useContext(ApiContext);\r\n\r\n\r\n    useEffect(() => {\r\n        var IdVal =0;\r\n        if (id) { IdVal=Number(id); }\r\n\r\n        setLoading(true);\r\n        ApiStore.updateActions(ActionConfig.EmployeeFlowId, IdVal, setActions, setError);\r\n      \r\n        ApiStore.getRoleList().then( resRoles => {\r\n          setRoleList(resRoles);        \r\n          \r\n          if(id){            \r\n            ApiStore.LoadItem(ActionConfig.EmployeeById,id, setError).then( res => {              \r\n              if(res){\r\n                //debugger;\r\n  \r\n                setItem(res);\r\n                var roleArray = ApiStore.rolesFromArray(resRoles as any, res.UserAccessRoles as any);  \r\n\r\n                setRoles(roleArray);                                            \r\n              }\r\n              setLoading(false);   \r\n            });              \r\n          }\r\n          else{ \r\n              setItem(new Employee()); \r\n              setLoading(false);\r\n          }\r\n        });\r\n\r\n    },[id, ApiStore, ApiStore.updateActions, , ApiStore.getRoleList, ApiStore.LoadItem, setRoles, setItem, ApiStore.rolesFromArray, ApiStore.getConfigList ]);\r\n\r\n    const onItemSubmit = (values: any) => {\r\n        \r\n        debugger;\r\n        // Object.keys(values).forEach(function(key,index) {     \r\n            \r\n        //     var v = values[key];\r\n        //     type Data = typeof v;\r\n        //     console.log(typeof v);\r\n        //     //console.log(Data.na);\r\n        //     if(v === \"Attachment[]\"){\r\n        //         console.log(v);\r\n        //     }\r\n        //     if(v === \"string\"){\r\n        //         console.log(v);\r\n        //     }\r\n        //     // if( colMap.get(key) && values[key] ){        \r\n        //     //     dataParm[ colMap.get(key) as string ] =  values[key] ;\r\n        //     // }      \r\n        // });  \r\n\r\n        // return;\r\n\r\n        //values.UserAccessRoles = roles;\r\n        \r\n        let formData = new FormData();\r\n        formData = ApiStore.updateAttachments(formData, values.Passport); \r\n       \r\n        formData.append('ActionId', actionId.toString() ); \r\n        formData.append('Parm1', JSON.stringify(values) );\r\n        formData.append('ItemId',  values.Id );\r\n\r\n        ApiStore.ExecuteAction(formData, setError).then( (res) => {    \r\n            debugger;        \r\n            if(res){\r\n              history.push('/EmployeeList');\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n\r\n    if(loading){\r\n        return <LinearProgress color=\"secondary\"  className=\"loaderStyle\" /> \r\n    }\r\n\r\n    return(\r\n    \r\n        <Container component=\"main\" maxWidth=\"lg\">  \r\n          <ErrorMessage message={error} />       \r\n          \r\n          <Formik\r\n            initialValues={item}\r\n            validationSchema={Yup.object({\r\n               // Name: Yup.string().required('First Name required'),                     \r\n             })}\r\n          onSubmit={onItemSubmit}\r\n        >\r\n            \r\n            <Form >\r\n\r\n           \r\n                <MyCheckBox name=\"IsActive\" label=\"Is Active\"  />\r\n                <MyCustomTxt name=\"Name\" label=\"Name\" type=\"text\" required={false} width=\"300px\" />\r\n                <MyDatePicker name=\"DOB\" label=\"DOB\" required={false} width=\"300px\" />\r\n                <ConfigDropDown configId={ActionConfig.ConfigCountries} name=\"Country\" label=\"Country\" width=\"300px\" /> \r\n                <MyCustomTxt name=\"Salary\" label=\"Salary\" type=\"number\" required={false} width=\"300px\" />                \r\n                <UserSelect name=\"Manager\" label=\"Manager\" width=\"300px\"  />\r\n                <RoleSelect name=\"Roles\" label=\"Roles\" width=\"300px\" multiple={true} />\r\n\r\n                <MyAttachment downloadActionID={ActionConfig.EmployeePassportDownload} multipleFile={false} name=\"Passport\" label=\"Upload Passport\"  />\r\n               \r\n                <ButtonGroup variant=\"contained\" color=\"primary\" aria-label=\"contained primary button group\">\r\n                    { actions && (actions as any).map( (row:any) => (                    \r\n                    <Button type=\"submit\" fullWidth variant=\"contained\" color=\"primary\" key={row.Id}                         \r\n                        onClick={ () => { setActionId( row.Id); }} > {row.Action}</Button>                     \r\n                    ))}\r\n                    <Button onClick={ () => { history.push('/Employeelist');  }}>Back</Button>                   \r\n                </ButtonGroup>\r\n\r\n            </Form>\r\n        \r\n        \r\n        </Formik>\r\n\r\n        \r\n    \r\n        </Container> \r\n    )    \r\n  }\r\n\r\n\r\n  export default observer(EmployeeEdit);","C:\\Shaiju\\wayooz\\client-app\\src\\Portal\\Employee\\Employee.ts",["695"],"import { Attachment, IAttachment } from \"../../app/common/form/MyAttachment\";\r\nimport { AppConfig, AppUser, AppUserRoleMaster, IAppConfig, IAppUser } from \"../Api/Api\";\r\n\r\nexport interface IEmployee {\r\n\tId: number\r\n\tTableItemId: number\r\n\tIsActive: boolean\r\n\tName: string\r\n\tDOB:Date\r\n\tCountry:IAppConfig[]\r\n\tPassport?: IAttachment[]\r\n\tSalary: number\r\n\tManager: IAppUser\r\n\tRoles: AppUserRoleMaster[]\r\n}\r\n\r\nexport class Employee implements IEmployee {\r\n\tId: number = 0;\r\n\tTableItemId: number = 0;\r\n\tIsActive: boolean = false;\r\n\tName: string= '';\r\n\tDOB:Date = new Date();\r\n\tCountry:IAppConfig[] = [];\r\n\tPassport?: Attachment[] = [];\r\n\tSalary: number = 0;\r\n\tManager: IAppUser = new AppUser();\r\n\tRoles: AppUserRoleMaster[] = [];\r\n\t\t\t\r\n  constructor(init?: IEmployee) {\r\n    Object.assign(this, init);\r\n  }\r\n}","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\ConfigDropDown.tsx",["696"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {  \r\n  useField,\r\n  FieldAttributes,  \r\n} from \"formik\";\r\n\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { ApiContext, AppConfig, IAppConfig } from \"../../../Portal/Api/Api\";\r\nimport { Chip, TextField } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\n\r\ntype CustomProps = { multiple?:boolean, configId:number, label: string, width?: string  } & FieldAttributes<{}>;\r\n\r\n\r\n\r\nconst ConfigDropDown: React.FC<CustomProps> = ({ multiple=false, configId, label, placeholder, type,required,autoComplete, autoFocus, width, ...props }) => {\r\n\r\n    const ApiStore = useContext(ApiContext);\r\n\r\n    const [field, , { setValue }] = useField<{}>(props);\r\n    const [configList, setConfigList] = useState<AppConfig[]>();\r\n\r\n\r\n    useEffect(() => {\r\n      ApiStore.getConfigList(configId, setConfigList).then( res => { \r\n        \r\n        if(field.value && (field.value as any).length > 0){\r\n          var roleArray = ApiStore.configFromArray(res, field.value as any);  \r\n          if(!multiple && roleArray.length>0){\r\n            setValue(roleArray[0]);\r\n          }\r\n          else{\r\n            setValue(roleArray);\r\n          }        \r\n        }\r\n        else{\r\n          setValue(new AppConfig() );\r\n        }\r\n\r\n        setConfigList(res)\r\n      \r\n      });\r\n    },[ ApiStore.getConfigList, setConfigList]);\r\n    \r\n      \r\n    return ( \r\n      \r\n      // <FormControl variant=\"outlined\"  size=\"small\" style={{ marginTop : 10 , marginBottom : 10, width:width,  }}>\r\n      //   <InputLabel id={`${field.name}-select-outlined-label`}>{label}</InputLabel>      \r\n      //   <Select\r\n      //     {...field}\r\n      //     labelId={`${field.name}-select-outlined-label`}\r\n      //     id={`${field.name}-select-outlined`}\r\n      //     label={label}\r\n      //   >\r\n      //     <MenuItem value=\"\"><em>None</em></MenuItem>\r\n      //     {configList &&  (configList as any).map((row:any) => (                              \r\n      //         <MenuItem key={row.Id} value={row.Id}>{row.Title}</MenuItem>               \r\n      //     ))}\r\n      //   </Select>        \r\n      // </FormControl>\r\n\r\n    \r\n \r\n    <FormControl variant=\"outlined\"  size=\"small\" style={{ marginTop : 10 , marginBottom : 10, width:width, display: 'block' }}>\r\n      {configList && \r\n        <Autocomplete id=\"UserAccessRoles\" className=\"customFieldMargin\" multiple={multiple}   \r\n            {...field}\r\n            size=\"small\"              \r\n            value={field.value as IAppConfig[]}\r\n            options={configList as AppConfig[]} \r\n            getOptionLabel={(option:AppConfig) => option.Title}                  \r\n            freeSolo\r\n            renderTags={(value, getTagProps) =>\r\n              value.map((option:any, index) => (\r\n                value  && <Chip variant=\"outlined\" label={option.Title} {...getTagProps({ index })} /> \r\n              ))\r\n            }\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"outlined\" label={label} placeholder={placeholder} fullWidth />\r\n            )}\r\n            \r\n            onChange={(event:any, newValue:any) => {\r\n              debugger;\r\n              var unq = true;\r\n\r\n              if(multiple){\r\n                for(let i=0;i<newValue.length-1;i++){\r\n                  if( newValue[i].Id === newValue[newValue.length-1].Id){\r\n                    unq = false;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n              \r\n              if(unq){\r\n                setValue(newValue);\r\n              }                                          \r\n            }}\r\n        />\r\n          }\r\n      </FormControl>\r\n\r\n    \r\n    );\r\n  };\r\n\r\nexport default ConfigDropDown;\r\n\r\n\r\n","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\RoleSelect.tsx",["697","698"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {  \r\n  useField,\r\n  FieldAttributes,\r\n  Field,  \r\n  \r\n} from \"formik\";\r\n\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { ApiContext, AppUserRoleMaster } from \"../../../Portal/Api/Api\";\r\nimport { Chip, TextField } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\n\r\ntype CustomProps = { multiple?:boolean, label: string, width?: string  } & FieldAttributes<{}>;\r\n\r\n\r\n\r\nconst RoleSelect: React.FC<CustomProps> = ({ multiple=false, label, placeholder, type,required,autoComplete, autoFocus, width, ...props }) => {\r\n\r\n    const ApiStore = useContext(ApiContext);\r\n    const [field, , { setValue }] = useField<{}>(props);\r\n    const [val, setVal] =useState<any>();\r\n\r\n\r\n    useEffect(() => {\r\n      ApiStore.getRoleList().then( res => {\r\n            \r\n        //debugger;\r\n        if(field.value && (field.value as any).length > 0){\r\n          var roleArray = ApiStore.rolesFromArray(res, field.value as any);  \r\n          if(!multiple && roleArray.length>0){\r\n            setValue(roleArray[0]);\r\n          }\r\n          else{\r\n            setValue(roleArray);\r\n          }        \r\n        }\r\n        else{\r\n          var Roles: AppUserRoleMaster[] = [];\r\n          setValue( Roles as any );\r\n        }\r\n        \r\n        setVal(res);\r\n\r\n      });  \r\n    },[ ApiStore.getRoleList]);\r\n     \r\n      \r\n    return ( \r\n            \r\n      <FormControl variant=\"outlined\"  size=\"small\" style={{ marginTop : 10 , marginBottom : 10, width:width, display: 'block' }}>\r\n        { val &&\r\n        <Autocomplete id=\"UserAccessRoles\" className=\"customFieldMargin\" multiple={multiple}   \r\n          \r\n            {...field}\r\n            size=\"small\"              \r\n            value={field.value as any}\r\n            options={val as any[]} \r\n            getOptionLabel={(option:any) => option.Name}                  \r\n            freeSolo\r\n            renderTags={(value, getTagProps) =>\r\n              value.map((option:any, index) => (\r\n                value  && <Chip variant=\"outlined\" label={option.Name} {...getTagProps({ index })} /> \r\n              ))\r\n            }\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"outlined\" label={label} placeholder={placeholder} fullWidth />\r\n            )}\r\n            \r\n            onChange={(event:any, newValue:any) => {\r\n              //debugger;\r\n              var unq = true;\r\n\r\n              if(multiple){\r\n                for(let i=0;i<newValue.length-1;i++){\r\n                  if( newValue[i].Id === newValue[newValue.length-1].Id){\r\n                    unq = false;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n              \r\n              if(unq){\r\n                setValue(newValue);\r\n              }                                          \r\n            }}\r\n        />\r\n          }\r\n      </FormControl>\r\n    );\r\n  };\r\n\r\nexport default RoleSelect;\r\n\r\n\r\n","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\UserSelect.tsx",["699","700"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport {  \r\n  useField,\r\n  FieldAttributes,\r\n  Field,  \r\n  \r\n} from \"formik\";\r\n\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport { ApiContext, AppUser  } from \"../../../Portal/Api/Api\";\r\nimport { Chip, TextField } from \"@material-ui/core\";\r\nimport { Autocomplete } from \"@material-ui/lab\";\r\n\r\ntype CustomProps = { multiple?:boolean, label: string, width?: string  } & FieldAttributes<{}>;\r\n\r\n\r\n\r\nconst UserSelect: React.FC<CustomProps> = ({ multiple=false, label, placeholder, type,required,autoComplete, autoFocus, width, ...props }) => {\r\n\r\n    const ApiStore = useContext(ApiContext);\r\n    const [field, , { setValue }] = useField<{}>(props);\r\n    const [val, setVal] =useState<any[]>();\r\n\r\n    useEffect(() => {\r\n      ApiStore.getUserList().then( res => {\r\n        //debugger;\r\n        if(field.value && (field.value as any).length > 0){\r\n          var roleArray = ApiStore.userFromArray(res, field.value as any);  \r\n          if(!multiple && roleArray.length>0){\r\n            setValue(roleArray[0]);\r\n          }\r\n          else{\r\n            setValue(roleArray);\r\n          }        \r\n        }\r\n        else{\r\n\r\n          setValue(new AppUser() );\r\n        }\r\n\r\n        setVal(res);        \r\n      }); \r\n    },[ ApiStore.getUserList]);\r\n    \r\n      \r\n    return ( \r\n            \r\n      <FormControl variant=\"outlined\"  size=\"small\" style={{ marginTop : 10 , marginBottom : 10, width:width, display: 'block' }}>\r\n        {val  &&\r\n        <Autocomplete id=\"UserAccessRoles\" className=\"customFieldMargin\" multiple={multiple}   \r\n            {...field}\r\n            size=\"small\"              \r\n            value={field.value as any}\r\n            options={val as any[]} \r\n            getOptionLabel={(option:any) => option.Username}                  \r\n            freeSolo\r\n            renderTags={(value, getTagProps) =>\r\n              value.map((option:any, index) => (\r\n                value  && <Chip variant=\"outlined\" label={option.Username} {...getTagProps({ index })} /> \r\n              ))\r\n            }\r\n            renderInput={(params) => (\r\n              <TextField {...params} variant=\"outlined\" label={label} placeholder={placeholder} fullWidth />\r\n            )}\r\n            \r\n            onChange={(event:any, newValue:any) => {\r\n              //debugger;\r\n              var unq = true;\r\n\r\n              if(multiple){\r\n                for(let i=0;i<newValue.length-1;i++){\r\n                  if( newValue[i].Id === newValue[newValue.length-1].Id){\r\n                    unq = false;\r\n                    break;\r\n                  }\r\n                }\r\n              }\r\n              \r\n              if(unq){\r\n                setValue(newValue);\r\n              }                                          \r\n            }}\r\n        />\r\n      }\r\n      </FormControl>\r\n    );\r\n  };\r\n\r\nexport default UserSelect;\r\n\r\n\r\n","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\MyDatePicker.tsx",["701","702","703","704","705","706","707","708","709"],"\r\nimport React, { useEffect, useState } from \"react\";\r\nimport {  \r\n  useField,\r\n  FieldAttributes,  \r\n} from \"formik\";\r\n\r\nimport FormControl from '@material-ui/core/FormControl';\r\n\r\nimport DateFnsUtils from '@date-io/date-fns'; // choose your lib\r\nimport {\r\n    DatePicker,\r\n    TimePicker,\r\n    DateTimePicker,\r\n    MuiPickersUtilsProvider,\r\n    KeyboardDatePicker,\r\n  } from '@material-ui/pickers';\r\n\r\n\r\ntype CustomProps = { checked?: boolean, label?: string, width?: string  } & FieldAttributes<{}>;\r\n\r\nconst MyDatePicker : React.FC<CustomProps> = ({ checked, label, placeholder, type,required,autoComplete, autoFocus,  width, ...props }) => {\r\n    \r\n  \r\n    const [field,meta , { setValue }] = useField<{}>(props);\r\n    const [val, setVal] = useState(false);\r\n    \r\n\r\n    // useEffect(() => {\r\n    //   setVal(field.value as boolean);      \r\n    // },[setVal]);\r\n\r\n    const [selectedDate, handleDateChange] = useState(new Date());\r\n       \r\n    return (                  \r\n        <FormControl variant=\"outlined\" fullWidth style={{ marginTop : 10 , marginBottom : 10, width:width,  display: 'block'}} size=\"small\" >\r\n           {/* <FormControlLabel  \r\n                control={<Checkbox {...field}  checked={val} onClick={ () => { setVal(!val);} }  />}\r\n                label={label}              \r\n          /> */}\r\n\r\n      {/* <KeyboardDatePicker\r\n        autoOk\r\n        variant=\"inline\"\r\n        inputVariant=\"outlined\"\r\n        label=\"With keyboard\"\r\n        format=\"MM/dd/yyyy\"\r\n        value={selectedDate}\r\n        InputAdornmentProps={{ position: \"start\" }}\r\n        onChange={date => handleDateChange(date)}\r\n        onFocus={ () => { console.log(1); }}\r\n        onBlur={() => { console.log(2);}}\r\n      /> */}\r\n\r\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>           \r\n          <DatePicker\r\n            {...field}\r\n            autoOk\r\n            variant=\"inline\"\r\n            inputVariant=\"outlined\"\r\n            label={label}\r\n            \r\n            onChange={ (v:any) => { setValue(v) }}\r\n            size=\"small\"\r\n            fullWidth\r\n            format=\"dd-MMM-yyyy\"\r\n          />            \r\n        </MuiPickersUtilsProvider>\r\n\r\n        </FormControl>              \r\n    );\r\n  };\r\n\r\nexport default MyDatePicker;\r\n","C:\\Shaiju\\wayooz\\client-app\\src\\app\\common\\form\\MyAttachment.tsx",["710","711","712","713","714","715","716","717","718","719","720","721","722","723","724","725","726","727","728","729","730"],{"ruleId":"731","severity":1,"message":"732","line":35,"column":6,"nodeType":"733","endLine":35,"endColumn":43,"suggestions":"734"},{"ruleId":"735","severity":1,"message":"736","line":65,"column":30,"nodeType":"737","messageId":"738","endLine":65,"endColumn":32},{"ruleId":"739","severity":1,"message":"740","line":6,"column":8,"nodeType":"741","messageId":"742","endLine":6,"endColumn":16},{"ruleId":null,"fatal":true,"severity":2,"message":"743","line":125,"column":14},{"ruleId":"739","severity":1,"message":"744","line":10,"column":8,"nodeType":"741","messageId":"742","endLine":10,"endColumn":23},{"ruleId":"739","severity":1,"message":"745","line":12,"column":8,"nodeType":"741","messageId":"742","endLine":12,"endColumn":19},{"ruleId":"739","severity":1,"message":"746","line":13,"column":8,"nodeType":"741","messageId":"742","endLine":13,"endColumn":18},{"ruleId":"739","severity":1,"message":"747","line":14,"column":8,"nodeType":"741","messageId":"742","endLine":14,"endColumn":14},{"ruleId":"739","severity":1,"message":"748","line":16,"column":8,"nodeType":"741","messageId":"742","endLine":16,"endColumn":24},{"ruleId":"739","severity":1,"message":"749","line":1,"column":20,"nodeType":"741","messageId":"742","endLine":1,"endColumn":27},{"ruleId":"739","severity":1,"message":"750","line":3,"column":29,"nodeType":"741","messageId":"742","endLine":3,"endColumn":38},{"ruleId":"739","severity":1,"message":"751","line":19,"column":11,"nodeType":"741","messageId":"742","endLine":19,"endColumn":20},{"ruleId":"735","severity":1,"message":"752","line":33,"column":27,"nodeType":"737","messageId":"738","endLine":33,"endColumn":29},{"ruleId":"739","severity":1,"message":"753","line":1,"column":28,"nodeType":"741","messageId":"742","endLine":1,"endColumn":34},{"ruleId":"735","severity":1,"message":"736","line":18,"column":46,"nodeType":"737","messageId":"738","endLine":18,"endColumn":48},{"ruleId":"731","severity":1,"message":"754","line":24,"column":6,"nodeType":"733","endLine":24,"endColumn":25,"suggestions":"755"},{"ruleId":"756","replacedBy":"757"},{"ruleId":"758","replacedBy":"759"},{"ruleId":"756","replacedBy":"760"},{"ruleId":"758","replacedBy":"761"},{"ruleId":"735","severity":1,"message":"736","line":20,"column":14,"nodeType":"737","messageId":"738","endLine":20,"endColumn":16},{"ruleId":"731","severity":1,"message":"762","line":26,"column":5,"nodeType":"733","endLine":26,"endColumn":7,"suggestions":"763"},{"ruleId":"731","severity":1,"message":"764","line":63,"column":6,"nodeType":"733","endLine":63,"endColumn":119,"suggestions":"765"},{"ruleId":"766","severity":1,"message":"767","line":49,"column":39,"nodeType":"768","messageId":"769","endLine":49,"endColumn":41},{"ruleId":"731","severity":1,"message":"770","line":56,"column":8,"nodeType":"733","endLine":56,"endColumn":76,"suggestions":"771"},{"ruleId":"772","severity":1,"message":"773","line":176,"column":19,"nodeType":"768","messageId":"774","endLine":176,"endColumn":59},{"ruleId":"775","severity":1,"message":"776","line":284,"column":38,"nodeType":"777","endLine":284,"endColumn":118},{"ruleId":"775","severity":1,"message":"776","line":288,"column":37,"nodeType":"777","endLine":288,"endColumn":49},{"ruleId":"731","severity":1,"message":"778","line":22,"column":7,"nodeType":"733","endLine":22,"endColumn":15,"suggestions":"779"},{"ruleId":"775","severity":1,"message":"776","line":55,"column":23,"nodeType":"777","endLine":55,"endColumn":88},{"ruleId":"739","severity":1,"message":"780","line":6,"column":8,"nodeType":"741","messageId":"742","endLine":6,"endColumn":21},{"ruleId":"739","severity":1,"message":"781","line":20,"column":11,"nodeType":"741","messageId":"742","endLine":20,"endColumn":16},{"ruleId":"739","severity":1,"message":"782","line":20,"column":18,"nodeType":"741","messageId":"742","endLine":20,"endColumn":26},{"ruleId":"739","severity":1,"message":"781","line":25,"column":12,"nodeType":"741","messageId":"742","endLine":25,"endColumn":17},{"ruleId":"739","severity":1,"message":"782","line":25,"column":19,"nodeType":"741","messageId":"742","endLine":25,"endColumn":27},{"ruleId":"739","severity":1,"message":"781","line":29,"column":12,"nodeType":"741","messageId":"742","endLine":29,"endColumn":17},{"ruleId":"739","severity":1,"message":"782","line":29,"column":19,"nodeType":"741","messageId":"742","endLine":29,"endColumn":27},{"ruleId":"739","severity":1,"message":"781","line":28,"column":12,"nodeType":"741","messageId":"742","endLine":28,"endColumn":17},{"ruleId":"739","severity":1,"message":"782","line":28,"column":19,"nodeType":"741","messageId":"742","endLine":28,"endColumn":27},{"ruleId":"739","severity":1,"message":"781","line":24,"column":12,"nodeType":"741","messageId":"742","endLine":24,"endColumn":17},{"ruleId":"739","severity":1,"message":"782","line":24,"column":19,"nodeType":"741","messageId":"742","endLine":24,"endColumn":27},{"ruleId":"783","severity":1,"message":"784","line":59,"column":7,"nodeType":"733","messageId":"785","endLine":59,"endColumn":133},{"ruleId":"739","severity":1,"message":"786","line":6,"column":36,"nodeType":"741","messageId":"742","endLine":6,"endColumn":48},{"ruleId":"739","severity":1,"message":"787","line":2,"column":10,"nodeType":"741","messageId":"742","endLine":2,"endColumn":19},{"ruleId":"739","severity":1,"message":"788","line":3,"column":15,"nodeType":"741","messageId":"742","endLine":3,"endColumn":25},{"ruleId":"739","severity":1,"message":"789","line":18,"column":10,"nodeType":"741","messageId":"742","endLine":18,"endColumn":18},{"ruleId":"739","severity":1,"message":"790","line":20,"column":10,"nodeType":"741","messageId":"742","endLine":20,"endColumn":24},{"ruleId":"739","severity":1,"message":"791","line":29,"column":12,"nodeType":"741","messageId":"742","endLine":29,"endColumn":24},{"ruleId":"739","severity":1,"message":"792","line":29,"column":26,"nodeType":"741","messageId":"742","endLine":29,"endColumn":42},{"ruleId":"739","severity":1,"message":"789","line":39,"column":12,"nodeType":"741","messageId":"742","endLine":39,"endColumn":20},{"ruleId":"739","severity":1,"message":"793","line":41,"column":12,"nodeType":"741","messageId":"742","endLine":41,"endColumn":17},{"ruleId":"783","severity":1,"message":"784","line":76,"column":7,"nodeType":"733","messageId":"785","endLine":76,"endColumn":157},{"ruleId":"739","severity":1,"message":"794","line":2,"column":10,"nodeType":"741","messageId":"742","endLine":2,"endColumn":19},{"ruleId":"731","severity":1,"message":"795","line":43,"column":7,"nodeType":"733","endLine":43,"endColumn":47,"suggestions":"796"},{"ruleId":"739","severity":1,"message":"797","line":5,"column":3,"nodeType":"741","messageId":"742","endLine":5,"endColumn":8},{"ruleId":"731","severity":1,"message":"798","line":46,"column":7,"nodeType":"733","endLine":46,"endColumn":30,"suggestions":"799"},{"ruleId":"739","severity":1,"message":"797","line":5,"column":3,"nodeType":"741","messageId":"742","endLine":5,"endColumn":8},{"ruleId":"731","severity":1,"message":"798","line":43,"column":7,"nodeType":"733","endLine":43,"endColumn":30,"suggestions":"800"},{"ruleId":"739","severity":1,"message":"750","line":2,"column":17,"nodeType":"741","messageId":"742","endLine":2,"endColumn":26},{"ruleId":"739","severity":1,"message":"801","line":13,"column":5,"nodeType":"741","messageId":"742","endLine":13,"endColumn":15},{"ruleId":"739","severity":1,"message":"802","line":14,"column":5,"nodeType":"741","messageId":"742","endLine":14,"endColumn":19},{"ruleId":"739","severity":1,"message":"803","line":16,"column":5,"nodeType":"741","messageId":"742","endLine":16,"endColumn":23},{"ruleId":"739","severity":1,"message":"804","line":25,"column":18,"nodeType":"741","messageId":"742","endLine":25,"endColumn":22},{"ruleId":"739","severity":1,"message":"805","line":26,"column":12,"nodeType":"741","messageId":"742","endLine":26,"endColumn":15},{"ruleId":"739","severity":1,"message":"806","line":26,"column":17,"nodeType":"741","messageId":"742","endLine":26,"endColumn":23},{"ruleId":"739","severity":1,"message":"791","line":33,"column":12,"nodeType":"741","messageId":"742","endLine":33,"endColumn":24},{"ruleId":"739","severity":1,"message":"792","line":33,"column":26,"nodeType":"741","messageId":"742","endLine":33,"endColumn":42},{"ruleId":"739","severity":1,"message":"807","line":12,"column":8,"nodeType":"741","messageId":"742","endLine":12,"endColumn":21},{"ruleId":"739","severity":1,"message":"808","line":13,"column":23,"nodeType":"741","messageId":"742","endLine":13,"endColumn":34},{"ruleId":"739","severity":1,"message":"809","line":13,"column":36,"nodeType":"741","messageId":"742","endLine":13,"endColumn":45},{"ruleId":"739","severity":1,"message":"810","line":13,"column":47,"nodeType":"741","messageId":"742","endLine":13,"endColumn":51},{"ruleId":"739","severity":1,"message":"811","line":13,"column":53,"nodeType":"741","messageId":"742","endLine":13,"endColumn":67},{"ruleId":"739","severity":1,"message":"812","line":13,"column":148,"nodeType":"741","messageId":"742","endLine":13,"endColumn":157},{"ruleId":"739","severity":1,"message":"813","line":14,"column":8,"nodeType":"741","messageId":"742","endLine":14,"endColumn":19},{"ruleId":"739","severity":1,"message":"804","line":87,"column":19,"nodeType":"741","messageId":"742","endLine":87,"endColumn":23},{"ruleId":"739","severity":1,"message":"805","line":88,"column":12,"nodeType":"741","messageId":"742","endLine":88,"endColumn":15},{"ruleId":"739","severity":1,"message":"806","line":88,"column":17,"nodeType":"741","messageId":"742","endLine":88,"endColumn":23},{"ruleId":"739","severity":1,"message":"814","line":90,"column":12,"nodeType":"741","messageId":"742","endLine":90,"endColumn":26},{"ruleId":"735","severity":1,"message":"736","line":132,"column":16,"nodeType":"737","messageId":"738","endLine":132,"endColumn":18},{"ruleId":"735","severity":1,"message":"752","line":133,"column":21,"nodeType":"737","messageId":"738","endLine":133,"endColumn":23},{"ruleId":"735","severity":1,"message":"752","line":187,"column":21,"nodeType":"737","messageId":"738","endLine":187,"endColumn":23},{"ruleId":"815","severity":1,"message":"816","line":196,"column":15,"nodeType":"741","messageId":"817","endLine":196,"endColumn":16},{"ruleId":"772","severity":1,"message":"773","line":208,"column":21,"nodeType":"768","messageId":"774","endLine":208,"endColumn":61},{"ruleId":"735","severity":1,"message":"752","line":228,"column":69,"nodeType":"737","messageId":"738","endLine":228,"endColumn":71},{"ruleId":"735","severity":1,"message":"752","line":236,"column":32,"nodeType":"737","messageId":"738","endLine":236,"endColumn":34},{"ruleId":"775","severity":1,"message":"776","line":296,"column":48,"nodeType":"777","endLine":296,"endColumn":112},{"ruleId":"735","severity":1,"message":"752","line":301,"column":34,"nodeType":"737","messageId":"738","endLine":301,"endColumn":36},{"ruleId":"775","severity":1,"message":"776","line":301,"column":73,"nodeType":"777","endLine":301,"endColumn":128},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'PageTagStore'. Either include it or remove the dependency array.","ArrayExpression",["818"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","@typescript-eslint/no-unused-vars","'testComp' is defined but never used.","Identifier","unusedVar","Parsing error: Unexpected token. Did you mean `{'>'}` or `&gt;`?","'ContentEditable' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Select' is defined but never used.","'PageCategoryItem' is defined but never used.","'PageTag' is defined but never used.","'useEffect' is defined but never used.","'errorText' is assigned a value but never used.","Expected '!==' and instead saw '!='.","'useRef' is defined but never used.","React Hook useEffect has a missing dependency: 'CategoryId'. Either include it or remove the dependency array.",["819"],"no-native-reassign",["820"],"no-negated-in-lhs",["821"],["820"],["821"],"React Hook useEffect has missing dependencies: 'field.value', 'setValue', and 'type'. Either include them or remove the dependency array.",["822"],"React Hook useEffect has a missing dependency: 'error'. Either include it or remove the dependency array. You can also do a functional update 'setError(e => ...)' if you only need 'error' in the 'setError' call.",["823"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'AppConfigTypeStore' and 'types'. Either include them or remove the dependency array. You can also do a functional update 'setTypes(t => ...)' if you only need 'types' in the 'setTypes' call.",["824"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'attch'.","unsafeRefs","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","React Hook useEffect has a missing dependency: 'field.value'. Either include it or remove the dependency array.",["825"],"'DashboardIcon' is defined but never used.","'error' is assigned a value but never used.","'setError' is assigned a value but never used.","no-sparse-arrays","Unexpected comma in middle of array.","unexpectedSparseArray","'AppApiAction' is defined but never used.","'useParams' is defined but never used.","'Typography' is defined but never used.","'roleList' is assigned a value but never used.","'AnyCnameRecord' is defined but never used.","'selectedDate' is assigned a value but never used.","'handleDateChange' is assigned a value but never used.","'roles' is assigned a value but never used.","'AppConfig' is defined but never used.","React Hook useEffect has missing dependencies: 'ApiStore', 'configId', 'field.value', 'multiple', and 'setValue'. Either include them or remove the dependency array.",["826"],"'Field' is defined but never used.","React Hook useEffect has missing dependencies: 'ApiStore', 'field.value', 'multiple', and 'setValue'. Either include them or remove the dependency array.",["827"],["828"],"'TimePicker' is defined but never used.","'DateTimePicker' is defined but never used.","'KeyboardDatePicker' is defined but never used.","'meta' is assigned a value but never used.","'val' is assigned a value but never used.","'setVal' is assigned a value but never used.","'MaterialTable' is defined but never used.","'ButtonGroup' is defined but never used.","'Container' is defined but never used.","'Grid' is defined but never used.","'LinearProgress' is defined but never used.","'TextField' is defined but never used.","'TableButton' is defined but never used.","'attachFileList' is assigned a value but never used.","@typescript-eslint/no-redeclare","'i' is already defined.","redeclared",{"desc":"829","fix":"830"},{"desc":"831","fix":"832"},"no-global-assign","no-unsafe-negation",{"desc":"833","fix":"834"},{"desc":"835","fix":"836"},{"desc":"837","fix":"838"},{"desc":"839","fix":"840"},{"desc":"841","fix":"842"},{"desc":"843","fix":"844"},{"desc":"845","fix":"846"},"Update the dependencies array to be: [PageTagStore, userStore, userStore.getCurrentUser]",{"range":"847","text":"848"},"Update the dependencies array to be: [CategoryId, PageCategoryStore]",{"range":"849","text":"850"},"Update the dependencies array to be: [field.value, setValue, type]",{"range":"851","text":"852"},"Update the dependencies array to be: [id, AppTableMasterStore, AppTableMasterStore.loadItem, AppColumnMasterStore.getColumnList, AppColumnMasterStore, error]",{"range":"853","text":"854"},"Update the dependencies array to be: [AppConfigStore, AppConfigStore.getList, AppConfigTypeStore, AppConfigTypeStore.getList, types]",{"range":"855","text":"856"},"Update the dependencies array to be: [field.value, setVal]",{"range":"857","text":"858"},"Update the dependencies array to be: [ApiStore, ApiStore.getConfigList, configId, field.value, multiple, setConfigList, setValue]",{"range":"859","text":"860"},"Update the dependencies array to be: [ApiStore, ApiStore.getRoleList, field.value, multiple, setValue]",{"range":"861","text":"862"},"Update the dependencies array to be: [ApiStore, ApiStore.getUserList, field.value, multiple, setValue]",{"range":"863","text":"864"},[1466,1503],"[PageTagStore, userStore, userStore.getCurrentUser]",[824,843],"[CategoryId, PageCategoryStore]",[702,704],"[field.value, setValue, type]",[2370,2483],"[id, AppTableMasterStore, AppTableMasterStore.loadItem, AppColumnMasterStore.getColumnList, AppColumnMasterStore, error]",[1962,2030],"[AppConfigStore, AppConfigStore.getList, AppConfigTypeStore, AppConfigTypeStore.getList, types]",[659,667],"[field.value, setVal]",[1377,1417],"[ApiStore, ApiStore.getConfigList, configId, field.value, multiple, setConfigList, setValue]",[1373,1396],"[ApiStore, ApiStore.getRoleList, field.value, multiple, setValue]",[1300,1323],"[ApiStore, ApiStore.getUserList, field.value, multiple, setValue]"]